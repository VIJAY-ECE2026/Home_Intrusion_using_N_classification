
homeinstructuion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000912c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  080092c0  080092c0  0000a2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce0  08009ce0  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ce0  08009ce0  0000ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ce8  08009ce8  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce8  08009ce8  0000ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009cf0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f78  200001e8  08009ed8  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  08009ed8  0000c160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f84f  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002303  00000000  00000000  0001aa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0001cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5b  00000000  00000000  0001db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022454  00000000  00000000  0001e563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f524  00000000  00000000  000409b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a3d  00000000  00000000  0004fedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  00121918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  001219a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0012650c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092a4 	.word	0x080092a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080092a4 	.word	0x080092a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/

/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

	audio = HAL_ADC_GetValue(&hadc1);
 8000ea0:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <HAL_ADC_ConvCpltCallback+0x24>)
 8000ea2:	f001 f8a1 	bl	8001fe8 <HAL_ADC_GetValue>
 8000ea6:	ee07 0a90 	vmov	s15, r0
 8000eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x28>)
 8000eb0:	edc3 7a00 	vstr	s15, [r3]

}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000204 	.word	0x20000204
 8000ec0:	200002f0 	.word	0x200002f0

08000ec4 <main>:

  */

int main(void)

{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0



  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8000eca:	f000 fc24 	bl	8001716 <HAL_Init>



  /* USER CODE BEGIN Init */

  enum neai_state error_code = neai_classification_init(knowledge);
 8000ece:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <main+0x50>)
 8000ed0:	f004 f8ec 	bl	80050ac <neai_classification_init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]

   	if (error_code != NEAI_OK) {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d008      	beq.n	8000ef0 <main+0x2c>

   		/* This happens if the knowledge does not correspond to the library or if the library works into a not supported board. */

   	printf("Knowledge initialization ERROR");
 8000ede:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <main+0x54>)
 8000ee0:	f005 ff18 	bl	8006d14 <iprintf>

   	printf("%d", error_code);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <main+0x58>)
 8000eea:	f005 ff13 	bl	8006d14 <iprintf>
 8000eee:	e002      	b.n	8000ef6 <main+0x32>

   	else

   	{

   		printf("Knowledge initialization done");
 8000ef0:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <main+0x5c>)
 8000ef2:	f005 ff0f 	bl	8006d14 <iprintf>



  /* Configure the system clock */

  SystemClock_Config();
 8000ef6:	f000 f817 	bl	8000f28 <SystemClock_Config>



  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8000efa:	f000 f90b 	bl	8001114 <MX_GPIO_Init>

  MX_USART2_UART_Init();
 8000efe:	f000 f8d9 	bl	80010b4 <MX_USART2_UART_Init>

  MX_ADC1_Init();
 8000f02:	f000 f873 	bl	8000fec <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */

HAL_ADC_Start_IT(&hadc1);
 8000f06:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <main+0x60>)
 8000f08:	f000 ffba 	bl	8001e80 <HAL_ADC_Start_IT>

  while (1)

  {

	  Inference();
 8000f0c:	f000 f96c 	bl	80011e8 <Inference>
 8000f10:	e7fc      	b.n	8000f0c <main+0x48>
 8000f12:	bf00      	nop
 8000f14:	08009358 	.word	0x08009358
 8000f18:	08009300 	.word	0x08009300
 8000f1c:	08009320 	.word	0x08009320
 8000f20:	08009324 	.word	0x08009324
 8000f24:	20000204 	.word	0x20000204

08000f28 <SystemClock_Config>:

  */

void SystemClock_Config(void)

{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b096      	sub	sp, #88	@ 0x58
 8000f2c:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2244      	movs	r2, #68	@ 0x44
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f006 f83c 	bl	8006fb4 <memset>

  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage

  */

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f4e:	f002 f96d 	bl	800322c <HAL_PWREx_ControlVoltageScaling>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x34>

  {

    Error_Handler();
 8000f58:	f000 f9a2 	bl	80012a0 <Error_Handler>

  /** Configure LSE Drive Capability

  */

  HAL_PWR_EnableBkUpAccess();
 8000f5c:	f002 f948 	bl	80031f0 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <SystemClock_Config+0xc0>)
 8000f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f66:	4a20      	ldr	r2, [pc, #128]	@ (8000fe8 <SystemClock_Config+0xc0>)
 8000f68:	f023 0318 	bic.w	r3, r3, #24
 8000f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  * in the RCC_OscInitTypeDef structure.

  */

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f70:	2314      	movs	r3, #20
 8000f72:	617b      	str	r3, [r7, #20]

  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]

  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f80:	2360      	movs	r3, #96	@ 0x60
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34

  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	647b      	str	r3, [r7, #68]	@ 0x44

  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f90:	2328      	movs	r3, #40	@ 0x28
 8000f92:	64bb      	str	r3, [r7, #72]	@ 0x48

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f94:	2307      	movs	r3, #7
 8000f96:	64fb      	str	r3, [r7, #76]	@ 0x4c

  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	653b      	str	r3, [r7, #80]	@ 0x50

  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 f997 	bl	80032d8 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x8c>

  {

    Error_Handler();
 8000fb0:	f000 f976 	bl	80012a0 <Error_Handler>

  /** Initializes the CPU, AHB and APB buses clocks

  */

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	603b      	str	r3, [r7, #0]

                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	607b      	str	r3, [r7, #4]

  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]

  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]

  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]



  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fd97 	bl	8003b00 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xb4>

  {

    Error_Handler();
 8000fd8:	f000 f962 	bl	80012a0 <Error_Handler>

  /** Enable MSI Auto calibration

  */

  HAL_RCCEx_EnableMSIPLLMode();
 8000fdc:	f003 f9aa 	bl	8004334 <HAL_RCCEx_EnableMSIPLLMode>

}
 8000fe0:	bf00      	nop
 8000fe2:	3758      	adds	r7, #88	@ 0x58
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <MX_ADC1_Init>:

  */

static void MX_ADC1_Init(void)

{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 0 */



  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]

  /** Common config

  */

  hadc1.Instance = ADC1;
 8001002:	4b29      	ldr	r3, [pc, #164]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001004:	4a29      	ldr	r2, [pc, #164]	@ (80010ac <MX_ADC1_Init+0xc0>)
 8001006:	601a      	str	r2, [r3, #0]

  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8001008:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 800100a:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 800100e:	605a      	str	r2, [r3, #4]

  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]

  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b24      	ldr	r3, [pc, #144]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]

  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800101c:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]

  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001024:	2204      	movs	r2, #4
 8001026:	615a      	str	r2, [r3, #20]

  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001028:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	761a      	strb	r2, [r3, #24]

  hadc1.Init.ContinuousConvMode = ENABLE;
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001030:	2201      	movs	r2, #1
 8001032:	765a      	strb	r2, [r3, #25]

  hadc1.Init.NbrOfConversion = 1;
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001036:	2201      	movs	r2, #1
 8001038:	61da      	str	r2, [r3, #28]

  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2020 	strb.w	r2, [r3, #32]

  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001044:	2200      	movs	r2, #0
 8001046:	629a      	str	r2, [r3, #40]	@ 0x28

  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 800104a:	2200      	movs	r2, #0
 800104c:	62da      	str	r2, [r3, #44]	@ 0x2c

  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001058:	2200      	movs	r2, #0
 800105a:	635a      	str	r2, [r3, #52]	@ 0x34

  hadc1.Init.OversamplingMode = DISABLE;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001064:	4810      	ldr	r0, [pc, #64]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001066:	f000 fdc9 	bl	8001bfc <HAL_ADC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0x88>

  {

    Error_Handler();
 8001070:	f000 f916 	bl	80012a0 <Error_Handler>

  /** Configure Regular Channel

  */

  sConfig.Channel = ADC_CHANNEL_6;
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_ADC1_Init+0xc4>)
 8001076:	603b      	str	r3, [r7, #0]

  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001078:	2306      	movs	r3, #6
 800107a:	607b      	str	r3, [r7, #4]

  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]

  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001080:	237f      	movs	r3, #127	@ 0x7f
 8001082:	60fb      	str	r3, [r7, #12]

  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001084:	2304      	movs	r3, #4
 8001086:	613b      	str	r3, [r7, #16]

  sConfig.Offset = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_ADC1_Init+0xbc>)
 8001092:	f001 f97f 	bl	8002394 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0xb4>

  {

    Error_Handler();
 800109c:	f000 f900 	bl	80012a0 <Error_Handler>

  /* USER CODE END ADC1_Init 2 */



}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000204 	.word	0x20000204
 80010ac:	50040000 	.word	0x50040000
 80010b0:	19200040 	.word	0x19200040

080010b4 <MX_USART2_UART_Init>:

  */

static void MX_USART2_UART_Init(void)

{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0



  /* USER CODE END USART2_Init 1 */

  huart2.Instance = USART2;
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010ba:	4a15      	ldr	r2, [pc, #84]	@ (8001110 <MX_USART2_UART_Init+0x5c>)
 80010bc:	601a      	str	r2, [r3, #0]

  huart2.Init.BaudRate = 115200;
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]

  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]

  huart2.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]

  huart2.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]

  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]

  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]

  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]

  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]

  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_USART2_UART_Init+0x58>)
 80010f8:	f003 fa1e 	bl	8004538 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x52>

  {

    Error_Handler();
 8001102:	f000 f8cd 	bl	80012a0 <Error_Handler>

  /* USER CODE END USART2_Init 2 */



}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000268 	.word	0x20000268
 8001110:	40004400 	.word	0x40004400

08001114 <MX_GPIO_Init>:

  */

static void MX_GPIO_Init(void)

{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]



  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a16      	ldr	r2, [pc, #88]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <MX_GPIO_Init+0x8c>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]



  /*Configure GPIO pin Output Level */

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2108      	movs	r1, #8
 8001176:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <MX_GPIO_Init+0x90>)
 8001178:	f002 f822 	bl	80031c0 <HAL_GPIO_WritePin>



  /*Configure GPIO pin : LD3_Pin */

  GPIO_InitStruct.Pin = LD3_Pin;
 800117c:	2308      	movs	r3, #8
 800117e:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_GPIO_Init+0x90>)
 8001194:	f001 feaa 	bl	8002eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000400 	.word	0x48000400

080011a8 <fill_audio_buffer>:



/* USER CODE BEGIN 4 */

void fill_audio_buffer(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

	for(int i = 0; i < BUFFER_SIZE; i++){
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e00c      	b.n	80011ce <fill_audio_buffer+0x26>

		audio_buffer[i * AXIS] = audio;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <fill_audio_buffer+0x38>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	490a      	ldr	r1, [pc, #40]	@ (80011e4 <fill_audio_buffer+0x3c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	601a      	str	r2, [r3, #0]

		HAL_Delay(3);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 fb1c 	bl	8001800 <HAL_Delay>
	for(int i = 0; i < BUFFER_SIZE; i++){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3301      	adds	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2bff      	cmp	r3, #255	@ 0xff
 80011d2:	ddef      	ble.n	80011b4 <fill_audio_buffer+0xc>

	}

}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002f0 	.word	0x200002f0
 80011e4:	200002f4 	.word	0x200002f4

080011e8 <Inference>:



void Inference(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

	uint16_t i, id_class_t0, id_class_tn;

	fill_audio_buffer();
 80011ee:	f7ff ffdb 	bl	80011a8 <fill_audio_buffer>

	neai_classification(audio_buffer, output_class_buffer, &id_class_t0);
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	461a      	mov	r2, r3
 80011f6:	491c      	ldr	r1, [pc, #112]	@ (8001268 <Inference+0x80>)
 80011f8:	481c      	ldr	r0, [pc, #112]	@ (800126c <Inference+0x84>)
 80011fa:	f004 f85b 	bl	80052b4 <neai_classification>

	for(i=0; i<CONFIRMATIONS_NB-1; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	80fb      	strh	r3, [r7, #6]
 8001202:	e027      	b.n	8001254 <Inference+0x6c>

	{

		fill_audio_buffer();
 8001204:	f7ff ffd0 	bl	80011a8 <fill_audio_buffer>

		neai_classification(audio_buffer, output_class_buffer, &id_class_tn);
 8001208:	1cbb      	adds	r3, r7, #2
 800120a:	461a      	mov	r2, r3
 800120c:	4916      	ldr	r1, [pc, #88]	@ (8001268 <Inference+0x80>)
 800120e:	4817      	ldr	r0, [pc, #92]	@ (800126c <Inference+0x84>)
 8001210:	f004 f850 	bl	80052b4 <neai_classification>

		if(id_class_t0 != id_class_tn)
 8001214:	88ba      	ldrh	r2, [r7, #4]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	429a      	cmp	r2, r3
 800121a:	d11f      	bne.n	800125c <Inference+0x74>

			break;

		}

		if(id_class_t0 == id_class_tn)
 800121c:	88ba      	ldrh	r2, [r7, #4]
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	429a      	cmp	r2, r3
 8001222:	d10e      	bne.n	8001242 <Inference+0x5a>

		{

			printf("Detected Class:");
 8001224:	4812      	ldr	r0, [pc, #72]	@ (8001270 <Inference+0x88>)
 8001226:	f005 fd75 	bl	8006d14 <iprintf>

			printf(id2class[id_class_t0]);
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	461a      	mov	r2, r3
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <Inference+0x8c>)
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	4618      	mov	r0, r3
 8001236:	f005 fd6d 	bl	8006d14 <iprintf>

			printf("\r\n");
 800123a:	480f      	ldr	r0, [pc, #60]	@ (8001278 <Inference+0x90>)
 800123c:	f005 fdda 	bl	8006df4 <puts>
 8001240:	e005      	b.n	800124e <Inference+0x66>

		else

		{

			printf("?");
 8001242:	203f      	movs	r0, #63	@ 0x3f
 8001244:	f005 fd78 	bl	8006d38 <putchar>

			printf("\r\n");
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <Inference+0x90>)
 800124a:	f005 fdd3 	bl	8006df4 <puts>
	for(i=0; i<CONFIRMATIONS_NB-1; i++)
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	3301      	adds	r3, #1
 8001252:	80fb      	strh	r3, [r7, #6]
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d9d4      	bls.n	8001204 <Inference+0x1c>

		}

	}

}
 800125a:	e000      	b.n	800125e <Inference+0x76>
			break;
 800125c:	bf00      	nop
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200006f4 	.word	0x200006f4
 800126c:	200002f4 	.word	0x200002f4
 8001270:	08009344 	.word	0x08009344
 8001274:	20000000 	.word	0x20000000
 8001278:	08009354 	.word	0x08009354

0800127c <__io_putchar>:



int __io_putchar(int ch){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001284:	1d39      	adds	r1, r7, #4
 8001286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800128a:	2201      	movs	r2, #1
 800128c:	4803      	ldr	r0, [pc, #12]	@ (800129c <__io_putchar+0x20>)
 800128e:	f003 f9a1 	bl	80045d4 <HAL_UART_Transmit>

	return ch;
 8001292:	687b      	ldr	r3, [r7, #4]

}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000268 	.word	0x20000268

080012a0 <Error_Handler>:

  */

void Error_Handler(void)

{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <Error_Handler+0x8>

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_MspInit+0x44>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_MspInit+0x44>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_MspInit+0x44>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b09e      	sub	sp, #120	@ 0x78
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2254      	movs	r2, #84	@ 0x54
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f005 fe4d 	bl	8006fb4 <memset>
  if(hadc->Instance==ADC1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <HAL_ADC_MspInit+0xd0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d14b      	bne.n	80013bc <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001324:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001328:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800132a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800132e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001330:	2301      	movs	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001338:	2310      	movs	r3, #16
 800133a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800133c:	2307      	movs	r3, #7
 800133e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001340:	2302      	movs	r3, #2
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001348:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f002 fdf8 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800135e:	f7ff ff9f 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_ADC_MspInit+0xd4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a18      	ldr	r2, [pc, #96]	@ (80013c8 <HAL_ADC_MspInit+0xd4>)
 8001368:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <HAL_ADC_MspInit+0xd4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <HAL_ADC_MspInit+0xd4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <HAL_ADC_MspInit+0xd4>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HAL_ADC_MspInit+0xd4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001392:	2302      	movs	r3, #2
 8001394:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001396:	230b      	movs	r3, #11
 8001398:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a8:	f001 fda0 	bl	8002eec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2012      	movs	r0, #18
 80013b2:	f001 fd64 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80013b6:	2012      	movs	r0, #18
 80013b8:	f001 fd7d 	bl	8002eb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013bc:	bf00      	nop
 80013be:	3778      	adds	r7, #120	@ 0x78
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	50040000 	.word	0x50040000
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b09e      	sub	sp, #120	@ 0x78
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	2254      	movs	r2, #84	@ 0x54
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 fde1 	bl	8006fb4 <memset>
  if(huart->Instance==USART2)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <HAL_UART_MspInit+0xcc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d148      	bne.n	800148e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fd9d 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001414:	f7ff ff44 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_UART_MspInit+0xd0>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	4a1f      	ldr	r2, [pc, #124]	@ (800149c <HAL_UART_MspInit+0xd0>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001422:	6593      	str	r3, [r2, #88]	@ 0x58
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <HAL_UART_MspInit+0xd0>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <HAL_UART_MspInit+0xd0>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	4a19      	ldr	r2, [pc, #100]	@ (800149c <HAL_UART_MspInit+0xd0>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_UART_MspInit+0xd0>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001448:	2304      	movs	r3, #4
 800144a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001458:	2307      	movs	r3, #7
 800145a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001466:	f001 fd41 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800146a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800146e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800147c:	2303      	movs	r3, #3
 800147e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148a:	f001 fd2f 	bl	8002eec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800148e:	bf00      	nop
 8001490:	3778      	adds	r7, #120	@ 0x78
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40004400 	.word	0x40004400
 800149c:	40021000 	.word	0x40021000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <NMI_Handler+0x4>

080014a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <MemManage_Handler+0x4>

080014b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f963 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <ADC1_IRQHandler+0x10>)
 8001506:	f000 fd7c 	bl	8002002 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000204 	.word	0x20000204

08001514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_kill>:

int _kill(int pid, int sig)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800152e:	f005 fd93 	bl	8007058 <__errno>
 8001532:	4603      	mov	r3, r0
 8001534:	2216      	movs	r2, #22
 8001536:	601a      	str	r2, [r3, #0]
  return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_exit>:

void _exit (int status)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffe7 	bl	8001524 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001556:	bf00      	nop
 8001558:	e7fd      	b.n	8001556 <_exit+0x12>

0800155a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e00a      	b.n	8001582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156c:	f3af 8000 	nop.w
 8001570:	4601      	mov	r1, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	60ba      	str	r2, [r7, #8]
 8001578:	b2ca      	uxtb	r2, r1
 800157a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	dbf0      	blt.n	800156c <_read+0x12>
  }

  return len;
 800158a:	687b      	ldr	r3, [r7, #4]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e009      	b.n	80015ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	60ba      	str	r2, [r7, #8]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe64 	bl	800127c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbf1      	blt.n	80015a6 <_write+0x12>
  }
  return len;
 80015c2:	687b      	ldr	r3, [r7, #4]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_close>:

int _close(int file)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f4:	605a      	str	r2, [r3, #4]
  return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_isatty>:

int _isatty(int file)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	@ (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	@ (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f005 fcf8 	bl	8007058 <__errno>
 8001668:	4603      	mov	r3, r0
 800166a:	220c      	movs	r2, #12
 800166c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000c000 	.word	0x2000c000
 8001694:	00000400 	.word	0x00000400
 8001698:	20000704 	.word	0x20000704
 800169c:	20001160 	.word	0x20001160

080016a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c8:	f7ff ffea 	bl	80016a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	@ (8001700 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	@ (8001704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <LoopForever+0xe>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <LoopForever+0x16>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f005 fcb7 	bl	8007064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016f6:	f7ff fbe5 	bl	8000ec4 <main>

080016fa <LoopForever>:

LoopForever:
    b LoopForever
 80016fa:	e7fe      	b.n	80016fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016fc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001708:	08009cf0 	.word	0x08009cf0
  ldr r2, =_sbss
 800170c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001710:	20001160 	.word	0x20001160

08001714 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <CAN1_RX0_IRQHandler>

08001716 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f001 fba1 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f80e 	bl	8001748 <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	e001      	b.n	800173c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001738:	f7ff fdb8 	bl	80012ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800173c:	79fb      	ldrb	r3, [r7, #7]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001754:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <HAL_InitTick+0x6c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <HAL_InitTick+0x70>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <HAL_InitTick+0x6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f001 fbad 	bl	8002ed2 <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d809      	bhi.n	8001798 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f001 fb77 	bl	8002e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_InitTick+0x74>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e007      	b.n	80017a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e004      	b.n	80017a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e001      	b.n	80017a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000001c 	.word	0x2000001c
 80017b8:	20000014 	.word	0x20000014
 80017bc:	20000018 	.word	0x20000018

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2000001c 	.word	0x2000001c
 80017e4:	20000708 	.word	0x20000708

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000708 	.word	0x20000708

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffde 	bl	80017e8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000001c 	.word	0x2000001c

08001848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	609a      	str	r2, [r3, #8]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3360      	adds	r3, #96	@ 0x60
 80018c2:	461a      	mov	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <LL_ADC_SetOffset+0x44>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	4313      	orrs	r3, r2
 80018e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018e8:	bf00      	nop
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	03fff000 	.word	0x03fff000

080018f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3360      	adds	r3, #96	@ 0x60
 8001906:	461a      	mov	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3360      	adds	r3, #96	@ 0x60
 8001934:	461a      	mov	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3330      	adds	r3, #48	@ 0x30
 8001990:	461a      	mov	r2, r3
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	4413      	add	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	211f      	movs	r1, #31
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	401a      	ands	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	0e9b      	lsrs	r3, r3, #26
 80019b8:	f003 011f 	and.w	r1, r3, #31
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	431a      	orrs	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b087      	sub	sp, #28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3314      	adds	r3, #20
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0e5b      	lsrs	r3, r3, #25
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	4413      	add	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	0d1b      	lsrs	r3, r3, #20
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2107      	movs	r1, #7
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	0d1b      	lsrs	r3, r3, #20
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	431a      	orrs	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0318 	and.w	r3, r3, #24
 8001a76:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a78:	40d9      	lsrs	r1, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	0007ffff 	.word	0x0007ffff

08001a9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001aac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6093      	str	r3, [r2, #8]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001afc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b24:	d101      	bne.n	8001b2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <LL_ADC_IsEnabled+0x18>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <LL_ADC_IsEnabled+0x1a>
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b9a:	f043 0204 	orr.w	r2, r3, #4
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d101      	bne.n	8001bc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d101      	bne.n	8001bec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e126      	b.n	8001e64 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fb65 	bl	80012f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff3f 	bl	8001ac0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff25 	bl	8001a9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff5a 	bl	8001b10 <LL_ADC_IsInternalRegulatorEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d115      	bne.n	8001c8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff3e 	bl	8001ae8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c6c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e6c <HAL_ADC_Init+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	4a7f      	ldr	r2, [pc, #508]	@ (8001e70 <HAL_ADC_Init+0x274>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c80:	e002      	b.n	8001c88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f9      	bne.n	8001c82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff3c 	bl	8001b10 <LL_ADC_IsInternalRegulatorEnabled>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff75 	bl	8001bae <LL_ADC_REG_IsConversionOngoing>
 8001cc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 80bf 	bne.w	8001e52 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 80bb 	bne.w	8001e52 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ce4:	f043 0202 	orr.w	r2, r3, #2
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff35 	bl	8001b60 <LL_ADC_IsEnabled>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10b      	bne.n	8001d14 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cfc:	485d      	ldr	r0, [pc, #372]	@ (8001e74 <HAL_ADC_Init+0x278>)
 8001cfe:	f7ff ff2f 	bl	8001b60 <LL_ADC_IsEnabled>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	485a      	ldr	r0, [pc, #360]	@ (8001e78 <HAL_ADC_Init+0x27c>)
 8001d10:	f7ff fd9a 	bl	8001848 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e5b      	ldrb	r3, [r3, #25]
 8001d18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d106      	bne.n	8001d50 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	3b01      	subs	r3, #1
 8001d48:	045b      	lsls	r3, r3, #17
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	4b42      	ldr	r3, [pc, #264]	@ (8001e7c <HAL_ADC_Init+0x280>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	69b9      	ldr	r1, [r7, #24]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff25 	bl	8001bd4 <LL_ADC_INJ_IsConversionOngoing>
 8001d8a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d13d      	bne.n	8001e0e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d13a      	bne.n	8001e0e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d9c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001da4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001db4:	f023 0302 	bic.w	r3, r3, #2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d118      	bne.n	8001dfe <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001dd6:	f023 0304 	bic.w	r3, r3, #4
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001de8:	4311      	orrs	r1, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dee:	430a      	orrs	r2, r1
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	e007      	b.n	8001e0e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10c      	bne.n	8001e30 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	f023 010f 	bic.w	r1, r3, #15
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e2e:	e007      	b.n	8001e40 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 020f 	bic.w	r2, r2, #15
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e44:	f023 0303 	bic.w	r3, r3, #3
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e50:	e007      	b.n	8001e62 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000014 	.word	0x20000014
 8001e70:	053e2d63 	.word	0x053e2d63
 8001e74:	50040000 	.word	0x50040000
 8001e78:	50040300 	.word	0x50040300
 8001e7c:	fff0c007 	.word	0xfff0c007

08001e80 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fe8e 	bl	8001bae <LL_ADC_REG_IsConversionOngoing>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f040 80a0 	bne.w	8001fda <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_Start_IT+0x28>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e09b      	b.n	8001fe0 <HAL_ADC_Start_IT+0x160>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fe51 	bl	8002b58 <ADC_Enable>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 8087 	bne.w	8001fd0 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	f023 0206 	bic.w	r2, r3, #6
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	659a      	str	r2, [r3, #88]	@ 0x58
 8001eee:	e002      	b.n	8001ef6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	221c      	movs	r2, #28
 8001efc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 021c 	bic.w	r2, r2, #28
 8001f14:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d108      	bne.n	8001f30 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0208 	orr.w	r2, r2, #8
 8001f2c:	605a      	str	r2, [r3, #4]
          break;
 8001f2e:	e008      	b.n	8001f42 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0204 	orr.w	r2, r2, #4
 8001f3e:	605a      	str	r2, [r3, #4]
          break;
 8001f40:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0210 	orr.w	r2, r2, #16
 8001f58:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d02d      	beq.n	8001fc4 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f70:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d110      	bne.n	8001fa2 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0220 	bic.w	r2, r2, #32
 8001f8e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f9e:	605a      	str	r2, [r3, #4]
            break;
 8001fa0:	e010      	b.n	8001fc4 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fb0:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0220 	orr.w	r2, r2, #32
 8001fc0:	605a      	str	r2, [r3, #4]
            break;
 8001fc2:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fddc 	bl	8001b86 <LL_ADC_REG_StartConversion>
 8001fce:	e006      	b.n	8001fde <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001fd8:	e001      	b.n	8001fde <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b088      	sub	sp, #32
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d017      	beq.n	8002058 <HAL_ADC_IRQHandler+0x56>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d012      	beq.n	8002058 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002042:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fe32 	bl	8002cb4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2202      	movs	r2, #2
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_ADC_IRQHandler+0x6a>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002072:	2b00      	cmp	r3, #0
 8002074:	d05e      	beq.n	8002134 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d059      	beq.n	8002134 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002090:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fc5c 	bl	800195a <LL_ADC_REG_IsTriggerSourceSWStart>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d03e      	beq.n	8002126 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d135      	bne.n	8002126 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d12e      	bne.n	8002126 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fd6e 	bl	8001bae <LL_ADC_REG_IsConversionOngoing>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11a      	bne.n	800210e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020c 	bic.w	r2, r2, #12
 80020e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d112      	bne.n	8002126 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
 800210c:	e00b      	b.n	8002126 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe feb6 	bl	8000e98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	220c      	movs	r2, #12
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_ADC_IRQHandler+0x146>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800214e:	2b00      	cmp	r3, #0
 8002150:	d072      	beq.n	8002238 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d06d      	beq.n	8002238 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fc2d 	bl	80019d8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800217e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fbe8 	bl	800195a <LL_ADC_REG_IsTriggerSourceSWStart>
 800218a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d047      	beq.n	800222a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_ADC_IRQHandler+0x1b2>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03f      	beq.n	800222a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d13a      	bne.n	800222a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021be:	2b40      	cmp	r3, #64	@ 0x40
 80021c0:	d133      	bne.n	800222a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d12e      	bne.n	800222a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fcff 	bl	8001bd4 <LL_ADC_INJ_IsConversionOngoing>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d11a      	bne.n	8002212 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021ea:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d112      	bne.n	800222a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002210:	e00b      	b.n	800222a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fd1a 	bl	8002c64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2260      	movs	r2, #96	@ 0x60
 8002236:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d011      	beq.n	8002266 <HAL_ADC_IRQHandler+0x264>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00c      	beq.n	8002266 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f886 	bl	800236a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_ADC_IRQHandler+0x294>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fd00 	bl	8002c8c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x2c4>
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00d      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fcf2 	bl	8002ca0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02a      	beq.n	8002326 <HAL_ADC_IRQHandler+0x324>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d025      	beq.n	8002326 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	e008      	b.n	80022fa <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10e      	bne.n	800231e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	f043 0202 	orr.w	r2, r3, #2
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f830 	bl	800237e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2210      	movs	r2, #16
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d018      	beq.n	8002362 <HAL_ADC_IRQHandler+0x360>
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002336:	2b00      	cmp	r3, #0
 8002338:	d013      	beq.n	8002362 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234a:	f043 0208 	orr.w	r2, r3, #8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800235a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fc8b 	bl	8002c78 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002362:	bf00      	nop
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0b6      	sub	sp, #216	@ 0xd8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x22>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e3bb      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x79a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fbf3 	bl	8001bae <LL_ADC_REG_IsConversionOngoing>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 83a0 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d824      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	3b02      	subs	r3, #2
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d81b      	bhi.n	8002422 <HAL_ADC_ConfigChannel+0x8e>
 80023ea:	a201      	add	r2, pc, #4	@ (adr r2, 80023f0 <HAL_ADC_ConfigChannel+0x5c>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002401 	.word	0x08002401
 80023f4:	08002409 	.word	0x08002409
 80023f8:	08002411 	.word	0x08002411
 80023fc:	08002419 	.word	0x08002419
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002400:	230c      	movs	r3, #12
 8002402:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002406:	e010      	b.n	800242a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002408:	2312      	movs	r3, #18
 800240a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800240e:	e00c      	b.n	800242a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002410:	2318      	movs	r3, #24
 8002412:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002416:	e008      	b.n	800242a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800241c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002420:	e003      	b.n	800242a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002422:	2306      	movs	r3, #6
 8002424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002428:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002438:	f7ff faa2 	bl	8001980 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fbb4 	bl	8001bae <LL_ADC_REG_IsConversionOngoing>
 8002446:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fbc0 	bl	8001bd4 <LL_ADC_INJ_IsConversionOngoing>
 8002454:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 81a4 	bne.w	80027aa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 819f 	bne.w	80027aa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	461a      	mov	r2, r3
 800247a:	f7ff fac0 	bl	80019fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	08db      	lsrs	r3, r3, #3
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d00a      	beq.n	80024b6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6919      	ldr	r1, [r3, #16]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024b0:	f7ff f9fe 	bl	80018b0 <LL_ADC_SetOffset>
 80024b4:	e179      	b.n	80027aa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fa1b 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x14e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fa10 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e01e      	b.n	8002520 <HAL_ADC_ConfigChannel+0x18c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fa05 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002504:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002508:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1a4>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	e018      	b.n	800256a <HAL_ADC_ConfigChannel+0x1d6>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800254c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e004      	b.n	800256a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800256a:	429a      	cmp	r2, r3
 800256c:	d106      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f9d4 	bl	8001924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f9b8 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x214>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2101      	movs	r1, #1
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f9ad 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 021f 	and.w	r2, r3, #31
 80025a6:	e01e      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x252>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f9a2 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80025c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80025ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e004      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80025da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x26a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	e018      	b.n	8002630 <HAL_ADC_ConfigChannel+0x29c>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002612:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002616:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800261a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e004      	b.n	8002630 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002626:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff f971 	bl	8001924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2102      	movs	r1, #2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f955 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <HAL_ADC_ConfigChannel+0x2da>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2102      	movs	r1, #2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f94a 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	e01e      	b.n	80026ac <HAL_ADC_ConfigChannel+0x318>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2102      	movs	r1, #2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff f93f 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800268c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e004      	b.n	80026aa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80026a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x330>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	e014      	b.n	80026ee <HAL_ADC_ConfigChannel+0x35a>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e004      	b.n	80026ee <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80026e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	2102      	movs	r1, #2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f912 	bl	8001924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2103      	movs	r1, #3
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f8f6 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x398>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2103      	movs	r1, #3
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff f8eb 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	f003 021f 	and.w	r2, r3, #31
 800272a:	e017      	b.n	800275c <HAL_ADC_ConfigChannel+0x3c8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2103      	movs	r1, #3
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f8e0 	bl	80018f8 <LL_ADC_GetOffsetChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002746:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e003      	b.n	800275a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x3e0>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	e011      	b.n	8002798 <HAL_ADC_ConfigChannel+0x404>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002784:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e003      	b.n	8002798 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002798:	429a      	cmp	r2, r3
 800279a:	d106      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2103      	movs	r1, #3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff f8bd 	bl	8001924 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f9d6 	bl	8001b60 <LL_ADC_IsEnabled>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8140 	bne.w	8002a3c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f7ff f943 	bl	8001a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4a8f      	ldr	r2, [pc, #572]	@ (8002a10 <HAL_ADC_ConfigChannel+0x67c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	f040 8131 	bne.w	8002a3c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10b      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x46e>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	3301      	adds	r3, #1
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2b09      	cmp	r3, #9
 80027f8:	bf94      	ite	ls
 80027fa:	2301      	movls	r3, #1
 80027fc:	2300      	movhi	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e019      	b.n	8002836 <HAL_ADC_ConfigChannel+0x4a2>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002812:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002814:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e003      	b.n	8002826 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800281e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2b09      	cmp	r3, #9
 800282e:	bf94      	ite	ls
 8002830:	2301      	movls	r3, #1
 8002832:	2300      	movhi	r3, #0
 8002834:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002836:	2b00      	cmp	r3, #0
 8002838:	d079      	beq.n	800292e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002842:	2b00      	cmp	r3, #0
 8002844:	d107      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x4c2>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	0e9b      	lsrs	r3, r3, #26
 800284c:	3301      	adds	r3, #1
 800284e:	069b      	lsls	r3, r3, #26
 8002850:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002854:	e015      	b.n	8002882 <HAL_ADC_ConfigChannel+0x4ee>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002866:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800286e:	2320      	movs	r3, #32
 8002870:	e003      	b.n	800287a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	3301      	adds	r3, #1
 800287c:	069b      	lsls	r3, r3, #26
 800287e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x50e>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	3301      	adds	r3, #1
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	2101      	movs	r1, #1
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	e017      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x53e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e003      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80028be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	ea42 0103 	orr.w	r1, r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x564>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	3301      	adds	r3, #1
 80028ea:	f003 021f 	and.w	r2, r3, #31
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	051b      	lsls	r3, r3, #20
 80028f6:	e018      	b.n	800292a <HAL_ADC_ConfigChannel+0x596>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002908:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800290a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002910:	2320      	movs	r3, #32
 8002912:	e003      	b.n	800291c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3301      	adds	r3, #1
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292a:	430b      	orrs	r3, r1
 800292c:	e081      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d107      	bne.n	800294a <HAL_ADC_ConfigChannel+0x5b6>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	3301      	adds	r3, #1
 8002942:	069b      	lsls	r3, r3, #26
 8002944:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002948:	e015      	b.n	8002976 <HAL_ADC_ConfigChannel+0x5e2>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800295c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	069b      	lsls	r3, r3, #26
 8002972:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x602>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	3301      	adds	r3, #1
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	e017      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x632>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	61bb      	str	r3, [r7, #24]
  return result;
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80029ae:	2320      	movs	r3, #32
 80029b0:	e003      	b.n	80029ba <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	ea42 0103 	orr.w	r1, r2, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x65e>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	0e9b      	lsrs	r3, r3, #26
 80029dc:	3301      	adds	r3, #1
 80029de:	f003 021f 	and.w	r2, r3, #31
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	3b1e      	subs	r3, #30
 80029ea:	051b      	lsls	r3, r3, #20
 80029ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029f0:	e01e      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x69c>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  return result;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e006      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x688>
 8002a0e:	bf00      	nop
 8002a10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f003 021f 	and.w	r2, r3, #31
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	3b1e      	subs	r3, #30
 8002a2a:	051b      	lsls	r3, r3, #20
 8002a2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a30:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe ffe1 	bl	80019fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7a4>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d06c      	beq.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a48:	483c      	ldr	r0, [pc, #240]	@ (8002b3c <HAL_ADC_ConfigChannel+0x7a8>)
 8002a4a:	f7fe ff23 	bl	8001894 <LL_ADC_GetCommonPathInternalCh>
 8002a4e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a3a      	ldr	r2, [pc, #232]	@ (8002b40 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d127      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d121      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a35      	ldr	r2, [pc, #212]	@ (8002b44 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d157      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	482f      	ldr	r0, [pc, #188]	@ (8002b3c <HAL_ADC_ConfigChannel+0x7a8>)
 8002a7e:	f7fe fef6 	bl	800186e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a82:	4b31      	ldr	r3, [pc, #196]	@ (8002b48 <HAL_ADC_ConfigChannel+0x7b4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	099b      	lsrs	r3, r3, #6
 8002a88:	4a30      	ldr	r2, [pc, #192]	@ (8002b4c <HAL_ADC_ConfigChannel+0x7b8>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	4613      	mov	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a9c:	e002      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f9      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aaa:	e03a      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a27      	ldr	r2, [pc, #156]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d113      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b44 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d12a      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ad0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4819      	ldr	r0, [pc, #100]	@ (8002b3c <HAL_ADC_ConfigChannel+0x7a8>)
 8002ad8:	f7fe fec9 	bl	800186e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002adc:	e021      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d11c      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ae8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <HAL_ADC_ConfigChannel+0x7b0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d111      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002afe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b06:	4619      	mov	r1, r3
 8002b08:	480c      	ldr	r0, [pc, #48]	@ (8002b3c <HAL_ADC_ConfigChannel+0x7a8>)
 8002b0a:	f7fe feb0 	bl	800186e <LL_ADC_SetCommonPathInternalCh>
 8002b0e:	e008      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	37d8      	adds	r7, #216	@ 0xd8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	80080000 	.word	0x80080000
 8002b3c:	50040300 	.word	0x50040300
 8002b40:	c7520000 	.word	0xc7520000
 8002b44:	50040000 	.word	0x50040000
 8002b48:	20000014 	.word	0x20000014
 8002b4c:	053e2d63 	.word	0x053e2d63
 8002b50:	cb840000 	.word	0xcb840000
 8002b54:	80000001 	.word	0x80000001

08002b58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fff9 	bl	8001b60 <LL_ADC_IsEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d169      	bne.n	8002c48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <ADC_Enable+0xfc>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e055      	b.n	8002c4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ffc8 	bl	8001b38 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ba8:	482b      	ldr	r0, [pc, #172]	@ (8002c58 <ADC_Enable+0x100>)
 8002baa:	f7fe fe73 	bl	8001894 <LL_ADC_GetCommonPathInternalCh>
 8002bae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb8:	4b28      	ldr	r3, [pc, #160]	@ (8002c5c <ADC_Enable+0x104>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	4a28      	ldr	r2, [pc, #160]	@ (8002c60 <ADC_Enable+0x108>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bd2:	e002      	b.n	8002bda <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002be0:	f7fe fe02 	bl	80017e8 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be6:	e028      	b.n	8002c3a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe ffb7 	bl	8001b60 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe ff9b 	bl	8001b38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c02:	f7fe fdf1 	bl	80017e8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d914      	bls.n	8002c3a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d00d      	beq.n	8002c3a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e007      	b.n	8002c4a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d1cf      	bne.n	8002be8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	8000003f 	.word	0x8000003f
 8002c58:	50040300 	.word	0x50040300
 8002c5c:	20000014 	.word	0x20000014
 8002c60:	053e2d63 	.word	0x053e2d63

08002c64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4907      	ldr	r1, [pc, #28]	@ (8002d64 <__NVIC_EnableIRQ+0x38>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	@ (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	@ (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	@ 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
         );
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	@ 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e34:	d301      	bcc.n	8002e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00f      	b.n	8002e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <SysTick_Config+0x40>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e42:	210f      	movs	r1, #15
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f7ff ff8e 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <SysTick_Config+0x40>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e52:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <SysTick_Config+0x40>)
 8002e54:	2207      	movs	r2, #7
 8002e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff29 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e90:	f7ff ff3e 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f7ff ff8e 	bl	8002dbc <NVIC_EncodePriority>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff5d 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff31 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ffa2 	bl	8002e24 <SysTick_Config>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efa:	e148      	b.n	800318e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 813a 	beq.w	8003188 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d005      	beq.n	8002f2c <HAL_GPIO_Init+0x40>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d130      	bne.n	8002f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f62:	2201      	movs	r2, #1
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 0201 	and.w	r2, r3, #1
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d017      	beq.n	8002fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d123      	bne.n	800301e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	08da      	lsrs	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3208      	adds	r2, #8
 8002fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	220f      	movs	r2, #15
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	6939      	ldr	r1, [r7, #16]
 800301a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2203      	movs	r2, #3
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0203 	and.w	r2, r3, #3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8094 	beq.w	8003188 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003060:	4b52      	ldr	r3, [pc, #328]	@ (80031ac <HAL_GPIO_Init+0x2c0>)
 8003062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003064:	4a51      	ldr	r2, [pc, #324]	@ (80031ac <HAL_GPIO_Init+0x2c0>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6613      	str	r3, [r2, #96]	@ 0x60
 800306c:	4b4f      	ldr	r3, [pc, #316]	@ (80031ac <HAL_GPIO_Init+0x2c0>)
 800306e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003078:	4a4d      	ldr	r2, [pc, #308]	@ (80031b0 <HAL_GPIO_Init+0x2c4>)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030a2:	d00d      	beq.n	80030c0 <HAL_GPIO_Init+0x1d4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a43      	ldr	r2, [pc, #268]	@ (80031b4 <HAL_GPIO_Init+0x2c8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <HAL_GPIO_Init+0x1d0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a42      	ldr	r2, [pc, #264]	@ (80031b8 <HAL_GPIO_Init+0x2cc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_GPIO_Init+0x1cc>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e004      	b.n	80030c2 <HAL_GPIO_Init+0x1d6>
 80030b8:	2307      	movs	r3, #7
 80030ba:	e002      	b.n	80030c2 <HAL_GPIO_Init+0x1d6>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_GPIO_Init+0x1d6>
 80030c0:	2300      	movs	r3, #0
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	f002 0203 	and.w	r2, r2, #3
 80030c8:	0092      	lsls	r2, r2, #2
 80030ca:	4093      	lsls	r3, r2
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030d2:	4937      	ldr	r1, [pc, #220]	@ (80031b0 <HAL_GPIO_Init+0x2c4>)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e0:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <HAL_GPIO_Init+0x2d0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003104:	4a2d      	ldr	r2, [pc, #180]	@ (80031bc <HAL_GPIO_Init+0x2d0>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800310a:	4b2c      	ldr	r3, [pc, #176]	@ (80031bc <HAL_GPIO_Init+0x2d0>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800312e:	4a23      	ldr	r2, [pc, #140]	@ (80031bc <HAL_GPIO_Init+0x2d0>)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003134:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <HAL_GPIO_Init+0x2d0>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003158:	4a18      	ldr	r2, [pc, #96]	@ (80031bc <HAL_GPIO_Init+0x2d0>)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <HAL_GPIO_Init+0x2d0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003182:	4a0e      	ldr	r2, [pc, #56]	@ (80031bc <HAL_GPIO_Init+0x2d0>)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3301      	adds	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	f47f aeaf 	bne.w	8002efc <HAL_GPIO_Init+0x10>
  }
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40010000 	.word	0x40010000
 80031b4:	48000400 	.word	0x48000400
 80031b8:	48000800 	.word	0x48000800
 80031bc:	40010400 	.word	0x40010400

080031c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
 80031cc:	4613      	mov	r3, r2
 80031ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d0:	787b      	ldrb	r3, [r7, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a04      	ldr	r2, [pc, #16]	@ (800320c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40007000 	.word	0x40007000

08003210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003214:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <HAL_PWREx_GetVoltageRange+0x18>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40007000 	.word	0x40007000

0800322c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800323a:	d130      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800323c:	4b23      	ldr	r3, [pc, #140]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003248:	d038      	beq.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003252:	4a1e      	ldr	r2, [pc, #120]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003254:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325a:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2232      	movs	r2, #50	@ 0x32
 8003260:	fb02 f303 	mul.w	r3, r2, r3
 8003264:	4a1b      	ldr	r2, [pc, #108]	@ (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0c9b      	lsrs	r3, r3, #18
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003270:	e002      	b.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b01      	subs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003278:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003284:	d102      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f2      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800328c:	4b0f      	ldr	r3, [pc, #60]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003298:	d110      	bne.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e00f      	b.n	80032be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800329e:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d007      	beq.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ac:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032b4:	4a05      	ldr	r2, [pc, #20]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40007000 	.word	0x40007000
 80032d0:	20000014 	.word	0x20000014
 80032d4:	431bde83 	.word	0x431bde83

080032d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f000 bc02 	b.w	8003af0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ec:	4b96      	ldr	r3, [pc, #600]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f6:	4b94      	ldr	r3, [pc, #592]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80e4 	beq.w	80034d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_RCC_OscConfig+0x4c>
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b0c      	cmp	r3, #12
 8003318:	f040 808b 	bne.w	8003432 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	f040 8087 	bne.w	8003432 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003324:	4b88      	ldr	r3, [pc, #544]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_OscConfig+0x64>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e3d9      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	4b81      	ldr	r3, [pc, #516]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_RCC_OscConfig+0x7e>
 800334c:	4b7e      	ldr	r3, [pc, #504]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003354:	e005      	b.n	8003362 <HAL_RCC_OscConfig+0x8a>
 8003356:	4b7c      	ldr	r3, [pc, #496]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003362:	4293      	cmp	r3, r2
 8003364:	d223      	bcs.n	80033ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fd8c 	bl	8003e88 <RCC_SetFlashLatencyFromMSIRange>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e3ba      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337a:	4b73      	ldr	r3, [pc, #460]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a72      	ldr	r2, [pc, #456]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b70      	ldr	r3, [pc, #448]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	496d      	ldr	r1, [pc, #436]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003398:	4b6b      	ldr	r3, [pc, #428]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	4968      	ldr	r1, [pc, #416]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
 80033ac:	e025      	b.n	80033fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ae:	4b66      	ldr	r3, [pc, #408]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a65      	ldr	r2, [pc, #404]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b63      	ldr	r3, [pc, #396]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4960      	ldr	r1, [pc, #384]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	495b      	ldr	r1, [pc, #364]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fd4c 	bl	8003e88 <RCC_SetFlashLatencyFromMSIRange>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e37a      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033fa:	f000 fc81 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b51      	ldr	r3, [pc, #324]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	4950      	ldr	r1, [pc, #320]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800340c:	5ccb      	ldrb	r3, [r1, r3]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	fa22 f303 	lsr.w	r3, r2, r3
 8003416:	4a4e      	ldr	r2, [pc, #312]	@ (8003550 <HAL_RCC_OscConfig+0x278>)
 8003418:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800341a:	4b4e      	ldr	r3, [pc, #312]	@ (8003554 <HAL_RCC_OscConfig+0x27c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe f992 	bl	8001748 <HAL_InitTick>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d052      	beq.n	80034d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	e35e      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d032      	beq.n	80034a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800343a:	4b43      	ldr	r3, [pc, #268]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a42      	ldr	r2, [pc, #264]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003446:	f7fe f9cf 	bl	80017e8 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800344e:	f7fe f9cb 	bl	80017e8 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e347      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003460:	4b39      	ldr	r3, [pc, #228]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346c:	4b36      	ldr	r3, [pc, #216]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a35      	ldr	r2, [pc, #212]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003472:	f043 0308 	orr.w	r3, r3, #8
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b33      	ldr	r3, [pc, #204]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4930      	ldr	r1, [pc, #192]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348a:	4b2f      	ldr	r3, [pc, #188]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	492b      	ldr	r1, [pc, #172]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
 800349e:	e01a      	b.n	80034d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a0:	4b29      	ldr	r3, [pc, #164]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a28      	ldr	r2, [pc, #160]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ac:	f7fe f99c 	bl	80017e8 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b4:	f7fe f998 	bl	80017e8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e314      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c6:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1dc>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d073      	beq.n	80035ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_OscConfig+0x21c>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d10e      	bne.n	800350c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d10b      	bne.n	800350c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d063      	beq.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d15f      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e2f1      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x24c>
 8003516:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a0b      	ldr	r2, [pc, #44]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e025      	b.n	8003570 <HAL_RCC_OscConfig+0x298>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800352c:	d114      	bne.n	8003558 <HAL_RCC_OscConfig+0x280>
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a05      	ldr	r2, [pc, #20]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a02      	ldr	r2, [pc, #8]	@ (8003548 <HAL_RCC_OscConfig+0x270>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e013      	b.n	8003570 <HAL_RCC_OscConfig+0x298>
 8003548:	40021000 	.word	0x40021000
 800354c:	08009910 	.word	0x08009910
 8003550:	20000014 	.word	0x20000014
 8003554:	20000018 	.word	0x20000018
 8003558:	4ba0      	ldr	r3, [pc, #640]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a9f      	ldr	r2, [pc, #636]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b9d      	ldr	r3, [pc, #628]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a9c      	ldr	r2, [pc, #624]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe f936 	bl	80017e8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe f932 	bl	80017e8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	@ 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e2ae      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	4b92      	ldr	r3, [pc, #584]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x2a8>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f922 	bl	80017e8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe f91e 	bl	80017e8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	@ 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e29a      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ba:	4b88      	ldr	r3, [pc, #544]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2d0>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d060      	beq.n	8003698 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_OscConfig+0x310>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d119      	bne.n	8003616 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d116      	bne.n	8003616 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e8:	4b7c      	ldr	r3, [pc, #496]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_OscConfig+0x328>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e277      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	4b76      	ldr	r3, [pc, #472]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	4973      	ldr	r1, [pc, #460]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003614:	e040      	b.n	8003698 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d023      	beq.n	8003666 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800361e:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fe f8dd 	bl	80017e8 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003632:	f7fe f8d9 	bl	80017e8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e255      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003644:	4b65      	ldr	r3, [pc, #404]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b62      	ldr	r3, [pc, #392]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	495f      	ldr	r1, [pc, #380]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
 8003664:	e018      	b.n	8003698 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003666:	4b5d      	ldr	r3, [pc, #372]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5c      	ldr	r2, [pc, #368]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 800366c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fe f8b9 	bl	80017e8 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367a:	f7fe f8b5 	bl	80017e8 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e231      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800368c:	4b53      	ldr	r3, [pc, #332]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d03c      	beq.n	800371e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01c      	beq.n	80036e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ac:	4b4b      	ldr	r3, [pc, #300]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80036ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b2:	4a4a      	ldr	r2, [pc, #296]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fe f894 	bl	80017e8 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c4:	f7fe f890 	bl	80017e8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e20c      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d6:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80036d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ef      	beq.n	80036c4 <HAL_RCC_OscConfig+0x3ec>
 80036e4:	e01b      	b.n	800371e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e6:	4b3d      	ldr	r3, [pc, #244]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80036e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ec:	4a3b      	ldr	r2, [pc, #236]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fe f877 	bl	80017e8 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fe:	f7fe f873 	bl	80017e8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1ef      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003710:	4b32      	ldr	r3, [pc, #200]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1ef      	bne.n	80036fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80a6 	beq.w	8003878 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003730:	4b2a      	ldr	r3, [pc, #168]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b27      	ldr	r3, [pc, #156]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003740:	4a26      	ldr	r2, [pc, #152]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003746:	6593      	str	r3, [r2, #88]	@ 0x58
 8003748:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003758:	4b21      	ldr	r3, [pc, #132]	@ (80037e0 <HAL_RCC_OscConfig+0x508>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d118      	bne.n	8003796 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003764:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <HAL_RCC_OscConfig+0x508>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1d      	ldr	r2, [pc, #116]	@ (80037e0 <HAL_RCC_OscConfig+0x508>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003770:	f7fe f83a 	bl	80017e8 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fe f836 	bl	80017e8 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e1b2      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378a:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_RCC_OscConfig+0x508>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d108      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4d8>
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	4a0d      	ldr	r2, [pc, #52]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ae:	e029      	b.n	8003804 <HAL_RCC_OscConfig+0x52c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d115      	bne.n	80037e4 <HAL_RCC_OscConfig+0x50c>
 80037b8:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	4a07      	ldr	r2, [pc, #28]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c8:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	4a03      	ldr	r2, [pc, #12]	@ (80037dc <HAL_RCC_OscConfig+0x504>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d8:	e014      	b.n	8003804 <HAL_RCC_OscConfig+0x52c>
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40007000 	.word	0x40007000
 80037e4:	4b9a      	ldr	r3, [pc, #616]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a99      	ldr	r2, [pc, #612]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f4:	4b96      	ldr	r3, [pc, #600]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	4a95      	ldr	r2, [pc, #596]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fd ffec 	bl	80017e8 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fd ffe8 	bl	80017e8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e162      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382a:	4b89      	ldr	r3, [pc, #548]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ed      	beq.n	8003814 <HAL_RCC_OscConfig+0x53c>
 8003838:	e015      	b.n	8003866 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fd ffd5 	bl	80017e8 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd ffd1 	bl	80017e8 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e14b      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003858:	4b7d      	ldr	r3, [pc, #500]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ed      	bne.n	8003842 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003866:	7ffb      	ldrb	r3, [r7, #31]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386c:	4b78      	ldr	r3, [pc, #480]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	4a77      	ldr	r2, [pc, #476]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003876:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03c      	beq.n	80038fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01c      	beq.n	80038c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800388c:	4b70      	ldr	r3, [pc, #448]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003892:	4a6f      	ldr	r2, [pc, #444]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd ffa4 	bl	80017e8 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a4:	f7fd ffa0 	bl	80017e8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e11c      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b6:	4b66      	ldr	r3, [pc, #408]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80038b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ef      	beq.n	80038a4 <HAL_RCC_OscConfig+0x5cc>
 80038c4:	e01b      	b.n	80038fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038c6:	4b62      	ldr	r3, [pc, #392]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80038c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038cc:	4a60      	ldr	r2, [pc, #384]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd ff87 	bl	80017e8 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038de:	f7fd ff83 	bl	80017e8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0ff      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f0:	4b57      	ldr	r3, [pc, #348]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80038f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ef      	bne.n	80038de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80f3 	beq.w	8003aee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	2b02      	cmp	r3, #2
 800390e:	f040 80c9 	bne.w	8003aa4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003912:	4b4f      	ldr	r3, [pc, #316]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0203 	and.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	429a      	cmp	r2, r3
 8003924:	d12c      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	3b01      	subs	r3, #1
 8003932:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d123      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003942:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d11b      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003952:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d113      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	3b01      	subs	r3, #1
 8003966:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d109      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	3b01      	subs	r3, #1
 800397a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d06b      	beq.n	8003a58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d062      	beq.n	8003a4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003986:	4b32      	ldr	r3, [pc, #200]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0ac      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003996:	4b2e      	ldr	r3, [pc, #184]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 800399c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a2:	f7fd ff21 	bl	80017e8 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fd ff1d 	bl	80017e8 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e099      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039bc:	4b24      	ldr	r3, [pc, #144]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c8:	4b21      	ldr	r3, [pc, #132]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4b21      	ldr	r3, [pc, #132]	@ (8003a54 <HAL_RCC_OscConfig+0x77c>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039d8:	3a01      	subs	r2, #1
 80039da:	0112      	lsls	r2, r2, #4
 80039dc:	4311      	orrs	r1, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039e2:	0212      	lsls	r2, r2, #8
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039ea:	0852      	lsrs	r2, r2, #1
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0552      	lsls	r2, r2, #21
 80039f0:	4311      	orrs	r1, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039f6:	0852      	lsrs	r2, r2, #1
 80039f8:	3a01      	subs	r2, #1
 80039fa:	0652      	lsls	r2, r2, #25
 80039fc:	4311      	orrs	r1, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a02:	06d2      	lsls	r2, r2, #27
 8003a04:	430a      	orrs	r2, r1
 8003a06:	4912      	ldr	r1, [pc, #72]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a0c:	4b10      	ldr	r3, [pc, #64]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0f      	ldr	r2, [pc, #60]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a18:	4b0d      	ldr	r3, [pc, #52]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a24:	f7fd fee0 	bl	80017e8 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd fedc 	bl	80017e8 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e058      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a4a:	e050      	b.n	8003aee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e04f      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
 8003a50:	40021000 	.word	0x40021000
 8003a54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a58:	4b27      	ldr	r3, [pc, #156]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d144      	bne.n	8003aee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a64:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a23      	ldr	r2, [pc, #140]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a70:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a20      	ldr	r2, [pc, #128]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a7c:	f7fd feb4 	bl	80017e8 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd feb0 	bl	80017e8 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e02c      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b18      	ldr	r3, [pc, #96]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x7ac>
 8003aa2:	e024      	b.n	8003aee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d01f      	beq.n	8003aea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003ab0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fd fe97 	bl	80017e8 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd fe93 	bl	80017e8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e00f      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003adc:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	4905      	ldr	r1, [pc, #20]	@ (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_RCC_OscConfig+0x824>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
 8003ae8:	e001      	b.n	8003aee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	feeefffc 	.word	0xfeeefffc

08003b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0e7      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b75      	ldr	r3, [pc, #468]	@ (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d910      	bls.n	8003b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b72      	ldr	r3, [pc, #456]	@ (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 0207 	bic.w	r2, r3, #7
 8003b2a:	4970      	ldr	r1, [pc, #448]	@ (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b6e      	ldr	r3, [pc, #440]	@ (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0cf      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	4b66      	ldr	r3, [pc, #408]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d908      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b63      	ldr	r3, [pc, #396]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4960      	ldr	r1, [pc, #384]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04c      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b86:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d121      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0a6      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9e:	4b54      	ldr	r3, [pc, #336]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d115      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e09a      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e08e      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e086      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	4b46      	ldr	r3, [pc, #280]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4943      	ldr	r1, [pc, #268]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7fd fdfe 	bl	80017e8 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7fd fdfa 	bl	80017e8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e06e      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 020c 	and.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1eb      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d208      	bcs.n	8003c46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c34:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	492b      	ldr	r1, [pc, #172]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c46:	4b29      	ldr	r3, [pc, #164]	@ (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d210      	bcs.n	8003c76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c54:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 0207 	bic.w	r2, r3, #7
 8003c5c:	4923      	ldr	r1, [pc, #140]	@ (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c64:	4b21      	ldr	r3, [pc, #132]	@ (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e036      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c82:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4918      	ldr	r1, [pc, #96]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca0:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4910      	ldr	r1, [pc, #64]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb4:	f000 f824 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	490b      	ldr	r1, [pc, #44]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8003cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1fc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fd fd35 	bl	8001748 <HAL_InitTick>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40022000 	.word	0x40022000
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08009910 	.word	0x08009910
 8003cf8:	20000014 	.word	0x20000014
 8003cfc:	20000018 	.word	0x20000018

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	@ 0x24
 8003d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d18:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x34>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d121      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d11e      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d34:	4b34      	ldr	r3, [pc, #208]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d40:	4b31      	ldr	r3, [pc, #196]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e005      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d50:	4b2d      	ldr	r3, [pc, #180]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d102      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d78:	4b25      	ldr	r3, [pc, #148]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e004      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d84:	4b23      	ldr	r3, [pc, #140]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d134      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d003      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0xac>
 8003da4:	e005      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003da6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003da8:	617b      	str	r3, [r7, #20]
      break;
 8003daa:	e005      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003dac:	4b19      	ldr	r3, [pc, #100]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dae:	617b      	str	r3, [r7, #20]
      break;
 8003db0:	e002      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	617b      	str	r3, [r7, #20]
      break;
 8003db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003db8:	4b13      	ldr	r3, [pc, #76]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dc6:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	fb03 f202 	mul.w	r2, r3, r2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dde:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	0e5b      	lsrs	r3, r3, #25
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	3301      	adds	r3, #1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003df8:	69bb      	ldr	r3, [r7, #24]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	@ 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	08009928 	.word	0x08009928
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	007a1200 	.word	0x007a1200

08003e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	@ (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000014 	.word	0x20000014

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4904      	ldr	r1, [pc, #16]	@ (8003e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08009920 	.word	0x08009920

08003e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e60:	f7ff ffda 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0adb      	lsrs	r3, r3, #11
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4904      	ldr	r1, [pc, #16]	@ (8003e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	08009920 	.word	0x08009920

08003e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e94:	4b2a      	ldr	r3, [pc, #168]	@ (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ea0:	f7ff f9b6 	bl	8003210 <HAL_PWREx_GetVoltageRange>
 8003ea4:	6178      	str	r0, [r7, #20]
 8003ea6:	e014      	b.n	8003ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eac:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb4:	4b22      	ldr	r3, [pc, #136]	@ (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ec0:	f7ff f9a6 	bl	8003210 <HAL_PWREx_GetVoltageRange>
 8003ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	4a1d      	ldr	r2, [pc, #116]	@ (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed8:	d10b      	bne.n	8003ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b80      	cmp	r3, #128	@ 0x80
 8003ede:	d919      	bls.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ee4:	d902      	bls.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	e013      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eec:	2301      	movs	r3, #1
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e010      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b80      	cmp	r3, #128	@ 0x80
 8003ef6:	d902      	bls.n	8003efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ef8:	2303      	movs	r3, #3
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	e00a      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b80      	cmp	r3, #128	@ 0x80
 8003f02:	d102      	bne.n	8003f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f04:	2302      	movs	r3, #2
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e004      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b70      	cmp	r3, #112	@ 0x70
 8003f0e:	d101      	bne.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f10:	2301      	movs	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 0207 	bic.w	r2, r3, #7
 8003f1c:	4909      	ldr	r1, [pc, #36]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f24:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d001      	beq.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40022000 	.word	0x40022000

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f50:	2300      	movs	r3, #0
 8003f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d031      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f6c:	d01a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f72:	d814      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4a5c      	ldr	r2, [pc, #368]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f8a:	e00c      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f9de 	bl	8004354 <RCCEx_PLLSAI1_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f9c:	e003      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fac:	4b51      	ldr	r3, [pc, #324]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	494e      	ldr	r1, [pc, #312]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 809e 	beq.w	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fda:	4b46      	ldr	r3, [pc, #280]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff0:	4b40      	ldr	r3, [pc, #256]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	4a3f      	ldr	r2, [pc, #252]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004008:	2301      	movs	r3, #1
 800400a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400c:	4b3a      	ldr	r3, [pc, #232]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a39      	ldr	r2, [pc, #228]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004018:	f7fd fbe6 	bl	80017e8 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800401e:	e009      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004020:	f7fd fbe2 	bl	80017e8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d902      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	74fb      	strb	r3, [r7, #19]
        break;
 8004032:	e005      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004034:	4b30      	ldr	r3, [pc, #192]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ef      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d15a      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004046:	4b2b      	ldr	r3, [pc, #172]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01e      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	429a      	cmp	r2, r3
 8004060:	d019      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004062:	4b24      	ldr	r3, [pc, #144]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800406c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406e:	4b21      	ldr	r3, [pc, #132]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004074:	4a1f      	ldr	r2, [pc, #124]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800407e:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004084:	4a1b      	ldr	r2, [pc, #108]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800408a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800408e:	4a19      	ldr	r2, [pc, #100]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d016      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd fba2 	bl	80017e8 <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a6:	e00b      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fd fb9e 	bl	80017e8 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d902      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	74fb      	strb	r3, [r7, #19]
            break;
 80040be:	e006      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c0:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ec      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e2:	4904      	ldr	r1, [pc, #16]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040ea:	e009      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	74bb      	strb	r3, [r7, #18]
 80040f0:	e006      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004100:	7c7b      	ldrb	r3, [r7, #17]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004106:	4b8a      	ldr	r3, [pc, #552]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410a:	4a89      	ldr	r2, [pc, #548]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411e:	4b84      	ldr	r3, [pc, #528]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004124:	f023 0203 	bic.w	r2, r3, #3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4980      	ldr	r1, [pc, #512]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004140:	4b7b      	ldr	r3, [pc, #492]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004146:	f023 020c 	bic.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	4978      	ldr	r1, [pc, #480]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004162:	4b73      	ldr	r3, [pc, #460]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004168:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	496f      	ldr	r1, [pc, #444]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004184:	4b6a      	ldr	r3, [pc, #424]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	4967      	ldr	r1, [pc, #412]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a6:	4b62      	ldr	r3, [pc, #392]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	495e      	ldr	r1, [pc, #376]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c8:	4b59      	ldr	r3, [pc, #356]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	4956      	ldr	r1, [pc, #344]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041ea:	4b51      	ldr	r3, [pc, #324]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	494d      	ldr	r1, [pc, #308]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d028      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800420c:	4b48      	ldr	r3, [pc, #288]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004212:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	4945      	ldr	r1, [pc, #276]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800422a:	d106      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800422c:	4b40      	ldr	r3, [pc, #256]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a3f      	ldr	r2, [pc, #252]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004236:	60d3      	str	r3, [r2, #12]
 8004238:	e011      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004242:	d10c      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	2101      	movs	r1, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f882 	bl	8004354 <RCCEx_PLLSAI1_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d028      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800426a:	4b31      	ldr	r3, [pc, #196]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004278:	492d      	ldr	r1, [pc, #180]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004288:	d106      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428a:	4b29      	ldr	r3, [pc, #164]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4a28      	ldr	r2, [pc, #160]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004294:	60d3      	str	r3, [r2, #12]
 8004296:	e011      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2101      	movs	r1, #1
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f853 	bl	8004354 <RCCEx_PLLSAI1_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01c      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d6:	4916      	ldr	r1, [pc, #88]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042e6:	d10c      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	2102      	movs	r1, #2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f830 	bl	8004354 <RCCEx_PLLSAI1_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800430e:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004314:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431c:	4904      	ldr	r1, [pc, #16]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004324:	7cbb      	ldrb	r3, [r7, #18]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000

08004334 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a04      	ldr	r2, [pc, #16]	@ (8004350 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800433e:	f043 0304 	orr.w	r3, r3, #4
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000

08004354 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004362:	4b74      	ldr	r3, [pc, #464]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800436e:	4b71      	ldr	r3, [pc, #452]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0203 	and.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d10d      	bne.n	800439a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
       ||
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004386:	4b6b      	ldr	r3, [pc, #428]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
       ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d047      	beq.n	800442a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e044      	b.n	800442a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d018      	beq.n	80043da <RCCEx_PLLSAI1_Config+0x86>
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d825      	bhi.n	80043f8 <RCCEx_PLLSAI1_Config+0xa4>
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d002      	beq.n	80043b6 <RCCEx_PLLSAI1_Config+0x62>
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d009      	beq.n	80043c8 <RCCEx_PLLSAI1_Config+0x74>
 80043b4:	e020      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11d      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c6:	e01a      	b.n	80043fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d116      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d8:	e013      	b.n	8004402 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043da:	4b56      	ldr	r3, [pc, #344]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e6:	4b53      	ldr	r3, [pc, #332]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f6:	e006      	b.n	8004406 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      break;
 80043fc:	e004      	b.n	8004408 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004406:	bf00      	nop
    }

    if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800440e:	4b49      	ldr	r3, [pc, #292]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	430b      	orrs	r3, r1
 8004424:	4943      	ldr	r1, [pc, #268]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d17c      	bne.n	800452a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004430:	4b40      	ldr	r3, [pc, #256]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a3f      	ldr	r2, [pc, #252]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004436:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800443a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443c:	f7fd f9d4 	bl	80017e8 <HAL_GetTick>
 8004440:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004442:	e009      	b.n	8004458 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004444:	f7fd f9d0 	bl	80017e8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d902      	bls.n	8004458 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	73fb      	strb	r3, [r7, #15]
        break;
 8004456:	e005      	b.n	8004464 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004458:	4b36      	ldr	r3, [pc, #216]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ef      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d15f      	bne.n	800452a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d110      	bne.n	8004492 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004470:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004478:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6892      	ldr	r2, [r2, #8]
 8004480:	0211      	lsls	r1, r2, #8
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68d2      	ldr	r2, [r2, #12]
 8004486:	06d2      	lsls	r2, r2, #27
 8004488:	430a      	orrs	r2, r1
 800448a:	492a      	ldr	r1, [pc, #168]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448c:	4313      	orrs	r3, r2
 800448e:	610b      	str	r3, [r1, #16]
 8004490:	e027      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d112      	bne.n	80044be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004498:	4b26      	ldr	r3, [pc, #152]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80044a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	0211      	lsls	r1, r2, #8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6912      	ldr	r2, [r2, #16]
 80044ae:	0852      	lsrs	r2, r2, #1
 80044b0:	3a01      	subs	r2, #1
 80044b2:	0552      	lsls	r2, r2, #21
 80044b4:	430a      	orrs	r2, r1
 80044b6:	491f      	ldr	r1, [pc, #124]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]
 80044bc:	e011      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044be:	4b1d      	ldr	r3, [pc, #116]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	0211      	lsls	r1, r2, #8
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6952      	ldr	r2, [r2, #20]
 80044d4:	0852      	lsrs	r2, r2, #1
 80044d6:	3a01      	subs	r2, #1
 80044d8:	0652      	lsls	r2, r2, #25
 80044da:	430a      	orrs	r2, r1
 80044dc:	4915      	ldr	r1, [pc, #84]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044e2:	4b14      	ldr	r3, [pc, #80]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a13      	ldr	r2, [pc, #76]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fd f97b 	bl	80017e8 <HAL_GetTick>
 80044f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044f4:	e009      	b.n	800450a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044f6:	f7fd f977 	bl	80017e8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d902      	bls.n	800450a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	73fb      	strb	r3, [r7, #15]
          break;
 8004508:	e005      	b.n	8004516 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800450a:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ef      	beq.n	80044f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4903      	ldr	r1, [pc, #12]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000

08004538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e040      	b.n	80045cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc ff36 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	@ 0x24
 8004564:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fade 	bl	8004b40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8af 	bl	80046e8 <UART_SetConfig>
 800458a:	4603      	mov	r3, r0
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e01b      	b.n	80045cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fb5d 	bl	8004c84 <UART_CheckIdleState>
 80045ca:	4603      	mov	r3, r0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d177      	bne.n	80046dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_UART_Transmit+0x24>
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e070      	b.n	80046de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2221      	movs	r2, #33	@ 0x21
 8004608:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800460a:	f7fd f8ed 	bl	80017e8 <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004628:	d108      	bne.n	800463c <HAL_UART_Transmit+0x68>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d104      	bne.n	800463c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	e003      	b.n	8004644 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004644:	e02f      	b.n	80046a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	2180      	movs	r1, #128	@ 0x80
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fbbf 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e03b      	b.n	80046de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004678:	b292      	uxth	r2, r2
 800467a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	3302      	adds	r3, #2
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e007      	b.n	8004694 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3301      	adds	r3, #1
 8004692:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1c9      	bne.n	8004646 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2140      	movs	r1, #64	@ 0x40
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 fb89 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e005      	b.n	80046de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ec:	b08a      	sub	sp, #40	@ 0x28
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	431a      	orrs	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	4313      	orrs	r3, r2
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4bb4      	ldr	r3, [pc, #720]	@ (80049e8 <UART_SetConfig+0x300>)
 8004718:	4013      	ands	r3, r2
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004720:	430b      	orrs	r3, r1
 8004722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4aa9      	ldr	r2, [pc, #676]	@ (80049ec <UART_SetConfig+0x304>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004750:	4313      	orrs	r3, r2
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4aa0      	ldr	r2, [pc, #640]	@ (80049f0 <UART_SetConfig+0x308>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d126      	bne.n	80047c0 <UART_SetConfig+0xd8>
 8004772:	4ba0      	ldr	r3, [pc, #640]	@ (80049f4 <UART_SetConfig+0x30c>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b03      	cmp	r3, #3
 800477e:	d81b      	bhi.n	80047b8 <UART_SetConfig+0xd0>
 8004780:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <UART_SetConfig+0xa0>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	08004799 	.word	0x08004799
 800478c:	080047a9 	.word	0x080047a9
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047b1 	.word	0x080047b1
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479e:	e080      	b.n	80048a2 <UART_SetConfig+0x1ba>
 80047a0:	2302      	movs	r3, #2
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a6:	e07c      	b.n	80048a2 <UART_SetConfig+0x1ba>
 80047a8:	2304      	movs	r3, #4
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ae:	e078      	b.n	80048a2 <UART_SetConfig+0x1ba>
 80047b0:	2308      	movs	r3, #8
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b6:	e074      	b.n	80048a2 <UART_SetConfig+0x1ba>
 80047b8:	2310      	movs	r3, #16
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047be:	e070      	b.n	80048a2 <UART_SetConfig+0x1ba>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a8c      	ldr	r2, [pc, #560]	@ (80049f8 <UART_SetConfig+0x310>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d138      	bne.n	800483c <UART_SetConfig+0x154>
 80047ca:	4b8a      	ldr	r3, [pc, #552]	@ (80049f4 <UART_SetConfig+0x30c>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	d82d      	bhi.n	8004834 <UART_SetConfig+0x14c>
 80047d8:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <UART_SetConfig+0xf8>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004835 	.word	0x08004835
 80047e8:	08004835 	.word	0x08004835
 80047ec:	08004835 	.word	0x08004835
 80047f0:	08004825 	.word	0x08004825
 80047f4:	08004835 	.word	0x08004835
 80047f8:	08004835 	.word	0x08004835
 80047fc:	08004835 	.word	0x08004835
 8004800:	0800481d 	.word	0x0800481d
 8004804:	08004835 	.word	0x08004835
 8004808:	08004835 	.word	0x08004835
 800480c:	08004835 	.word	0x08004835
 8004810:	0800482d 	.word	0x0800482d
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481a:	e042      	b.n	80048a2 <UART_SetConfig+0x1ba>
 800481c:	2302      	movs	r3, #2
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004822:	e03e      	b.n	80048a2 <UART_SetConfig+0x1ba>
 8004824:	2304      	movs	r3, #4
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482a:	e03a      	b.n	80048a2 <UART_SetConfig+0x1ba>
 800482c:	2308      	movs	r3, #8
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004832:	e036      	b.n	80048a2 <UART_SetConfig+0x1ba>
 8004834:	2310      	movs	r3, #16
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483a:	e032      	b.n	80048a2 <UART_SetConfig+0x1ba>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a6a      	ldr	r2, [pc, #424]	@ (80049ec <UART_SetConfig+0x304>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d12a      	bne.n	800489c <UART_SetConfig+0x1b4>
 8004846:	4b6b      	ldr	r3, [pc, #428]	@ (80049f4 <UART_SetConfig+0x30c>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004850:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004854:	d01a      	beq.n	800488c <UART_SetConfig+0x1a4>
 8004856:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800485a:	d81b      	bhi.n	8004894 <UART_SetConfig+0x1ac>
 800485c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004860:	d00c      	beq.n	800487c <UART_SetConfig+0x194>
 8004862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004866:	d815      	bhi.n	8004894 <UART_SetConfig+0x1ac>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <UART_SetConfig+0x18c>
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004870:	d008      	beq.n	8004884 <UART_SetConfig+0x19c>
 8004872:	e00f      	b.n	8004894 <UART_SetConfig+0x1ac>
 8004874:	2300      	movs	r3, #0
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487a:	e012      	b.n	80048a2 <UART_SetConfig+0x1ba>
 800487c:	2302      	movs	r3, #2
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004882:	e00e      	b.n	80048a2 <UART_SetConfig+0x1ba>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488a:	e00a      	b.n	80048a2 <UART_SetConfig+0x1ba>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004892:	e006      	b.n	80048a2 <UART_SetConfig+0x1ba>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489a:	e002      	b.n	80048a2 <UART_SetConfig+0x1ba>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a51      	ldr	r2, [pc, #324]	@ (80049ec <UART_SetConfig+0x304>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d17a      	bne.n	80049a2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d824      	bhi.n	80048fe <UART_SetConfig+0x216>
 80048b4:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <UART_SetConfig+0x1d4>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048ff 	.word	0x080048ff
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	080048ff 	.word	0x080048ff
 80048cc:	080048ef 	.word	0x080048ef
 80048d0:	080048ff 	.word	0x080048ff
 80048d4:	080048ff 	.word	0x080048ff
 80048d8:	080048ff 	.word	0x080048ff
 80048dc:	080048f7 	.word	0x080048f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e0:	f7ff faa6 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 80048e4:	61f8      	str	r0, [r7, #28]
        break;
 80048e6:	e010      	b.n	800490a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e8:	4b44      	ldr	r3, [pc, #272]	@ (80049fc <UART_SetConfig+0x314>)
 80048ea:	61fb      	str	r3, [r7, #28]
        break;
 80048ec:	e00d      	b.n	800490a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ee:	f7ff fa07 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 80048f2:	61f8      	str	r0, [r7, #28]
        break;
 80048f4:	e009      	b.n	800490a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fa:	61fb      	str	r3, [r7, #28]
        break;
 80048fc:	e005      	b.n	800490a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004908:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8107 	beq.w	8004b20 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	429a      	cmp	r2, r3
 8004920:	d305      	bcc.n	800492e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	429a      	cmp	r2, r3
 800492c:	d903      	bls.n	8004936 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004934:	e0f4      	b.n	8004b20 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2200      	movs	r2, #0
 800493a:	461c      	mov	r4, r3
 800493c:	4615      	mov	r5, r2
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	022b      	lsls	r3, r5, #8
 8004948:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800494c:	0222      	lsls	r2, r4, #8
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	6849      	ldr	r1, [r1, #4]
 8004952:	0849      	lsrs	r1, r1, #1
 8004954:	2000      	movs	r0, #0
 8004956:	4688      	mov	r8, r1
 8004958:	4681      	mov	r9, r0
 800495a:	eb12 0a08 	adds.w	sl, r2, r8
 800495e:	eb43 0b09 	adc.w	fp, r3, r9
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004970:	4650      	mov	r0, sl
 8004972:	4659      	mov	r1, fp
 8004974:	f7fc f918 	bl	8000ba8 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004986:	d308      	bcc.n	800499a <UART_SetConfig+0x2b2>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498e:	d204      	bcs.n	800499a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	e0c2      	b.n	8004b20 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049a0:	e0be      	b.n	8004b20 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049aa:	d16a      	bne.n	8004a82 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80049ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d834      	bhi.n	8004a1e <UART_SetConfig+0x336>
 80049b4:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <UART_SetConfig+0x2d4>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	08004a01 	.word	0x08004a01
 80049c4:	08004a09 	.word	0x08004a09
 80049c8:	08004a1f 	.word	0x08004a1f
 80049cc:	08004a0f 	.word	0x08004a0f
 80049d0:	08004a1f 	.word	0x08004a1f
 80049d4:	08004a1f 	.word	0x08004a1f
 80049d8:	08004a1f 	.word	0x08004a1f
 80049dc:	08004a17 	.word	0x08004a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7ff fa26 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 80049e4:	61f8      	str	r0, [r7, #28]
        break;
 80049e6:	e020      	b.n	8004a2a <UART_SetConfig+0x342>
 80049e8:	efff69f3 	.word	0xefff69f3
 80049ec:	40008000 	.word	0x40008000
 80049f0:	40013800 	.word	0x40013800
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40004400 	.word	0x40004400
 80049fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7ff fa2c 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e010      	b.n	8004a2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a08:	4b4c      	ldr	r3, [pc, #304]	@ (8004b3c <UART_SetConfig+0x454>)
 8004a0a:	61fb      	str	r3, [r7, #28]
        break;
 8004a0c:	e00d      	b.n	8004a2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0e:	f7ff f977 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8004a12:	61f8      	str	r0, [r7, #28]
        break;
 8004a14:	e009      	b.n	8004a2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a1a:	61fb      	str	r3, [r7, #28]
        break;
 8004a1c:	e005      	b.n	8004a2a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d077      	beq.n	8004b20 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005a      	lsls	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d916      	bls.n	8004a7a <UART_SetConfig+0x392>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a52:	d212      	bcs.n	8004a7a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f023 030f 	bic.w	r3, r3, #15
 8004a5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	8afb      	ldrh	r3, [r7, #22]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	8afa      	ldrh	r2, [r7, #22]
 8004a76:	60da      	str	r2, [r3, #12]
 8004a78:	e052      	b.n	8004b20 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a80:	e04e      	b.n	8004b20 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d827      	bhi.n	8004ada <UART_SetConfig+0x3f2>
 8004a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a90 <UART_SetConfig+0x3a8>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004adb 	.word	0x08004adb
 8004aa0:	08004acb 	.word	0x08004acb
 8004aa4:	08004adb 	.word	0x08004adb
 8004aa8:	08004adb 	.word	0x08004adb
 8004aac:	08004adb 	.word	0x08004adb
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7ff f9bc 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	61f8      	str	r0, [r7, #28]
        break;
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7ff f9ce 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8004ac0:	61f8      	str	r0, [r7, #28]
        break;
 8004ac2:	e010      	b.n	8004ae6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b3c <UART_SetConfig+0x454>)
 8004ac6:	61fb      	str	r3, [r7, #28]
        break;
 8004ac8:	e00d      	b.n	8004ae6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7ff f919 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8004ace:	61f8      	str	r0, [r7, #28]
        break;
 8004ad0:	e009      	b.n	8004ae6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e005      	b.n	8004ae6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d019      	beq.n	8004b20 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	085a      	lsrs	r2, r3, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	441a      	add	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	d909      	bls.n	8004b1a <UART_SetConfig+0x432>
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0c:	d205      	bcs.n	8004b1a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60da      	str	r2, [r3, #12]
 8004b18:	e002      	b.n	8004b20 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3728      	adds	r7, #40	@ 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	00f42400 	.word	0x00f42400

08004b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c3e:	d10a      	bne.n	8004c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b098      	sub	sp, #96	@ 0x60
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c94:	f7fc fda8 	bl	80017e8 <HAL_GetTick>
 8004c98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d12e      	bne.n	8004d06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f88c 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d021      	beq.n	8004d06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e6      	bne.n	8004cc2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e062      	b.n	8004dcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d149      	bne.n	8004da8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f856 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d03c      	beq.n	8004da8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e6      	bne.n	8004d2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d80:	61fa      	str	r2, [r7, #28]
 8004d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e5      	bne.n	8004d60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e011      	b.n	8004dcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3758      	adds	r7, #88	@ 0x58
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de4:	e04f      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d04b      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fc fcfb 	bl	80017e8 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e04e      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d037      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b80      	cmp	r3, #128	@ 0x80
 8004e1a:	d034      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b40      	cmp	r3, #64	@ 0x40
 8004e20:	d031      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d110      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2208      	movs	r2, #8
 8004e36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f838 	bl	8004eae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2208      	movs	r2, #8
 8004e42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e029      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e60:	d111      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f81e 	bl	8004eae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e00f      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	bf0c      	ite	eq
 8004e96:	2301      	moveq	r3, #1
 8004e98:	2300      	movne	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d0a0      	beq.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b095      	sub	sp, #84	@ 0x54
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ed6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d118      	bne.n	8004f56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f023 0310 	bic.w	r3, r3, #16
 8004f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6979      	ldr	r1, [r7, #20]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e6      	bne.n	8004f24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f6a:	bf00      	nop
 8004f6c:	3754      	adds	r7, #84	@ 0x54
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <funchclassifier78.constprop.0>:
 8004f78:	4288      	cmp	r0, r1
 8004f7a:	d300      	bcc.n	8004f7e <funchclassifier78.constprop.0+0x6>
 8004f7c:	4770      	bx	lr
 8004f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f82:	1847      	adds	r7, r0, r1
 8004f84:	ea4f 0867 	mov.w	r8, r7, asr #1
 8004f88:	087f      	lsrs	r7, r7, #1
 8004f8a:	1c7c      	adds	r4, r7, #1
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	b2a4      	uxth	r4, r4
 8004f90:	4639      	mov	r1, r7
 8004f92:	4606      	mov	r6, r0
 8004f94:	f7ff fff0 	bl	8004f78 <funchclassifier78.constprop.0>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f7ff ffec 	bl	8004f78 <funchclassifier78.constprop.0>
 8004fa0:	493f      	ldr	r1, [pc, #252]	@ (80050a0 <funchclassifier78.constprop.0+0x128>)
 8004fa2:	eb01 0388 	add.w	r3, r1, r8, lsl #2
 8004fa6:	ed93 7a00 	vldr	s14, [r3]
 8004faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb6:	dc01      	bgt.n	8004fbc <funchclassifier78.constprop.0+0x44>
 8004fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fbc:	42be      	cmp	r6, r7
 8004fbe:	d867      	bhi.n	8005090 <funchclassifier78.constprop.0+0x118>
 8004fc0:	42a5      	cmp	r5, r4
 8004fc2:	d369      	bcc.n	8005098 <funchclassifier78.constprop.0+0x120>
 8004fc4:	4837      	ldr	r0, [pc, #220]	@ (80050a4 <funchclassifier78.constprop.0+0x12c>)
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e001      	b.n	8004fd0 <funchclassifier78.constprop.0+0x58>
 8004fcc:	42a5      	cmp	r5, r4
 8004fce:	d337      	bcc.n	8005040 <funchclassifier78.constprop.0+0xc8>
 8004fd0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8004fd4:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004fd8:	edde 7a00 	vldr	s15, [lr]
 8004fdc:	ed9c 7a00 	vldr	s14, [ip]
 8004fe0:	f103 0e01 	add.w	lr, r3, #1
 8004fe4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fec:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8004ff0:	fa1f f38e 	uxth.w	r3, lr
 8004ff4:	f102 0e01 	add.w	lr, r2, #1
 8004ff8:	bf53      	iteet	pl
 8004ffa:	3401      	addpl	r4, #1
 8004ffc:	fa1f f28e 	uxthmi.w	r2, lr
 8005000:	eef0 7a47 	vmovmi.f32	s15, s14
 8005004:	b2a4      	uxthpl	r4, r4
 8005006:	4297      	cmp	r7, r2
 8005008:	edcc 7a00 	vstr	s15, [ip]
 800500c:	d2de      	bcs.n	8004fcc <funchclassifier78.constprop.0+0x54>
 800500e:	42a5      	cmp	r5, r4
 8005010:	d32e      	bcc.n	8005070 <funchclassifier78.constprop.0+0xf8>
 8005012:	eba4 0803 	sub.w	r8, r4, r3
 8005016:	fa1f f888 	uxth.w	r8, r8
 800501a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800501e:	469c      	mov	ip, r3
 8005020:	f103 0e01 	add.w	lr, r3, #1
 8005024:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8005028:	fa1f f38e 	uxth.w	r3, lr
 800502c:	f854 eb04 	ldr.w	lr, [r4], #4
 8005030:	f8cc e000 	str.w	lr, [ip]
 8005034:	eb03 0c08 	add.w	ip, r3, r8
 8005038:	fa1f fc8c 	uxth.w	ip, ip
 800503c:	4565      	cmp	r5, ip
 800503e:	d2ee      	bcs.n	800501e <funchclassifier78.constprop.0+0xa6>
 8005040:	4297      	cmp	r7, r2
 8005042:	d315      	bcc.n	8005070 <funchclassifier78.constprop.0+0xf8>
 8005044:	eba2 0e03 	sub.w	lr, r2, r3
 8005048:	fa1f fe8e 	uxth.w	lr, lr
 800504c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005050:	461c      	mov	r4, r3
 8005052:	f103 0c01 	add.w	ip, r3, #1
 8005056:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800505a:	fa1f f38c 	uxth.w	r3, ip
 800505e:	f852 cb04 	ldr.w	ip, [r2], #4
 8005062:	f8c4 c000 	str.w	ip, [r4]
 8005066:	eb03 040e 	add.w	r4, r3, lr
 800506a:	b2a4      	uxth	r4, r4
 800506c:	42a7      	cmp	r7, r4
 800506e:	d2ef      	bcs.n	8005050 <funchclassifier78.constprop.0+0xd8>
 8005070:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8005074:	2300      	movs	r3, #0
 8005076:	b29a      	uxth	r2, r3
 8005078:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800507c:	3301      	adds	r3, #1
 800507e:	6814      	ldr	r4, [r2, #0]
 8005080:	f841 4b04 	str.w	r4, [r1], #4
 8005084:	18f2      	adds	r2, r6, r3
 8005086:	b292      	uxth	r2, r2
 8005088:	4295      	cmp	r5, r2
 800508a:	d2f4      	bcs.n	8005076 <funchclassifier78.constprop.0+0xfe>
 800508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005090:	4804      	ldr	r0, [pc, #16]	@ (80050a4 <funchclassifier78.constprop.0+0x12c>)
 8005092:	4632      	mov	r2, r6
 8005094:	2300      	movs	r3, #0
 8005096:	e7ba      	b.n	800500e <funchclassifier78.constprop.0+0x96>
 8005098:	4802      	ldr	r0, [pc, #8]	@ (80050a4 <funchclassifier78.constprop.0+0x12c>)
 800509a:	4632      	mov	r2, r6
 800509c:	2300      	movs	r3, #0
 800509e:	e7d1      	b.n	8005044 <funchclassifier78.constprop.0+0xcc>
 80050a0:	20000b6c 	.word	0x20000b6c
 80050a4:	2000076c 	.word	0x2000076c

080050a8 <_fminf>:
 80050a8:	f003 bed8 	b.w	8008e5c <fminf>

080050ac <neai_classification_init>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	edd0 7a36 	vldr	s15, [r0, #216]	@ 0xd8
 80050b2:	4a71      	ldr	r2, [pc, #452]	@ (8005278 <neai_classification_init+0x1cc>)
 80050b4:	4b71      	ldr	r3, [pc, #452]	@ (800527c <neai_classification_init+0x1d0>)
 80050b6:	4c72      	ldr	r4, [pc, #456]	@ (8005280 <neai_classification_init+0x1d4>)
 80050b8:	4f72      	ldr	r7, [pc, #456]	@ (8005284 <neai_classification_init+0x1d8>)
 80050ba:	4e73      	ldr	r6, [pc, #460]	@ (8005288 <neai_classification_init+0x1dc>)
 80050bc:	4d73      	ldr	r5, [pc, #460]	@ (800528c <neai_classification_init+0x1e0>)
 80050be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050c2:	ed2d 8b02 	vpush	{d8}
 80050c6:	6010      	str	r0, [r2, #0]
 80050c8:	f100 026c 	add.w	r2, r0, #108	@ 0x6c
 80050cc:	ee17 1a90 	vmov	r1, s15
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005290 <neai_classification_init+0x1e4>)
 80050d4:	6039      	str	r1, [r7, #0]
 80050d6:	6019      	str	r1, [r3, #0]
 80050d8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	1c4a      	adds	r2, r1, #1
 80050e0:	6063      	str	r3, [r4, #4]
 80050e2:	3337      	adds	r3, #55	@ 0x37
 80050e4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80050e8:	496a      	ldr	r1, [pc, #424]	@ (8005294 <neai_classification_init+0x1e8>)
 80050ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80050ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80050f2:	ed92 7a00 	vldr	s14, [r2]
 80050f6:	30dc      	adds	r0, #220	@ 0xdc
 80050f8:	6008      	str	r0, [r1, #0]
 80050fa:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80050fe:	4966      	ldr	r1, [pc, #408]	@ (8005298 <neai_classification_init+0x1ec>)
 8005100:	eeb4 7a67 	vcmp.f32	s14, s15
 8005104:	600b      	str	r3, [r1, #0]
 8005106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	f04f 010e 	mov.w	r1, #14
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	6029      	str	r1, [r5, #0]
 8005118:	f040 8096 	bne.w	8005248 <neai_classification_init+0x19c>
 800511c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005120:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005124:	eeb4 7a67 	vcmp.f32	s14, s15
 8005128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512c:	f040 808c 	bne.w	8005248 <neai_classification_init+0x19c>
 8005130:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 800529c <neai_classification_init+0x1f0>
 8005134:	ed92 7a02 	vldr	s14, [r2, #8]
 8005138:	eeb4 7a67 	vcmp.f32	s14, s15
 800513c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005140:	f040 8082 	bne.w	8005248 <neai_classification_init+0x19c>
 8005144:	edd2 7a03 	vldr	s15, [r2, #12]
 8005148:	eef5 7a40 	vcmp.f32	s15, #0.0
 800514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005150:	d17a      	bne.n	8005248 <neai_classification_init+0x19c>
 8005152:	edd2 7a04 	vldr	s15, [r2, #16]
 8005156:	eef5 7a40 	vcmp.f32	s15, #0.0
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	d173      	bne.n	8005248 <neai_classification_init+0x19c>
 8005160:	ed92 7a05 	vldr	s14, [r2, #20]
 8005164:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005168:	eeb4 7a67 	vcmp.f32	s14, s15
 800516c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005170:	d16a      	bne.n	8005248 <neai_classification_init+0x19c>
 8005172:	edd2 7a06 	vldr	s15, [r2, #24]
 8005176:	eef5 7a40 	vcmp.f32	s15, #0.0
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	d163      	bne.n	8005248 <neai_classification_init+0x19c>
 8005180:	edd2 7a07 	vldr	s15, [r2, #28]
 8005184:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	d15c      	bne.n	8005248 <neai_classification_init+0x19c>
 800518e:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80052a0 <neai_classification_init+0x1f4>
 8005192:	ed92 7a08 	vldr	s14, [r2, #32]
 8005196:	eeb4 7a67 	vcmp.f32	s14, s15
 800519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519e:	d153      	bne.n	8005248 <neai_classification_init+0x19c>
 80051a0:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 80051a4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80051a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80051ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b0:	d14a      	bne.n	8005248 <neai_classification_init+0x19c>
 80051b2:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 80051b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051be:	d143      	bne.n	8005248 <neai_classification_init+0x19c>
 80051c0:	ed92 7a0b 	vldr	s14, [r2, #44]	@ 0x2c
 80051c4:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80051c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80051cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d0:	d13a      	bne.n	8005248 <neai_classification_init+0x19c>
 80051d2:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 80051d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051de:	d133      	bne.n	8005248 <neai_classification_init+0x19c>
 80051e0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80051e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	d12c      	bne.n	8005248 <neai_classification_init+0x19c>
 80051ee:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80051f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fa:	d125      	bne.n	8005248 <neai_classification_init+0x19c>
 80051fc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80052a4 <neai_classification_init+0x1f8>
 8005200:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8005204:	eeb4 7a67 	vcmp.f32	s14, s15
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	d11c      	bne.n	8005248 <neai_classification_init+0x19c>
 800520e:	ed92 7a10 	vldr	s14, [r2, #64]	@ 0x40
 8005212:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8005216:	eeb4 7a67 	vcmp.f32	s14, s15
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	d113      	bne.n	8005248 <neai_classification_init+0x19c>
 8005220:	ed92 7a11 	vldr	s14, [r2, #68]	@ 0x44
 8005224:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005228:	eeb4 7a67 	vcmp.f32	s14, s15
 800522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005230:	d10a      	bne.n	8005248 <neai_classification_init+0x19c>
 8005232:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 8005236:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 800523a:	eeb4 7a67 	vcmp.f32	s14, s15
 800523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005242:	bf18      	it	ne
 8005244:	237d      	movne	r3, #125	@ 0x7d
 8005246:	e000      	b.n	800524a <neai_classification_init+0x19e>
 8005248:	237d      	movs	r3, #125	@ 0x7d
 800524a:	ed9f 8a17 	vldr	s16, [pc, #92]	@ 80052a8 <neai_classification_init+0x1fc>
 800524e:	4c17      	ldr	r4, [pc, #92]	@ (80052ac <neai_classification_init+0x200>)
 8005250:	eddf 0a17 	vldr	s1, [pc, #92]	@ 80052b0 <neai_classification_init+0x204>
 8005254:	7023      	strb	r3, [r4, #0]
 8005256:	eeb0 0a48 	vmov.f32	s0, s16
 800525a:	f7ff ff25 	bl	80050a8 <_fminf>
 800525e:	eeb4 0a48 	vcmp.f32	s0, s16
 8005262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005266:	bf1c      	itt	ne
 8005268:	2081      	movne	r0, #129	@ 0x81
 800526a:	7020      	strbne	r0, [r4, #0]
 800526c:	ecbd 8b02 	vpop	{d8}
 8005270:	bf08      	it	eq
 8005272:	7820      	ldrbeq	r0, [r4, #0]
 8005274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005276:	bf00      	nop
 8005278:	20000fd8 	.word	0x20000fd8
 800527c:	20000fdc 	.word	0x20000fdc
 8005280:	2000074c 	.word	0x2000074c
 8005284:	20000754 	.word	0x20000754
 8005288:	2000075c 	.word	0x2000075c
 800528c:	20000758 	.word	0x20000758
 8005290:	20000760 	.word	0x20000760
 8005294:	20000768 	.word	0x20000768
 8005298:	20000764 	.word	0x20000764
 800529c:	43800000 	.word	0x43800000
 80052a0:	424c0000 	.word	0x424c0000
 80052a4:	49742400 	.word	0x49742400
 80052a8:	3f8ccccd 	.word	0x3f8ccccd
 80052ac:	2000001d 	.word	0x2000001d
 80052b0:	40066666 	.word	0x40066666

080052b4 <neai_classification>:
 80052b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	ed2d 8b06 	vpush	{d8-d10}
 80052bc:	4bdf      	ldr	r3, [pc, #892]	@ (800563c <neai_classification+0x388>)
 80052be:	b089      	sub	sp, #36	@ 0x24
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	4605      	mov	r5, r0
 80052c6:	468b      	mov	fp, r1
 80052c8:	9202      	str	r2, [sp, #8]
 80052ca:	b113      	cbz	r3, 80052d2 <neai_classification+0x1e>
 80052cc:	2b81      	cmp	r3, #129	@ 0x81
 80052ce:	f040 86e3 	bne.w	8006098 <neai_classification+0xde4>
 80052d2:	edd5 7a00 	vldr	s15, [r5]
 80052d6:	462e      	mov	r6, r5
 80052d8:	f505 6480 	add.w	r4, r5, #1024	@ 0x400
 80052dc:	462b      	mov	r3, r5
 80052de:	ecb3 7a01 	vldmia	r3!, {s14}
 80052e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ea:	bfd8      	it	le
 80052ec:	eef0 7a47 	vmovle.f32	s15, s14
 80052f0:	429c      	cmp	r4, r3
 80052f2:	d1f4      	bne.n	80052de <neai_classification+0x2a>
 80052f4:	4bd2      	ldr	r3, [pc, #840]	@ (8005640 <neai_classification+0x38c>)
 80052f6:	edc3 7a07 	vstr	s15, [r3, #28]
 80052fa:	edd5 7a00 	vldr	s15, [r5]
 80052fe:	462b      	mov	r3, r5
 8005300:	ecb3 7a01 	vldmia	r3!, {s14}
 8005304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530c:	bf58      	it	pl
 800530e:	eef0 7a47 	vmovpl.f32	s15, s14
 8005312:	429c      	cmp	r4, r3
 8005314:	d1f4      	bne.n	8005300 <neai_classification+0x4c>
 8005316:	4bca      	ldr	r3, [pc, #808]	@ (8005640 <neai_classification+0x38c>)
 8005318:	edc3 7a03 	vstr	s15, [r3, #12]
 800531c:	ed95 7a00 	vldr	s14, [r5]
 8005320:	462b      	mov	r3, r5
 8005322:	eef0 7a47 	vmov.f32	s15, s14
 8005326:	ecf3 6a01 	vldmia	r3!, {s13}
 800532a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005332:	bf58      	it	pl
 8005334:	eef0 7a66 	vmovpl.f32	s15, s13
 8005338:	429c      	cmp	r4, r3
 800533a:	d1f4      	bne.n	8005326 <neai_classification+0x72>
 800533c:	462b      	mov	r3, r5
 800533e:	ecf3 6a01 	vldmia	r3!, {s13}
 8005342:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534a:	bfd8      	it	le
 800534c:	eeb0 7a66 	vmovle.f32	s14, s13
 8005350:	429c      	cmp	r4, r3
 8005352:	d1f4      	bne.n	800533e <neai_classification+0x8a>
 8005354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005358:	4bb9      	ldr	r3, [pc, #740]	@ (8005640 <neai_classification+0x38c>)
 800535a:	edc3 7a01 	vstr	s15, [r3, #4]
 800535e:	ed95 7a00 	vldr	s14, [r5]
 8005362:	462b      	mov	r3, r5
 8005364:	eef0 7a47 	vmov.f32	s15, s14
 8005368:	ecf3 6a01 	vldmia	r3!, {s13}
 800536c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005374:	bfd8      	it	le
 8005376:	eef0 7a66 	vmovle.f32	s15, s13
 800537a:	429c      	cmp	r4, r3
 800537c:	d1f4      	bne.n	8005368 <neai_classification+0xb4>
 800537e:	eef0 7ae7 	vabs.f32	s15, s15
 8005382:	462b      	mov	r3, r5
 8005384:	ecf3 6a01 	vldmia	r3!, {s13}
 8005388:	eef4 6ac7 	vcmpe.f32	s13, s14
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	bf58      	it	pl
 8005392:	eeb0 7a66 	vmovpl.f32	s14, s13
 8005396:	429c      	cmp	r4, r3
 8005398:	d1f4      	bne.n	8005384 <neai_classification+0xd0>
 800539a:	eeb0 7ac7 	vabs.f32	s14, s14
 800539e:	eef4 7a47 	vcmp.f32	s15, s14
 80053a2:	4ba7      	ldr	r3, [pc, #668]	@ (8005640 <neai_classification+0x38c>)
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	bf48      	it	mi
 80053aa:	eef0 7a47 	vmovmi.f32	s15, s14
 80053ae:	edc3 7a02 	vstr	s15, [r3, #8]
 80053b2:	462f      	mov	r7, r5
 80053b4:	ecb7 7a01 	vldmia	r7!, {s14}
 80053b8:	eef0 7a47 	vmov.f32	s15, s14
 80053bc:	463b      	mov	r3, r7
 80053be:	ecf3 6a01 	vldmia	r3!, {s13}
 80053c2:	429c      	cmp	r4, r3
 80053c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c8:	d1f9      	bne.n	80053be <neai_classification+0x10a>
 80053ca:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8005644 <neai_classification+0x390>
 80053ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80053d2:	463b      	mov	r3, r7
 80053d4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80053d8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80053dc:	ecf3 7a01 	vldmia	r3!, {s15}
 80053e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80053ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053ee:	d1f5      	bne.n	80053dc <neai_classification+0x128>
 80053f0:	eddf 7a94 	vldr	s15, [pc, #592]	@ 8005644 <neai_classification+0x390>
 80053f4:	ee27 0a27 	vmul.f32	s0, s14, s15
 80053f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80053fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005400:	f100 8754 	bmi.w	80062ac <neai_classification+0xff8>
 8005404:	eef1 7ac0 	vsqrt.f32	s15, s0
 8005408:	4b8d      	ldr	r3, [pc, #564]	@ (8005640 <neai_classification+0x38c>)
 800540a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 800540e:	edd5 8a00 	vldr	s17, [r5]
 8005412:	463b      	mov	r3, r7
 8005414:	eef0 7a68 	vmov.f32	s15, s17
 8005418:	ecb3 7a01 	vldmia	r3!, {s14}
 800541c:	42a3      	cmp	r3, r4
 800541e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005422:	d1f9      	bne.n	8005418 <neai_classification+0x164>
 8005424:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8005644 <neai_classification+0x390>
 8005428:	ee27 8aa6 	vmul.f32	s16, s15, s13
 800542c:	eeb0 7a68 	vmov.f32	s14, s17
 8005430:	463b      	mov	r3, r7
 8005432:	ecf3 7a01 	vldmia	r3!, {s15}
 8005436:	429c      	cmp	r4, r3
 8005438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800543c:	d1f9      	bne.n	8005432 <neai_classification+0x17e>
 800543e:	eddf 7a81 	vldr	s15, [pc, #516]	@ 8005644 <neai_classification+0x390>
 8005442:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005446:	463b      	mov	r3, r7
 8005448:	ee38 7ae6 	vsub.f32	s14, s17, s13
 800544c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8005450:	ecf3 7a01 	vldmia	r3!, {s15}
 8005454:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005458:	42a3      	cmp	r3, r4
 800545a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800545e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005462:	d1f5      	bne.n	8005450 <neai_classification+0x19c>
 8005464:	eddf 7a77 	vldr	s15, [pc, #476]	@ 8005644 <neai_classification+0x390>
 8005468:	ee27 0a27 	vmul.f32	s0, s14, s15
 800546c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005474:	f100 8720 	bmi.w	80062b8 <neai_classification+0x1004>
 8005478:	eeb1 7ac0 	vsqrt.f32	s14, s0
 800547c:	463b      	mov	r3, r7
 800547e:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8005482:	ee68 6aa8 	vmul.f32	s13, s17, s17
 8005486:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800548a:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800548e:	ecf3 7a01 	vldmia	r3!, {s15}
 8005492:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8005496:	42a3      	cmp	r3, r4
 8005498:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800549c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80054a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80054a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80054a8:	d1f1      	bne.n	800548e <neai_classification+0x1da>
 80054aa:	ee67 7a07 	vmul.f32	s15, s14, s14
 80054ae:	eddf 5a65 	vldr	s11, [pc, #404]	@ 8005644 <neai_classification+0x390>
 80054b2:	4b63      	ldr	r3, [pc, #396]	@ (8005640 <neai_classification+0x38c>)
 80054b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054b8:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 80054bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80054c8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80054cc:	edc3 7a06 	vstr	s15, [r3, #24]
 80054d0:	ed95 7a00 	vldr	s14, [r5]
 80054d4:	463b      	mov	r3, r7
 80054d6:	eef0 6ac7 	vabs.f32	s13, s14
 80054da:	ecf3 7a01 	vldmia	r3!, {s15}
 80054de:	eef0 7ae7 	vabs.f32	s15, s15
 80054e2:	429c      	cmp	r4, r3
 80054e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80054e8:	d1f7      	bne.n	80054da <neai_classification+0x226>
 80054ea:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 8005644 <neai_classification+0x390>
 80054ee:	ee26 6a86 	vmul.f32	s12, s13, s12
 80054f2:	eef0 7a47 	vmov.f32	s15, s14
 80054f6:	462b      	mov	r3, r5
 80054f8:	ecf3 6a01 	vldmia	r3!, {s13}
 80054fc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005504:	bfd8      	it	le
 8005506:	eef0 7a66 	vmovle.f32	s15, s13
 800550a:	42a3      	cmp	r3, r4
 800550c:	d1f4      	bne.n	80054f8 <neai_classification+0x244>
 800550e:	eef0 7ae7 	vabs.f32	s15, s15
 8005512:	462b      	mov	r3, r5
 8005514:	ecf3 6a01 	vldmia	r3!, {s13}
 8005518:	eef4 6ac7 	vcmpe.f32	s13, s14
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	bf58      	it	pl
 8005522:	eeb0 7a66 	vmovpl.f32	s14, s13
 8005526:	42a3      	cmp	r3, r4
 8005528:	d1f4      	bne.n	8005514 <neai_classification+0x260>
 800552a:	eeb0 7ac7 	vabs.f32	s14, s14
 800552e:	eef4 7a47 	vcmp.f32	s15, s14
 8005532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005536:	bf48      	it	mi
 8005538:	eef0 7a47 	vmovmi.f32	s15, s14
 800553c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005540:	4b3f      	ldr	r3, [pc, #252]	@ (8005640 <neai_classification+0x38c>)
 8005542:	ed83 7a04 	vstr	s14, [r3, #16]
 8005546:	ed95 7a00 	vldr	s14, [r5]
 800554a:	eef0 7ac7 	vabs.f32	s15, s14
 800554e:	eef1 6ae7 	vsqrt.f32	s13, s15
 8005552:	463b      	mov	r3, r7
 8005554:	ecf3 7a01 	vldmia	r3!, {s15}
 8005558:	eef0 7ae7 	vabs.f32	s15, s15
 800555c:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8005560:	42a3      	cmp	r3, r4
 8005562:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005566:	d1f5      	bne.n	8005554 <neai_classification+0x2a0>
 8005568:	ed9f 6a36 	vldr	s12, [pc, #216]	@ 8005644 <neai_classification+0x390>
 800556c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005570:	eef0 7a47 	vmov.f32	s15, s14
 8005574:	462b      	mov	r3, r5
 8005576:	ecb3 6a01 	vldmia	r3!, {s12}
 800557a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800557e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005582:	bfd8      	it	le
 8005584:	eef0 7a46 	vmovle.f32	s15, s12
 8005588:	42a3      	cmp	r3, r4
 800558a:	d1f4      	bne.n	8005576 <neai_classification+0x2c2>
 800558c:	eef0 7ae7 	vabs.f32	s15, s15
 8005590:	462b      	mov	r3, r5
 8005592:	ecb3 6a01 	vldmia	r3!, {s12}
 8005596:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800559a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559e:	bf58      	it	pl
 80055a0:	eeb0 7a46 	vmovpl.f32	s14, s12
 80055a4:	429c      	cmp	r4, r3
 80055a6:	d1f4      	bne.n	8005592 <neai_classification+0x2de>
 80055a8:	eeb0 7ac7 	vabs.f32	s14, s14
 80055ac:	eef4 7a47 	vcmp.f32	s15, s14
 80055b0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80055b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b8:	bf48      	it	mi
 80055ba:	eef0 7a47 	vmovmi.f32	s15, s14
 80055be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80055c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005640 <neai_classification+0x38c>)
 80055c4:	ed83 7a08 	vstr	s14, [r3, #32]
 80055c8:	ed95 7a00 	vldr	s14, [r5]
 80055cc:	462b      	mov	r3, r5
 80055ce:	eef0 7a47 	vmov.f32	s15, s14
 80055d2:	ecf3 6a01 	vldmia	r3!, {s13}
 80055d6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80055da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055de:	bfd8      	it	le
 80055e0:	eef0 7a66 	vmovle.f32	s15, s13
 80055e4:	429c      	cmp	r4, r3
 80055e6:	d1f4      	bne.n	80055d2 <neai_classification+0x31e>
 80055e8:	eef0 6a47 	vmov.f32	s13, s14
 80055ec:	eeb0 8ae7 	vabs.f32	s16, s15
 80055f0:	462b      	mov	r3, r5
 80055f2:	ecf3 7a01 	vldmia	r3!, {s15}
 80055f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80055fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fe:	bf58      	it	pl
 8005600:	eef0 6a67 	vmovpl.f32	s13, s15
 8005604:	429c      	cmp	r4, r3
 8005606:	d1f4      	bne.n	80055f2 <neai_classification+0x33e>
 8005608:	eef0 6ae6 	vabs.f32	s13, s13
 800560c:	eeb4 8a66 	vcmp.f32	s16, s13
 8005610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005614:	ee27 7a07 	vmul.f32	s14, s14, s14
 8005618:	bf48      	it	mi
 800561a:	eeb0 8a66 	vmovmi.f32	s16, s13
 800561e:	ecf7 7a01 	vldmia	r7!, {s15}
 8005622:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005626:	42bc      	cmp	r4, r7
 8005628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800562c:	d1f7      	bne.n	800561e <neai_classification+0x36a>
 800562e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005644 <neai_classification+0x390>
 8005632:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005636:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800563a:	e005      	b.n	8005648 <neai_classification+0x394>
 800563c:	2000001d 	.word	0x2000001d
 8005640:	20000f6c 	.word	0x20000f6c
 8005644:	3b800000 	.word	0x3b800000
 8005648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564c:	f100 8628 	bmi.w	80062a0 <neai_classification+0xfec>
 8005650:	eef1 7ac0 	vsqrt.f32	s15, s0
 8005654:	f8df 8370 	ldr.w	r8, [pc, #880]	@ 80059c8 <neai_classification+0x714>
 8005658:	4aca      	ldr	r2, [pc, #808]	@ (8005984 <neai_classification+0x6d0>)
 800565a:	f5a8 6480 	sub.w	r4, r8, #1024	@ 0x400
 800565e:	462b      	mov	r3, r5
 8005660:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005664:	ed82 7a05 	vstr	s14, [r2, #20]
 8005668:	4622      	mov	r2, r4
 800566a:	f853 1b04 	ldr.w	r1, [r3], #4
 800566e:	f842 1b04 	str.w	r1, [r2], #4
 8005672:	4542      	cmp	r2, r8
 8005674:	d1f9      	bne.n	800566a <neai_classification+0x3b6>
 8005676:	21ff      	movs	r1, #255	@ 0xff
 8005678:	2000      	movs	r0, #0
 800567a:	f7ff fc7d 	bl	8004f78 <funchclassifier78.constprop.0>
 800567e:	edd4 6a3f 	vldr	s13, [r4, #252]	@ 0xfc
 8005682:	edd4 7a40 	vldr	s15, [r4, #256]	@ 0x100
 8005686:	4bbf      	ldr	r3, [pc, #764]	@ (8005984 <neai_classification+0x6d0>)
 8005688:	f8df a340 	ldr.w	sl, [pc, #832]	@ 80059cc <neai_classification+0x718>
 800568c:	ed9f 9abe 	vldr	s18, [pc, #760]	@ 8005988 <neai_classification+0x6d4>
 8005690:	ed94 7a00 	vldr	s14, [r4]
 8005694:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005698:	eeb6 6a08 	vmov.f32	s12, #104	@ 0x3f400000  0.750
 800569c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80056a0:	4655      	mov	r5, sl
 80056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80056aa:	2301      	movs	r3, #1
 80056ac:	ecf5 8a01 	vldmia	r5!, {s17}
 80056b0:	eeb4 7a68 	vcmp.f32	s14, s17
 80056b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b8:	f103 0201 	add.w	r2, r3, #1
 80056bc:	f040 84f2 	bne.w	80060a4 <neai_classification+0xdf0>
 80056c0:	4545      	cmp	r5, r8
 80056c2:	b293      	uxth	r3, r2
 80056c4:	d1f2      	bne.n	80056ac <neai_classification+0x3f8>
 80056c6:	ee08 3a10 	vmov	s16, r3
 80056ca:	eeba 8acc 	vcvt.f32.s32	s16, s16, #8
 80056ce:	f8df 92c0 	ldr.w	r9, [pc, #704]	@ 8005990 <neai_classification+0x6dc>
 80056d2:	eeb0 0a48 	vmov.f32	s0, s16
 80056d6:	f003 fb65 	bl	8008da4 <logf>
 80056da:	ee68 7a00 	vmul.f32	s15, s16, s0
 80056de:	4ba9      	ldr	r3, [pc, #676]	@ (8005984 <neai_classification+0x6d0>)
 80056e0:	ee77 7a89 	vadd.f32	s15, s15, s18
 80056e4:	2000      	movs	r0, #0
 80056e6:	eef1 7a67 	vneg.f32	s15, s15
 80056ea:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 80056ee:	4ba7      	ldr	r3, [pc, #668]	@ (800598c <neai_classification+0x6d8>)
 80056f0:	464d      	mov	r5, r9
 80056f2:	464a      	mov	r2, r9
 80056f4:	f856 1b04 	ldr.w	r1, [r6], #4
 80056f8:	f843 1b04 	str.w	r1, [r3], #4
 80056fc:	4598      	cmp	r8, r3
 80056fe:	f842 0b04 	str.w	r0, [r2], #4
 8005702:	d1f7      	bne.n	80056f4 <neai_classification+0x440>
 8005704:	2100      	movs	r1, #0
 8005706:	48a1      	ldr	r0, [pc, #644]	@ (800598c <neai_classification+0x6d8>)
 8005708:	460a      	mov	r2, r1
 800570a:	b28b      	uxth	r3, r1
 800570c:	429a      	cmp	r2, r3
 800570e:	d905      	bls.n	800571c <neai_classification+0x468>
 8005710:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005714:	6806      	ldr	r6, [r0, #0]
 8005716:	681f      	ldr	r7, [r3, #0]
 8005718:	6007      	str	r7, [r0, #0]
 800571a:	601e      	str	r6, [r3, #0]
 800571c:	2a7f      	cmp	r2, #127	@ 0x7f
 800571e:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8005722:	d904      	bls.n	800572e <neai_classification+0x47a>
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	b292      	uxth	r2, r2
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	429a      	cmp	r2, r3
 800572c:	d2fa      	bcs.n	8005724 <neai_classification+0x470>
 800572e:	3101      	adds	r1, #1
 8005730:	441a      	add	r2, r3
 8005732:	29ff      	cmp	r1, #255	@ 0xff
 8005734:	b292      	uxth	r2, r2
 8005736:	f100 0004 	add.w	r0, r0, #4
 800573a:	d1e6      	bne.n	800570a <neai_classification+0x456>
 800573c:	ed9f 8a92 	vldr	s16, [pc, #584]	@ 8005988 <neai_classification+0x6d4>
 8005740:	f8cd a00c 	str.w	sl, [sp, #12]
 8005744:	eeff 8a00 	vmov.f32	s17, #240	@ 0xbf800000 -1.0
 8005748:	eeb0 aa48 	vmov.f32	s20, s16
 800574c:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 8005750:	eeb6 9a00 	vmov.f32	s18, #96	@ 0x3f000000  0.5
 8005754:	2708      	movs	r7, #8
 8005756:	2601      	movs	r6, #1
 8005758:	46b4      	mov	ip, r6
 800575a:	0076      	lsls	r6, r6, #1
 800575c:	b2b6      	uxth	r6, r6
 800575e:	f1bc 0f00 	cmp.w	ip, #0
 8005762:	d053      	beq.n	800580c <neai_classification+0x558>
 8005764:	f10c 30ff 	add.w	r0, ip, #4294967295
 8005768:	b280      	uxth	r0, r0
 800576a:	28ff      	cmp	r0, #255	@ 0xff
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	eef0 5a4a 	vmov.f32	s11, s20
 8005774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005778:	bf28      	it	cs
 800577a:	20ff      	movcs	r0, #255	@ 0xff
 800577c:	460b      	mov	r3, r1
 800577e:	eb03 020c 	add.w	r2, r3, ip
 8005782:	b292      	uxth	r2, r2
 8005784:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 8005788:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800578c:	ed9a 6a00 	vldr	s12, [sl]
 8005790:	edd2 7a00 	vldr	s15, [r2]
 8005794:	ee67 6a06 	vmul.f32	s13, s14, s12
 8005798:	ee25 5aa7 	vmul.f32	s10, s11, s15
 800579c:	ee25 6a86 	vmul.f32	s12, s11, s12
 80057a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a4:	eb04 0e83 	add.w	lr, r4, r3, lsl #2
 80057a8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80057ac:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80057b0:	ed9e 6a00 	vldr	s12, [lr]
 80057b4:	ee36 6a66 	vsub.f32	s12, s12, s13
 80057b8:	ed8a 6a00 	vstr	s12, [sl]
 80057bc:	ed9e 6a00 	vldr	s12, [lr]
 80057c0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80057c4:	edce 6a00 	vstr	s13, [lr]
 80057c8:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
 80057cc:	edde 6a00 	vldr	s13, [lr]
 80057d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057d4:	4433      	add	r3, r6
 80057d6:	edc2 6a00 	vstr	s13, [r2]
 80057da:	edde 6a00 	vldr	s13, [lr]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e4:	2bff      	cmp	r3, #255	@ 0xff
 80057e6:	edce 7a00 	vstr	s15, [lr]
 80057ea:	d9c8      	bls.n	800577e <neai_classification+0x4ca>
 80057ec:	3101      	adds	r1, #1
 80057ee:	ee25 6a88 	vmul.f32	s12, s11, s16
 80057f2:	ee68 6a07 	vmul.f32	s13, s16, s14
 80057f6:	ee68 7a87 	vmul.f32	s15, s17, s14
 80057fa:	ee65 5aa8 	vmul.f32	s11, s11, s17
 80057fe:	b28b      	uxth	r3, r1
 8005800:	4283      	cmp	r3, r0
 8005802:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8005806:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800580a:	d9b8      	bls.n	800577e <neai_classification+0x4ca>
 800580c:	ee39 0ae8 	vsub.f32	s0, s19, s17
 8005810:	ee20 0a09 	vmul.f32	s0, s0, s18
 8005814:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581c:	f100 8536 	bmi.w	800628c <neai_classification+0xfd8>
 8005820:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005824:	ee38 0aa9 	vadd.f32	s0, s17, s19
 8005828:	eeb1 8a48 	vneg.f32	s16, s16
 800582c:	ee20 0a09 	vmul.f32	s0, s0, s18
 8005830:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005838:	f100 8519 	bmi.w	800626e <neai_classification+0xfba>
 800583c:	eef1 8ac0 	vsqrt.f32	s17, s0
 8005840:	3f01      	subs	r7, #1
 8005842:	b2bf      	uxth	r7, r7
 8005844:	2f00      	cmp	r7, #0
 8005846:	d187      	bne.n	8005758 <neai_classification+0x4a4>
 8005848:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800584c:	4a50      	ldr	r2, [pc, #320]	@ (8005990 <neai_classification+0x6dc>)
 800584e:	4b4f      	ldr	r3, [pc, #316]	@ (800598c <neai_classification+0x6d8>)
 8005850:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8005994 <neai_classification+0x6e0>
 8005854:	ed93 7a00 	vldr	s14, [r3]
 8005858:	edd2 7a00 	vldr	s15, [r2]
 800585c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005860:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005864:	eca3 7a01 	vstmia	r3!, {s14}
 8005868:	4543      	cmp	r3, r8
 800586a:	ece2 7a01 	vstmia	r2!, {s15}
 800586e:	d1f1      	bne.n	8005854 <neai_classification+0x5a0>
 8005870:	4a49      	ldr	r2, [pc, #292]	@ (8005998 <neai_classification+0x6e4>)
 8005872:	4b47      	ldr	r3, [pc, #284]	@ (8005990 <neai_classification+0x6dc>)
 8005874:	ed93 7a01 	vldr	s14, [r3, #4]
 8005878:	ecfa 7a01 	vldmia	sl!, {s15}
 800587c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8005880:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005884:	4592      	cmp	sl, r2
 8005886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800588a:	ece3 7a01 	vstmia	r3!, {s15}
 800588e:	d1f1      	bne.n	8005874 <neai_classification+0x5c0>
 8005890:	4c42      	ldr	r4, [pc, #264]	@ (800599c <neai_classification+0x6e8>)
 8005892:	ecb9 0a01 	vldmia	r9!, {s0}
 8005896:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800589a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589e:	f100 84ec 	bmi.w	800627a <neai_classification+0xfc6>
 80058a2:	eef1 7ac0 	vsqrt.f32	s15, s0
 80058a6:	454c      	cmp	r4, r9
 80058a8:	ed49 7a01 	vstr	s15, [r9, #-4]
 80058ac:	d1f1      	bne.n	8005892 <neai_classification+0x5de>
 80058ae:	ed95 7a00 	vldr	s14, [r5]
 80058b2:	4a3b      	ldr	r2, [pc, #236]	@ (80059a0 <neai_classification+0x6ec>)
 80058b4:	eef0 6a47 	vmov.f32	s13, s14
 80058b8:	2301      	movs	r3, #1
 80058ba:	4611      	mov	r1, r2
 80058bc:	ecf1 7a01 	vldmia	r1!, {s15}
 80058c0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80058c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c8:	d403      	bmi.n	80058d2 <neai_classification+0x61e>
 80058ca:	bfc4      	itt	gt
 80058cc:	eef0 6a67 	vmovgt.f32	s13, s15
 80058d0:	b29f      	uxthgt	r7, r3
 80058d2:	3301      	adds	r3, #1
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d1f1      	bne.n	80058bc <neai_classification+0x608>
 80058d8:	ee07 7a90 	vmov	s15, r7
 80058dc:	4b29      	ldr	r3, [pc, #164]	@ (8005984 <neai_classification+0x6d0>)
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	edc3 7a00 	vstr	s15, [r3]
 80058e6:	ecf2 7a01 	vldmia	r2!, {s15}
 80058ea:	4294      	cmp	r4, r2
 80058ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058f0:	d1f9      	bne.n	80058e6 <neai_classification+0x632>
 80058f2:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <neai_classification+0x6f0>)
 80058f4:	4b23      	ldr	r3, [pc, #140]	@ (8005984 <neai_classification+0x6d0>)
 80058f6:	6811      	ldr	r1, [r2, #0]
 80058f8:	4a2b      	ldr	r2, [pc, #172]	@ (80059a8 <neai_classification+0x6f4>)
 80058fa:	ed83 7a0b 	vstr	s14, [r3, #44]	@ 0x2c
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8005904:	edd3 7a00 	vldr	s15, [r3]
 8005908:	ecf1 6a01 	vldmia	r1!, {s13}
 800590c:	ecb2 7a01 	vldmia	r2!, {s14}
 8005910:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005918:	ece3 7a01 	vstmia	r3!, {s15}
 800591c:	4283      	cmp	r3, r0
 800591e:	d1f1      	bne.n	8005904 <neai_classification+0x650>
 8005920:	4b22      	ldr	r3, [pc, #136]	@ (80059ac <neai_classification+0x6f8>)
 8005922:	4e18      	ldr	r6, [pc, #96]	@ (8005984 <neai_classification+0x6d0>)
 8005924:	681c      	ldr	r4, [r3, #0]
 8005926:	4b22      	ldr	r3, [pc, #136]	@ (80059b0 <neai_classification+0x6fc>)
 8005928:	4d22      	ldr	r5, [pc, #136]	@ (80059b4 <neai_classification+0x700>)
 800592a:	f8d3 a000 	ldr.w	sl, [r3]
 800592e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005932:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005936:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800593a:	2c00      	cmp	r4, #0
 800593c:	6833      	ldr	r3, [r6, #0]
 800593e:	602b      	str	r3, [r5, #0]
 8005940:	f340 8307 	ble.w	8005f52 <neai_classification+0xc9e>
 8005944:	4a1c      	ldr	r2, [pc, #112]	@ (80059b8 <neai_classification+0x704>)
 8005946:	4f1d      	ldr	r7, [pc, #116]	@ (80059bc <neai_classification+0x708>)
 8005948:	4b1d      	ldr	r3, [pc, #116]	@ (80059c0 <neai_classification+0x70c>)
 800594a:	6816      	ldr	r6, [r2, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4d1c      	ldr	r5, [pc, #112]	@ (80059c4 <neai_classification+0x710>)
 8005952:	9303      	str	r3, [sp, #12]
 8005954:	1b12      	subs	r2, r2, r4
 8005956:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800595a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800595e:	eb05 0086 	add.w	r0, r5, r6, lsl #2
 8005962:	464a      	mov	r2, r9
 8005964:	f001 fba5 	bl	80070b2 <memcpy>
 8005968:	f1ba 0f01 	cmp.w	sl, #1
 800596c:	9b03      	ldr	r3, [sp, #12]
 800596e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8005972:	f340 817c 	ble.w	8005c6e <neai_classification+0x9ba>
 8005976:	f1ba 0f03 	cmp.w	sl, #3
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	bfd8      	it	le
 800597e:	2100      	movle	r1, #0
 8005980:	dd67      	ble.n	8005a52 <neai_classification+0x79e>
 8005982:	e025      	b.n	80059d0 <neai_classification+0x71c>
 8005984:	20000f6c 	.word	0x20000f6c
 8005988:	00000000 	.word	0x00000000
 800598c:	20000b6c 	.word	0x20000b6c
 8005990:	2000076c 	.word	0x2000076c
 8005994:	3c000000 	.word	0x3c000000
 8005998:	20000d70 	.word	0x20000d70
 800599c:	2000096c 	.word	0x2000096c
 80059a0:	20000770 	.word	0x20000770
 80059a4:	20000fd8 	.word	0x20000fd8
 80059a8:	20000fdc 	.word	0x20000fdc
 80059ac:	20000754 	.word	0x20000754
 80059b0:	20000758 	.word	0x20000758
 80059b4:	20000fe0 	.word	0x20000fe0
 80059b8:	2000075c 	.word	0x2000075c
 80059bc:	2000074c 	.word	0x2000074c
 80059c0:	20000768 	.word	0x20000768
 80059c4:	2000070c 	.word	0x2000070c
 80059c8:	20000f6c 	.word	0x20000f6c
 80059cc:	20000b70 	.word	0x20000b70
 80059d0:	ebc4 7084 	rsb	r0, r4, r4, lsl #30
 80059d4:	0080      	lsls	r0, r0, #2
 80059d6:	f1aa 0104 	sub.w	r1, sl, #4
 80059da:	9003      	str	r0, [sp, #12]
 80059dc:	e9cd a205 	strd	sl, r2, [sp, #20]
 80059e0:	eba4 0009 	sub.w	r0, r4, r9
 80059e4:	f021 0101 	bic.w	r1, r1, #1
 80059e8:	1917      	adds	r7, r2, r4
 80059ea:	0080      	lsls	r0, r0, #2
 80059ec:	f8df c410 	ldr.w	ip, [pc, #1040]	@ 8005e00 <neai_classification+0xb4c>
 80059f0:	9004      	str	r0, [sp, #16]
 80059f2:	3102      	adds	r1, #2
 80059f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80059f8:	f04f 0e00 	mov.w	lr, #0
 80059fc:	9307      	str	r3, [sp, #28]
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	ed9c 6a00 	vldr	s12, [ip]
 8005a04:	eddc 6a01 	vldr	s13, [ip, #4]
 8005a08:	443b      	add	r3, r7
 8005a0a:	eb05 0208 	add.w	r2, r5, r8
 8005a0e:	46ba      	mov	sl, r7
 8005a10:	4618      	mov	r0, r3
 8005a12:	ecf0 7a01 	vldmia	r0!, {s15}
 8005a16:	ed92 7a00 	vldr	s14, [r2]
 8005a1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005a1e:	42b8      	cmp	r0, r7
 8005a20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a24:	ece2 7a01 	vstmia	r2!, {s15}
 8005a28:	ecba 7a01 	vldmia	sl!, {s14}
 8005a2c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a34:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005a38:	d1eb      	bne.n	8005a12 <neai_classification+0x75e>
 8005a3a:	9a04      	ldr	r2, [sp, #16]
 8005a3c:	f10e 0e02 	add.w	lr, lr, #2
 8005a40:	4571      	cmp	r1, lr
 8005a42:	f10c 0c08 	add.w	ip, ip, #8
 8005a46:	eba3 0702 	sub.w	r7, r3, r2
 8005a4a:	d1d8      	bne.n	80059fe <neai_classification+0x74a>
 8005a4c:	e9dd a205 	ldrd	sl, r2, [sp, #20]
 8005a50:	9b07      	ldr	r3, [sp, #28]
 8005a52:	fb01 2204 	mla	r2, r1, r4, r2
 8005a56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005a5a:	4ae9      	ldr	r2, [pc, #932]	@ (8005e00 <neai_classification+0xb4c>)
 8005a5c:	1c77      	adds	r7, r6, #1
 8005a5e:	f106 0c02 	add.w	ip, r6, #2
 8005a62:	f106 0e03 	add.w	lr, r6, #3
 8005a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a6a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005a6e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8005a72:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8005a76:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8005a7a:	ed93 7a00 	vldr	s14, [r3]
 8005a7e:	ecf2 7a01 	vldmia	r2!, {s15}
 8005a82:	eb05 0008 	add.w	r0, r5, r8
 8005a86:	edd0 6a00 	vldr	s13, [r0]
 8005a8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a8e:	2c01      	cmp	r4, #1
 8005a90:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005a94:	ed80 7a00 	vstr	s14, [r0]
 8005a98:	f000 80e4 	beq.w	8005c64 <neai_classification+0x9b0>
 8005a9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005aa0:	edd7 6a00 	vldr	s13, [r7]
 8005aa4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005aa8:	2c02      	cmp	r4, #2
 8005aaa:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005aae:	ed87 7a00 	vstr	s14, [r7]
 8005ab2:	f000 80d7 	beq.w	8005c64 <neai_classification+0x9b0>
 8005ab6:	ed93 7a02 	vldr	s14, [r3, #8]
 8005aba:	eddc 6a00 	vldr	s13, [ip]
 8005abe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ac2:	2c03      	cmp	r4, #3
 8005ac4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005ac8:	ed8c 7a00 	vstr	s14, [ip]
 8005acc:	f000 80ca 	beq.w	8005c64 <neai_classification+0x9b0>
 8005ad0:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ad4:	edde 6a00 	vldr	s13, [lr]
 8005ad8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005adc:	2c04      	cmp	r4, #4
 8005ade:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005ae2:	ed8e 7a00 	vstr	s14, [lr]
 8005ae6:	f000 80bd 	beq.w	8005c64 <neai_classification+0x9b0>
 8005aea:	ed93 7a04 	vldr	s14, [r3, #16]
 8005aee:	1d30      	adds	r0, r6, #4
 8005af0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005af4:	edd0 6a00 	vldr	s13, [r0]
 8005af8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005afc:	2c05      	cmp	r4, #5
 8005afe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b02:	ed80 7a00 	vstr	s14, [r0]
 8005b06:	f000 80ad 	beq.w	8005c64 <neai_classification+0x9b0>
 8005b0a:	ed93 7a05 	vldr	s14, [r3, #20]
 8005b0e:	1d70      	adds	r0, r6, #5
 8005b10:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005b14:	edd0 6a00 	vldr	s13, [r0]
 8005b18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b1c:	2c06      	cmp	r4, #6
 8005b1e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b22:	ed80 7a00 	vstr	s14, [r0]
 8005b26:	f000 809d 	beq.w	8005c64 <neai_classification+0x9b0>
 8005b2a:	ed93 7a06 	vldr	s14, [r3, #24]
 8005b2e:	1db0      	adds	r0, r6, #6
 8005b30:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005b34:	edd0 6a00 	vldr	s13, [r0]
 8005b38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b3c:	2c07      	cmp	r4, #7
 8005b3e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b42:	ed80 7a00 	vstr	s14, [r0]
 8005b46:	f000 808d 	beq.w	8005c64 <neai_classification+0x9b0>
 8005b4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8005b4e:	1df0      	adds	r0, r6, #7
 8005b50:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005b54:	edd0 6a00 	vldr	s13, [r0]
 8005b58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b5c:	2c08      	cmp	r4, #8
 8005b5e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b62:	ed80 7a00 	vstr	s14, [r0]
 8005b66:	d07d      	beq.n	8005c64 <neai_classification+0x9b0>
 8005b68:	ed93 7a08 	vldr	s14, [r3, #32]
 8005b6c:	f106 0008 	add.w	r0, r6, #8
 8005b70:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005b74:	edd0 6a00 	vldr	s13, [r0]
 8005b78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b7c:	2c09      	cmp	r4, #9
 8005b7e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b82:	ed80 7a00 	vstr	s14, [r0]
 8005b86:	d06d      	beq.n	8005c64 <neai_classification+0x9b0>
 8005b88:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005b8c:	f106 0009 	add.w	r0, r6, #9
 8005b90:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005b94:	edd0 6a00 	vldr	s13, [r0]
 8005b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b9c:	2c0a      	cmp	r4, #10
 8005b9e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005ba2:	ed80 7a00 	vstr	s14, [r0]
 8005ba6:	d05d      	beq.n	8005c64 <neai_classification+0x9b0>
 8005ba8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005bac:	f106 000a 	add.w	r0, r6, #10
 8005bb0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005bb4:	edd0 6a00 	vldr	s13, [r0]
 8005bb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bbc:	2c0b      	cmp	r4, #11
 8005bbe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005bc2:	ed80 7a00 	vstr	s14, [r0]
 8005bc6:	d04d      	beq.n	8005c64 <neai_classification+0x9b0>
 8005bc8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8005bcc:	f106 000b 	add.w	r0, r6, #11
 8005bd0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005bd4:	edd0 6a00 	vldr	s13, [r0]
 8005bd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bdc:	2c0c      	cmp	r4, #12
 8005bde:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005be2:	ed80 7a00 	vstr	s14, [r0]
 8005be6:	d03d      	beq.n	8005c64 <neai_classification+0x9b0>
 8005be8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8005bec:	f106 000c 	add.w	r0, r6, #12
 8005bf0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005bf4:	edd0 6a00 	vldr	s13, [r0]
 8005bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bfc:	2c0d      	cmp	r4, #13
 8005bfe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005c02:	ed80 7a00 	vstr	s14, [r0]
 8005c06:	d02d      	beq.n	8005c64 <neai_classification+0x9b0>
 8005c08:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8005c0c:	f106 000d 	add.w	r0, r6, #13
 8005c10:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005c14:	edd0 6a00 	vldr	s13, [r0]
 8005c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c1c:	2c0e      	cmp	r4, #14
 8005c1e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005c22:	ed80 7a00 	vstr	s14, [r0]
 8005c26:	d01d      	beq.n	8005c64 <neai_classification+0x9b0>
 8005c28:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8005c2c:	f106 000e 	add.w	r0, r6, #14
 8005c30:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005c34:	edd0 6a00 	vldr	s13, [r0]
 8005c38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c3c:	2c0f      	cmp	r4, #15
 8005c3e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005c42:	ed80 7a00 	vstr	s14, [r0]
 8005c46:	d00d      	beq.n	8005c64 <neai_classification+0x9b0>
 8005c48:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8005c4c:	f106 000f 	add.w	r0, r6, #15
 8005c50:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c58:	ed90 7a00 	vldr	s14, [r0]
 8005c5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c60:	edc0 7a00 	vstr	s15, [r0]
 8005c64:	3101      	adds	r1, #1
 8005c66:	458a      	cmp	sl, r1
 8005c68:	444b      	add	r3, r9
 8005c6a:	f73f af06 	bgt.w	8005a7a <neai_classification+0x7c6>
 8005c6e:	eb05 0308 	add.w	r3, r5, r8
 8005c72:	ed93 0a00 	vldr	s0, [r3]
 8005c76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7e:	f340 8233 	ble.w	80060e8 <neai_classification+0xe34>
 8005c82:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8005e04 <neai_classification+0xb50>
 8005c86:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005c8a:	44a8      	add	r8, r5
 8005c8c:	2c01      	cmp	r4, #1
 8005c8e:	ed88 0a00 	vstr	s0, [r8]
 8005c92:	f000 815e 	beq.w	8005f52 <neai_classification+0xc9e>
 8005c96:	1c73      	adds	r3, r6, #1
 8005c98:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005c9c:	ed92 0a00 	vldr	s0, [r2]
 8005ca0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca8:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005cac:	f340 8229 	ble.w	8006102 <neai_classification+0xe4e>
 8005cb0:	eddf 7a54 	vldr	s15, [pc, #336]	@ 8005e04 <neai_classification+0xb50>
 8005cb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005cb8:	19eb      	adds	r3, r5, r7
 8005cba:	2c02      	cmp	r4, #2
 8005cbc:	ed83 0a00 	vstr	s0, [r3]
 8005cc0:	f000 8147 	beq.w	8005f52 <neai_classification+0xc9e>
 8005cc4:	1cb3      	adds	r3, r6, #2
 8005cc6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005cca:	ed92 0a00 	vldr	s0, [r2]
 8005cce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd6:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005cda:	f340 821f 	ble.w	800611c <neai_classification+0xe68>
 8005cde:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8005e04 <neai_classification+0xb50>
 8005ce2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005ce6:	19eb      	adds	r3, r5, r7
 8005ce8:	2c03      	cmp	r4, #3
 8005cea:	ed83 0a00 	vstr	s0, [r3]
 8005cee:	f000 8130 	beq.w	8005f52 <neai_classification+0xc9e>
 8005cf2:	1cf3      	adds	r3, r6, #3
 8005cf4:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005cf8:	ed92 0a00 	vldr	s0, [r2]
 8005cfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d04:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005d08:	f340 8222 	ble.w	8006150 <neai_classification+0xe9c>
 8005d0c:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8005e04 <neai_classification+0xb50>
 8005d10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d14:	19eb      	adds	r3, r5, r7
 8005d16:	2c04      	cmp	r4, #4
 8005d18:	ed83 0a00 	vstr	s0, [r3]
 8005d1c:	f000 8119 	beq.w	8005f52 <neai_classification+0xc9e>
 8005d20:	1d33      	adds	r3, r6, #4
 8005d22:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005d26:	ed92 0a00 	vldr	s0, [r2]
 8005d2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d32:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005d36:	f340 81fe 	ble.w	8006136 <neai_classification+0xe82>
 8005d3a:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8005e04 <neai_classification+0xb50>
 8005d3e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d42:	19eb      	adds	r3, r5, r7
 8005d44:	2c05      	cmp	r4, #5
 8005d46:	ed83 0a00 	vstr	s0, [r3]
 8005d4a:	f000 8102 	beq.w	8005f52 <neai_classification+0xc9e>
 8005d4e:	1d73      	adds	r3, r6, #5
 8005d50:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005d54:	ed92 0a00 	vldr	s0, [r2]
 8005d58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d60:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005d64:	f340 820e 	ble.w	8006184 <neai_classification+0xed0>
 8005d68:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8005e04 <neai_classification+0xb50>
 8005d6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d70:	19eb      	adds	r3, r5, r7
 8005d72:	2c06      	cmp	r4, #6
 8005d74:	ed83 0a00 	vstr	s0, [r3]
 8005d78:	f000 80eb 	beq.w	8005f52 <neai_classification+0xc9e>
 8005d7c:	1db3      	adds	r3, r6, #6
 8005d7e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005d82:	ed92 0a00 	vldr	s0, [r2]
 8005d86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8e:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005d92:	f340 81ea 	ble.w	800616a <neai_classification+0xeb6>
 8005d96:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8005e04 <neai_classification+0xb50>
 8005d9a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d9e:	19eb      	adds	r3, r5, r7
 8005da0:	2c07      	cmp	r4, #7
 8005da2:	ed83 0a00 	vstr	s0, [r3]
 8005da6:	f000 80d4 	beq.w	8005f52 <neai_classification+0xc9e>
 8005daa:	1df3      	adds	r3, r6, #7
 8005dac:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005db0:	ed92 0a00 	vldr	s0, [r2]
 8005db4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbc:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005dc0:	f340 8185 	ble.w	80060ce <neai_classification+0xe1a>
 8005dc4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8005e04 <neai_classification+0xb50>
 8005dc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005dcc:	19eb      	adds	r3, r5, r7
 8005dce:	2c08      	cmp	r4, #8
 8005dd0:	ed83 0a00 	vstr	s0, [r3]
 8005dd4:	f000 80bd 	beq.w	8005f52 <neai_classification+0xc9e>
 8005dd8:	f106 0308 	add.w	r3, r6, #8
 8005ddc:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005de0:	ed92 0a00 	vldr	s0, [r2]
 8005de4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005df0:	f340 81d5 	ble.w	800619e <neai_classification+0xeea>
 8005df4:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8005e04 <neai_classification+0xb50>
 8005df8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005dfc:	e004      	b.n	8005e08 <neai_classification+0xb54>
 8005dfe:	bf00      	nop
 8005e00:	20000fe0 	.word	0x20000fe0
 8005e04:	3f867d56 	.word	0x3f867d56
 8005e08:	19eb      	adds	r3, r5, r7
 8005e0a:	2c09      	cmp	r4, #9
 8005e0c:	ed83 0a00 	vstr	s0, [r3]
 8005e10:	f000 809f 	beq.w	8005f52 <neai_classification+0xc9e>
 8005e14:	f106 0309 	add.w	r3, r6, #9
 8005e18:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005e1c:	ed92 0a00 	vldr	s0, [r2]
 8005e20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e28:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005e2c:	f340 81c4 	ble.w	80061b8 <neai_classification+0xf04>
 8005e30:	ed5f 7a0c 	vldr	s15, [pc, #-48]	@ 8005e04 <neai_classification+0xb50>
 8005e34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e38:	19eb      	adds	r3, r5, r7
 8005e3a:	2c0a      	cmp	r4, #10
 8005e3c:	ed83 0a00 	vstr	s0, [r3]
 8005e40:	f000 8087 	beq.w	8005f52 <neai_classification+0xc9e>
 8005e44:	f106 030a 	add.w	r3, r6, #10
 8005e48:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005e4c:	ed92 0a00 	vldr	s0, [r2]
 8005e50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e58:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005e5c:	f340 81b9 	ble.w	80061d2 <neai_classification+0xf1e>
 8005e60:	ed5f 7a18 	vldr	s15, [pc, #-96]	@ 8005e04 <neai_classification+0xb50>
 8005e64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e68:	19eb      	adds	r3, r5, r7
 8005e6a:	2c0b      	cmp	r4, #11
 8005e6c:	ed83 0a00 	vstr	s0, [r3]
 8005e70:	d06f      	beq.n	8005f52 <neai_classification+0xc9e>
 8005e72:	f106 030b 	add.w	r3, r6, #11
 8005e76:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005e7a:	ed92 0a00 	vldr	s0, [r2]
 8005e7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e86:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005e8a:	f340 81e3 	ble.w	8006254 <neai_classification+0xfa0>
 8005e8e:	ed5f 7a23 	vldr	s15, [pc, #-140]	@ 8005e04 <neai_classification+0xb50>
 8005e92:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e96:	19eb      	adds	r3, r5, r7
 8005e98:	2c0c      	cmp	r4, #12
 8005e9a:	ed83 0a00 	vstr	s0, [r3]
 8005e9e:	d058      	beq.n	8005f52 <neai_classification+0xc9e>
 8005ea0:	f106 030c 	add.w	r3, r6, #12
 8005ea4:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005ea8:	ed92 0a00 	vldr	s0, [r2]
 8005eac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005eb8:	f340 81bf 	ble.w	800623a <neai_classification+0xf86>
 8005ebc:	ed5f 7a2f 	vldr	s15, [pc, #-188]	@ 8005e04 <neai_classification+0xb50>
 8005ec0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005ec4:	19eb      	adds	r3, r5, r7
 8005ec6:	2c0d      	cmp	r4, #13
 8005ec8:	ed83 0a00 	vstr	s0, [r3]
 8005ecc:	d041      	beq.n	8005f52 <neai_classification+0xc9e>
 8005ece:	f106 030d 	add.w	r3, r6, #13
 8005ed2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005ed6:	ed92 0a00 	vldr	s0, [r2]
 8005eda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee2:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005ee6:	f340 819b 	ble.w	8006220 <neai_classification+0xf6c>
 8005eea:	ed5f 7a3a 	vldr	s15, [pc, #-232]	@ 8005e04 <neai_classification+0xb50>
 8005eee:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005ef2:	19eb      	adds	r3, r5, r7
 8005ef4:	2c0e      	cmp	r4, #14
 8005ef6:	ed83 0a00 	vstr	s0, [r3]
 8005efa:	d02a      	beq.n	8005f52 <neai_classification+0xc9e>
 8005efc:	f106 030e 	add.w	r3, r6, #14
 8005f00:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005f04:	ed92 0a00 	vldr	s0, [r2]
 8005f08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f10:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005f14:	f340 8177 	ble.w	8006206 <neai_classification+0xf52>
 8005f18:	ed5f 7a46 	vldr	s15, [pc, #-280]	@ 8005e04 <neai_classification+0xb50>
 8005f1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005f20:	19eb      	adds	r3, r5, r7
 8005f22:	2c0f      	cmp	r4, #15
 8005f24:	ed83 0a00 	vstr	s0, [r3]
 8005f28:	d013      	beq.n	8005f52 <neai_classification+0xc9e>
 8005f2a:	360f      	adds	r6, #15
 8005f2c:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8005f30:	ed93 0a00 	vldr	s0, [r3]
 8005f34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3c:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8005f40:	f340 8154 	ble.w	80061ec <neai_classification+0xf38>
 8005f44:	ed5f 7a51 	vldr	s15, [pc, #-324]	@ 8005e04 <neai_classification+0xb50>
 8005f48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005f4c:	442e      	add	r6, r5
 8005f4e:	ed86 0a00 	vstr	s0, [r6]
 8005f52:	4adc      	ldr	r2, [pc, #880]	@ (80062c4 <neai_classification+0x1010>)
 8005f54:	4bdc      	ldr	r3, [pc, #880]	@ (80062c8 <neai_classification+0x1014>)
 8005f56:	6810      	ldr	r0, [r2, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 8005f5e:	edd1 5a00 	vldr	s11, [r1]
 8005f62:	edcb 5a00 	vstr	s11, [fp]
 8005f66:	ed91 6a01 	vldr	s12, [r1, #4]
 8005f6a:	ed8b 6a01 	vstr	s12, [fp, #4]
 8005f6e:	edd1 6a02 	vldr	s13, [r1, #8]
 8005f72:	edcb 6a02 	vstr	s13, [fp, #8]
 8005f76:	ed91 8a03 	vldr	s16, [r1, #12]
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	ed8b 8a03 	vstr	s16, [fp, #12]
 8005f80:	dd29      	ble.n	8005fd6 <neai_classification+0xd22>
 8005f82:	4ad2      	ldr	r2, [pc, #840]	@ (80062cc <neai_classification+0x1018>)
 8005f84:	6810      	ldr	r0, [r2, #0]
 8005f86:	4ad2      	ldr	r2, [pc, #840]	@ (80062d0 <neai_classification+0x101c>)
 8005f88:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005f8c:	ed93 7a00 	vldr	s14, [r3]
 8005f90:	ecf2 7a01 	vldmia	r2!, {s15}
 8005f94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f98:	3310      	adds	r3, #16
 8005f9a:	ee75 5a87 	vadd.f32	s11, s11, s14
 8005f9e:	4299      	cmp	r1, r3
 8005fa0:	edcb 5a00 	vstr	s11, [fp]
 8005fa4:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005fa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005fac:	ee36 6a07 	vadd.f32	s12, s12, s14
 8005fb0:	ed8b 6a01 	vstr	s12, [fp, #4]
 8005fb4:	ed13 7a02 	vldr	s14, [r3, #-8]
 8005fb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005fbc:	ee76 6a87 	vadd.f32	s13, s13, s14
 8005fc0:	edcb 6a02 	vstr	s13, [fp, #8]
 8005fc4:	ed13 7a01 	vldr	s14, [r3, #-4]
 8005fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fcc:	ee38 8a27 	vadd.f32	s16, s16, s15
 8005fd0:	ed8b 8a03 	vstr	s16, [fp, #12]
 8005fd4:	d1da      	bne.n	8005f8c <neai_classification+0xcd8>
 8005fd6:	eef4 5ac6 	vcmpe.f32	s11, s12
 8005fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fde:	bf58      	it	pl
 8005fe0:	eeb0 6a65 	vmovpl.f32	s12, s11
 8005fe4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8005fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fec:	bf58      	it	pl
 8005fee:	eef0 6a46 	vmovpl.f32	s13, s12
 8005ff2:	eef4 6ac8 	vcmpe.f32	s13, s16
 8005ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffa:	eddf 8ab6 	vldr	s17, [pc, #728]	@ 80062d4 <neai_classification+0x1020>
 8005ffe:	bf58      	it	pl
 8006000:	eeb0 8a66 	vmovpl.f32	s16, s13
 8006004:	465c      	mov	r4, fp
 8006006:	f10b 0510 	add.w	r5, fp, #16
 800600a:	eeb1 9a04 	vmov.f32	s18, #20	@ 0x40a00000  5.0
 800600e:	ed94 0a00 	vldr	s0, [r4]
 8006012:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006016:	ee20 0a09 	vmul.f32	s0, s0, s18
 800601a:	f002 fe8d 	bl	8008d38 <expf>
 800601e:	eca4 0a01 	vstmia	r4!, {s0}
 8006022:	42a5      	cmp	r5, r4
 8006024:	ee78 8a80 	vadd.f32	s17, s17, s0
 8006028:	d1f1      	bne.n	800600e <neai_classification+0xd5a>
 800602a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800602e:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8006032:	9a02      	ldr	r2, [sp, #8]
 8006034:	ed9b 6a00 	vldr	s12, [fp]
 8006038:	ed9b 7a01 	vldr	s14, [fp, #4]
 800603c:	eddb 6a02 	vldr	s13, [fp, #8]
 8006040:	eddb 5a03 	vldr	s11, [fp, #12]
 8006044:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006048:	ee27 6a86 	vmul.f32	s12, s15, s12
 800604c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006050:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8006054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006058:	ed8b 7a01 	vstr	s14, [fp, #4]
 800605c:	bfd8      	it	le
 800605e:	eeb0 7a46 	vmovle.f32	s14, s12
 8006062:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006066:	bfd4      	ite	le
 8006068:	2301      	movle	r3, #1
 800606a:	2302      	movgt	r3, #2
 800606c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006074:	edcb 6a02 	vstr	s13, [fp, #8]
 8006078:	bf58      	it	pl
 800607a:	eef0 6a47 	vmovpl.f32	s13, s14
 800607e:	eef4 7a66 	vcmp.f32	s15, s13
 8006082:	bf48      	it	mi
 8006084:	2303      	movmi	r3, #3
 8006086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608a:	bfc8      	it	gt
 800608c:	2304      	movgt	r3, #4
 800608e:	ed8b 6a00 	vstr	s12, [fp]
 8006092:	edcb 7a03 	vstr	s15, [fp, #12]
 8006096:	8013      	strh	r3, [r2, #0]
 8006098:	9801      	ldr	r0, [sp, #4]
 800609a:	b009      	add	sp, #36	@ 0x24
 800609c:	ecbd 8b06 	vpop	{d8-d10}
 80060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	ee08 3a10 	vmov	s16, r3
 80060a8:	eeba 8acc 	vcvt.f32.s32	s16, s16, #8
 80060ac:	eeb0 0a48 	vmov.f32	s0, s16
 80060b0:	f002 fe78 	bl	8008da4 <logf>
 80060b4:	ee28 8a00 	vmul.f32	s16, s16, s0
 80060b8:	4545      	cmp	r5, r8
 80060ba:	ee39 9a08 	vadd.f32	s18, s18, s16
 80060be:	f04f 0301 	mov.w	r3, #1
 80060c2:	eeb0 7a68 	vmov.f32	s14, s17
 80060c6:	f47f aaf1 	bne.w	80056ac <neai_classification+0x3f8>
 80060ca:	f7ff bafc 	b.w	80056c6 <neai_classification+0x412>
 80060ce:	f002 fe33 	bl	8008d38 <expf>
 80060d2:	eddf 7a81 	vldr	s15, [pc, #516]	@ 80062d8 <neai_classification+0x1024>
 80060d6:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80062dc <neai_classification+0x1028>
 80060da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80060de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80060e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80060e6:	e671      	b.n	8005dcc <neai_classification+0xb18>
 80060e8:	f002 fe26 	bl	8008d38 <expf>
 80060ec:	eddf 7a7a 	vldr	s15, [pc, #488]	@ 80062d8 <neai_classification+0x1024>
 80060f0:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80062dc <neai_classification+0x1028>
 80060f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80060f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80060fc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006100:	e5c3      	b.n	8005c8a <neai_classification+0x9d6>
 8006102:	f002 fe19 	bl	8008d38 <expf>
 8006106:	eddf 7a74 	vldr	s15, [pc, #464]	@ 80062d8 <neai_classification+0x1024>
 800610a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80062dc <neai_classification+0x1028>
 800610e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006112:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006116:	ee20 0a07 	vmul.f32	s0, s0, s14
 800611a:	e5cd      	b.n	8005cb8 <neai_classification+0xa04>
 800611c:	f002 fe0c 	bl	8008d38 <expf>
 8006120:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 80062d8 <neai_classification+0x1024>
 8006124:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80062dc <neai_classification+0x1028>
 8006128:	ee20 0a27 	vmul.f32	s0, s0, s15
 800612c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006130:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006134:	e5d7      	b.n	8005ce6 <neai_classification+0xa32>
 8006136:	f002 fdff 	bl	8008d38 <expf>
 800613a:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80062d8 <neai_classification+0x1024>
 800613e:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80062dc <neai_classification+0x1028>
 8006142:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006146:	ee30 0a67 	vsub.f32	s0, s0, s15
 800614a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800614e:	e5f8      	b.n	8005d42 <neai_classification+0xa8e>
 8006150:	f002 fdf2 	bl	8008d38 <expf>
 8006154:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80062d8 <neai_classification+0x1024>
 8006158:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80062dc <neai_classification+0x1028>
 800615c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006160:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006164:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006168:	e5d4      	b.n	8005d14 <neai_classification+0xa60>
 800616a:	f002 fde5 	bl	8008d38 <expf>
 800616e:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 80062d8 <neai_classification+0x1024>
 8006172:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80062dc <neai_classification+0x1028>
 8006176:	ee20 0a27 	vmul.f32	s0, s0, s15
 800617a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800617e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006182:	e60c      	b.n	8005d9e <neai_classification+0xaea>
 8006184:	f002 fdd8 	bl	8008d38 <expf>
 8006188:	eddf 7a53 	vldr	s15, [pc, #332]	@ 80062d8 <neai_classification+0x1024>
 800618c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80062dc <neai_classification+0x1028>
 8006190:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006194:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006198:	ee20 0a07 	vmul.f32	s0, s0, s14
 800619c:	e5e8      	b.n	8005d70 <neai_classification+0xabc>
 800619e:	f002 fdcb 	bl	8008d38 <expf>
 80061a2:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80062d8 <neai_classification+0x1024>
 80061a6:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80062dc <neai_classification+0x1028>
 80061aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80061ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80061b6:	e627      	b.n	8005e08 <neai_classification+0xb54>
 80061b8:	f002 fdbe 	bl	8008d38 <expf>
 80061bc:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80062d8 <neai_classification+0x1024>
 80061c0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80062dc <neai_classification+0x1028>
 80061c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80061c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80061d0:	e632      	b.n	8005e38 <neai_classification+0xb84>
 80061d2:	f002 fdb1 	bl	8008d38 <expf>
 80061d6:	eddf 7a40 	vldr	s15, [pc, #256]	@ 80062d8 <neai_classification+0x1024>
 80061da:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80062dc <neai_classification+0x1028>
 80061de:	ee20 0a27 	vmul.f32	s0, s0, s15
 80061e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80061ea:	e63d      	b.n	8005e68 <neai_classification+0xbb4>
 80061ec:	f002 fda4 	bl	8008d38 <expf>
 80061f0:	eddf 7a39 	vldr	s15, [pc, #228]	@ 80062d8 <neai_classification+0x1024>
 80061f4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80062dc <neai_classification+0x1028>
 80061f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80061fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006200:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006204:	e6a2      	b.n	8005f4c <neai_classification+0xc98>
 8006206:	f002 fd97 	bl	8008d38 <expf>
 800620a:	eddf 7a33 	vldr	s15, [pc, #204]	@ 80062d8 <neai_classification+0x1024>
 800620e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80062dc <neai_classification+0x1028>
 8006212:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006216:	ee30 0a67 	vsub.f32	s0, s0, s15
 800621a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800621e:	e67f      	b.n	8005f20 <neai_classification+0xc6c>
 8006220:	f002 fd8a 	bl	8008d38 <expf>
 8006224:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80062d8 <neai_classification+0x1024>
 8006228:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80062dc <neai_classification+0x1028>
 800622c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006230:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006234:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006238:	e65b      	b.n	8005ef2 <neai_classification+0xc3e>
 800623a:	f002 fd7d 	bl	8008d38 <expf>
 800623e:	eddf 7a26 	vldr	s15, [pc, #152]	@ 80062d8 <neai_classification+0x1024>
 8006242:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80062dc <neai_classification+0x1028>
 8006246:	ee20 0a27 	vmul.f32	s0, s0, s15
 800624a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800624e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006252:	e637      	b.n	8005ec4 <neai_classification+0xc10>
 8006254:	f002 fd70 	bl	8008d38 <expf>
 8006258:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80062d8 <neai_classification+0x1024>
 800625c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80062dc <neai_classification+0x1028>
 8006260:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006264:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006268:	ee20 0a07 	vmul.f32	s0, s0, s14
 800626c:	e613      	b.n	8005e96 <neai_classification+0xbe2>
 800626e:	f002 fdc7 	bl	8008e00 <sqrtf>
 8006272:	eef0 8a40 	vmov.f32	s17, s0
 8006276:	f7ff bae3 	b.w	8005840 <neai_classification+0x58c>
 800627a:	f002 fdc1 	bl	8008e00 <sqrtf>
 800627e:	454c      	cmp	r4, r9
 8006280:	ed09 0a01 	vstr	s0, [r9, #-4]
 8006284:	f47f ab05 	bne.w	8005892 <neai_classification+0x5de>
 8006288:	f7ff bb11 	b.w	80058ae <neai_classification+0x5fa>
 800628c:	f002 fdb8 	bl	8008e00 <sqrtf>
 8006290:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8006294:	eeb1 8a40 	vneg.f32	s16, s0
 8006298:	ee28 0a89 	vmul.f32	s0, s17, s18
 800629c:	f7ff bace 	b.w	800583c <neai_classification+0x588>
 80062a0:	f002 fdae 	bl	8008e00 <sqrtf>
 80062a4:	eef0 7a40 	vmov.f32	s15, s0
 80062a8:	f7ff b9d4 	b.w	8005654 <neai_classification+0x3a0>
 80062ac:	f002 fda8 	bl	8008e00 <sqrtf>
 80062b0:	eef0 7a40 	vmov.f32	s15, s0
 80062b4:	f7ff b8a8 	b.w	8005408 <neai_classification+0x154>
 80062b8:	f002 fda2 	bl	8008e00 <sqrtf>
 80062bc:	eeb0 7a40 	vmov.f32	s14, s0
 80062c0:	f7ff b8dc 	b.w	800547c <neai_classification+0x1c8>
 80062c4:	20000760 	.word	0x20000760
 80062c8:	20000764 	.word	0x20000764
 80062cc:	2000075c 	.word	0x2000075c
 80062d0:	2000070c 	.word	0x2000070c
 80062d4:	00000000 	.word	0x00000000
 80062d8:	3fd62eb2 	.word	0x3fd62eb2
 80062dc:	3f867d56 	.word	0x3f867d56

080062e0 <__cvt>:
 80062e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e4:	ec57 6b10 	vmov	r6, r7, d0
 80062e8:	2f00      	cmp	r7, #0
 80062ea:	460c      	mov	r4, r1
 80062ec:	4619      	mov	r1, r3
 80062ee:	463b      	mov	r3, r7
 80062f0:	bfbb      	ittet	lt
 80062f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80062f6:	461f      	movlt	r7, r3
 80062f8:	2300      	movge	r3, #0
 80062fa:	232d      	movlt	r3, #45	@ 0x2d
 80062fc:	700b      	strb	r3, [r1, #0]
 80062fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006300:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006304:	4691      	mov	r9, r2
 8006306:	f023 0820 	bic.w	r8, r3, #32
 800630a:	bfbc      	itt	lt
 800630c:	4632      	movlt	r2, r6
 800630e:	4616      	movlt	r6, r2
 8006310:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006314:	d005      	beq.n	8006322 <__cvt+0x42>
 8006316:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800631a:	d100      	bne.n	800631e <__cvt+0x3e>
 800631c:	3401      	adds	r4, #1
 800631e:	2102      	movs	r1, #2
 8006320:	e000      	b.n	8006324 <__cvt+0x44>
 8006322:	2103      	movs	r1, #3
 8006324:	ab03      	add	r3, sp, #12
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	ab02      	add	r3, sp, #8
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	ec47 6b10 	vmov	d0, r6, r7
 8006330:	4653      	mov	r3, sl
 8006332:	4622      	mov	r2, r4
 8006334:	f000 ff54 	bl	80071e0 <_dtoa_r>
 8006338:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800633c:	4605      	mov	r5, r0
 800633e:	d119      	bne.n	8006374 <__cvt+0x94>
 8006340:	f019 0f01 	tst.w	r9, #1
 8006344:	d00e      	beq.n	8006364 <__cvt+0x84>
 8006346:	eb00 0904 	add.w	r9, r0, r4
 800634a:	2200      	movs	r2, #0
 800634c:	2300      	movs	r3, #0
 800634e:	4630      	mov	r0, r6
 8006350:	4639      	mov	r1, r7
 8006352:	f7fa fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006356:	b108      	cbz	r0, 800635c <__cvt+0x7c>
 8006358:	f8cd 900c 	str.w	r9, [sp, #12]
 800635c:	2230      	movs	r2, #48	@ 0x30
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	454b      	cmp	r3, r9
 8006362:	d31e      	bcc.n	80063a2 <__cvt+0xc2>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006368:	1b5b      	subs	r3, r3, r5
 800636a:	4628      	mov	r0, r5
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	b004      	add	sp, #16
 8006370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006374:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006378:	eb00 0904 	add.w	r9, r0, r4
 800637c:	d1e5      	bne.n	800634a <__cvt+0x6a>
 800637e:	7803      	ldrb	r3, [r0, #0]
 8006380:	2b30      	cmp	r3, #48	@ 0x30
 8006382:	d10a      	bne.n	800639a <__cvt+0xba>
 8006384:	2200      	movs	r2, #0
 8006386:	2300      	movs	r3, #0
 8006388:	4630      	mov	r0, r6
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006390:	b918      	cbnz	r0, 800639a <__cvt+0xba>
 8006392:	f1c4 0401 	rsb	r4, r4, #1
 8006396:	f8ca 4000 	str.w	r4, [sl]
 800639a:	f8da 3000 	ldr.w	r3, [sl]
 800639e:	4499      	add	r9, r3
 80063a0:	e7d3      	b.n	800634a <__cvt+0x6a>
 80063a2:	1c59      	adds	r1, r3, #1
 80063a4:	9103      	str	r1, [sp, #12]
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e7d9      	b.n	800635e <__cvt+0x7e>

080063aa <__exponent>:
 80063aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ac:	2900      	cmp	r1, #0
 80063ae:	bfba      	itte	lt
 80063b0:	4249      	neglt	r1, r1
 80063b2:	232d      	movlt	r3, #45	@ 0x2d
 80063b4:	232b      	movge	r3, #43	@ 0x2b
 80063b6:	2909      	cmp	r1, #9
 80063b8:	7002      	strb	r2, [r0, #0]
 80063ba:	7043      	strb	r3, [r0, #1]
 80063bc:	dd29      	ble.n	8006412 <__exponent+0x68>
 80063be:	f10d 0307 	add.w	r3, sp, #7
 80063c2:	461d      	mov	r5, r3
 80063c4:	270a      	movs	r7, #10
 80063c6:	461a      	mov	r2, r3
 80063c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80063cc:	fb07 1416 	mls	r4, r7, r6, r1
 80063d0:	3430      	adds	r4, #48	@ 0x30
 80063d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063d6:	460c      	mov	r4, r1
 80063d8:	2c63      	cmp	r4, #99	@ 0x63
 80063da:	f103 33ff 	add.w	r3, r3, #4294967295
 80063de:	4631      	mov	r1, r6
 80063e0:	dcf1      	bgt.n	80063c6 <__exponent+0x1c>
 80063e2:	3130      	adds	r1, #48	@ 0x30
 80063e4:	1e94      	subs	r4, r2, #2
 80063e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063ea:	1c41      	adds	r1, r0, #1
 80063ec:	4623      	mov	r3, r4
 80063ee:	42ab      	cmp	r3, r5
 80063f0:	d30a      	bcc.n	8006408 <__exponent+0x5e>
 80063f2:	f10d 0309 	add.w	r3, sp, #9
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	42ac      	cmp	r4, r5
 80063fa:	bf88      	it	hi
 80063fc:	2300      	movhi	r3, #0
 80063fe:	3302      	adds	r3, #2
 8006400:	4403      	add	r3, r0
 8006402:	1a18      	subs	r0, r3, r0
 8006404:	b003      	add	sp, #12
 8006406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006408:	f813 6b01 	ldrb.w	r6, [r3], #1
 800640c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006410:	e7ed      	b.n	80063ee <__exponent+0x44>
 8006412:	2330      	movs	r3, #48	@ 0x30
 8006414:	3130      	adds	r1, #48	@ 0x30
 8006416:	7083      	strb	r3, [r0, #2]
 8006418:	70c1      	strb	r1, [r0, #3]
 800641a:	1d03      	adds	r3, r0, #4
 800641c:	e7f1      	b.n	8006402 <__exponent+0x58>
	...

08006420 <_printf_float>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	b08d      	sub	sp, #52	@ 0x34
 8006426:	460c      	mov	r4, r1
 8006428:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800642c:	4616      	mov	r6, r2
 800642e:	461f      	mov	r7, r3
 8006430:	4605      	mov	r5, r0
 8006432:	f000 fdc7 	bl	8006fc4 <_localeconv_r>
 8006436:	6803      	ldr	r3, [r0, #0]
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	4618      	mov	r0, r3
 800643c:	f7f9 ff18 	bl	8000270 <strlen>
 8006440:	2300      	movs	r3, #0
 8006442:	930a      	str	r3, [sp, #40]	@ 0x28
 8006444:	f8d8 3000 	ldr.w	r3, [r8]
 8006448:	9005      	str	r0, [sp, #20]
 800644a:	3307      	adds	r3, #7
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	f103 0208 	add.w	r2, r3, #8
 8006454:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006458:	f8d4 b000 	ldr.w	fp, [r4]
 800645c:	f8c8 2000 	str.w	r2, [r8]
 8006460:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006464:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006468:	9307      	str	r3, [sp, #28]
 800646a:	f8cd 8018 	str.w	r8, [sp, #24]
 800646e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006476:	4b9c      	ldr	r3, [pc, #624]	@ (80066e8 <_printf_float+0x2c8>)
 8006478:	f04f 32ff 	mov.w	r2, #4294967295
 800647c:	f7fa fb56 	bl	8000b2c <__aeabi_dcmpun>
 8006480:	bb70      	cbnz	r0, 80064e0 <_printf_float+0xc0>
 8006482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006486:	4b98      	ldr	r3, [pc, #608]	@ (80066e8 <_printf_float+0x2c8>)
 8006488:	f04f 32ff 	mov.w	r2, #4294967295
 800648c:	f7fa fb30 	bl	8000af0 <__aeabi_dcmple>
 8006490:	bb30      	cbnz	r0, 80064e0 <_printf_float+0xc0>
 8006492:	2200      	movs	r2, #0
 8006494:	2300      	movs	r3, #0
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7fa fb1f 	bl	8000adc <__aeabi_dcmplt>
 800649e:	b110      	cbz	r0, 80064a6 <_printf_float+0x86>
 80064a0:	232d      	movs	r3, #45	@ 0x2d
 80064a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a6:	4a91      	ldr	r2, [pc, #580]	@ (80066ec <_printf_float+0x2cc>)
 80064a8:	4b91      	ldr	r3, [pc, #580]	@ (80066f0 <_printf_float+0x2d0>)
 80064aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064ae:	bf94      	ite	ls
 80064b0:	4690      	movls	r8, r2
 80064b2:	4698      	movhi	r8, r3
 80064b4:	2303      	movs	r3, #3
 80064b6:	6123      	str	r3, [r4, #16]
 80064b8:	f02b 0304 	bic.w	r3, fp, #4
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	f04f 0900 	mov.w	r9, #0
 80064c2:	9700      	str	r7, [sp, #0]
 80064c4:	4633      	mov	r3, r6
 80064c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064c8:	4621      	mov	r1, r4
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 f9d2 	bl	8006874 <_printf_common>
 80064d0:	3001      	adds	r0, #1
 80064d2:	f040 808d 	bne.w	80065f0 <_printf_float+0x1d0>
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	b00d      	add	sp, #52	@ 0x34
 80064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	4640      	mov	r0, r8
 80064e6:	4649      	mov	r1, r9
 80064e8:	f7fa fb20 	bl	8000b2c <__aeabi_dcmpun>
 80064ec:	b140      	cbz	r0, 8006500 <_printf_float+0xe0>
 80064ee:	464b      	mov	r3, r9
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bfbc      	itt	lt
 80064f4:	232d      	movlt	r3, #45	@ 0x2d
 80064f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064fa:	4a7e      	ldr	r2, [pc, #504]	@ (80066f4 <_printf_float+0x2d4>)
 80064fc:	4b7e      	ldr	r3, [pc, #504]	@ (80066f8 <_printf_float+0x2d8>)
 80064fe:	e7d4      	b.n	80064aa <_printf_float+0x8a>
 8006500:	6863      	ldr	r3, [r4, #4]
 8006502:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006506:	9206      	str	r2, [sp, #24]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	d13b      	bne.n	8006584 <_printf_float+0x164>
 800650c:	2306      	movs	r3, #6
 800650e:	6063      	str	r3, [r4, #4]
 8006510:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006514:	2300      	movs	r3, #0
 8006516:	6022      	str	r2, [r4, #0]
 8006518:	9303      	str	r3, [sp, #12]
 800651a:	ab0a      	add	r3, sp, #40	@ 0x28
 800651c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006520:	ab09      	add	r3, sp, #36	@ 0x24
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	6861      	ldr	r1, [r4, #4]
 8006526:	ec49 8b10 	vmov	d0, r8, r9
 800652a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800652e:	4628      	mov	r0, r5
 8006530:	f7ff fed6 	bl	80062e0 <__cvt>
 8006534:	9b06      	ldr	r3, [sp, #24]
 8006536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006538:	2b47      	cmp	r3, #71	@ 0x47
 800653a:	4680      	mov	r8, r0
 800653c:	d129      	bne.n	8006592 <_printf_float+0x172>
 800653e:	1cc8      	adds	r0, r1, #3
 8006540:	db02      	blt.n	8006548 <_printf_float+0x128>
 8006542:	6863      	ldr	r3, [r4, #4]
 8006544:	4299      	cmp	r1, r3
 8006546:	dd41      	ble.n	80065cc <_printf_float+0x1ac>
 8006548:	f1aa 0a02 	sub.w	sl, sl, #2
 800654c:	fa5f fa8a 	uxtb.w	sl, sl
 8006550:	3901      	subs	r1, #1
 8006552:	4652      	mov	r2, sl
 8006554:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006558:	9109      	str	r1, [sp, #36]	@ 0x24
 800655a:	f7ff ff26 	bl	80063aa <__exponent>
 800655e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006560:	1813      	adds	r3, r2, r0
 8006562:	2a01      	cmp	r2, #1
 8006564:	4681      	mov	r9, r0
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	dc02      	bgt.n	8006570 <_printf_float+0x150>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	07d2      	lsls	r2, r2, #31
 800656e:	d501      	bpl.n	8006574 <_printf_float+0x154>
 8006570:	3301      	adds	r3, #1
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0a2      	beq.n	80064c2 <_printf_float+0xa2>
 800657c:	232d      	movs	r3, #45	@ 0x2d
 800657e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006582:	e79e      	b.n	80064c2 <_printf_float+0xa2>
 8006584:	9a06      	ldr	r2, [sp, #24]
 8006586:	2a47      	cmp	r2, #71	@ 0x47
 8006588:	d1c2      	bne.n	8006510 <_printf_float+0xf0>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1c0      	bne.n	8006510 <_printf_float+0xf0>
 800658e:	2301      	movs	r3, #1
 8006590:	e7bd      	b.n	800650e <_printf_float+0xee>
 8006592:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006596:	d9db      	bls.n	8006550 <_printf_float+0x130>
 8006598:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800659c:	d118      	bne.n	80065d0 <_printf_float+0x1b0>
 800659e:	2900      	cmp	r1, #0
 80065a0:	6863      	ldr	r3, [r4, #4]
 80065a2:	dd0b      	ble.n	80065bc <_printf_float+0x19c>
 80065a4:	6121      	str	r1, [r4, #16]
 80065a6:	b913      	cbnz	r3, 80065ae <_printf_float+0x18e>
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	07d0      	lsls	r0, r2, #31
 80065ac:	d502      	bpl.n	80065b4 <_printf_float+0x194>
 80065ae:	3301      	adds	r3, #1
 80065b0:	440b      	add	r3, r1
 80065b2:	6123      	str	r3, [r4, #16]
 80065b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065b6:	f04f 0900 	mov.w	r9, #0
 80065ba:	e7db      	b.n	8006574 <_printf_float+0x154>
 80065bc:	b913      	cbnz	r3, 80065c4 <_printf_float+0x1a4>
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	07d2      	lsls	r2, r2, #31
 80065c2:	d501      	bpl.n	80065c8 <_printf_float+0x1a8>
 80065c4:	3302      	adds	r3, #2
 80065c6:	e7f4      	b.n	80065b2 <_printf_float+0x192>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e7f2      	b.n	80065b2 <_printf_float+0x192>
 80065cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d2:	4299      	cmp	r1, r3
 80065d4:	db05      	blt.n	80065e2 <_printf_float+0x1c2>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6121      	str	r1, [r4, #16]
 80065da:	07d8      	lsls	r0, r3, #31
 80065dc:	d5ea      	bpl.n	80065b4 <_printf_float+0x194>
 80065de:	1c4b      	adds	r3, r1, #1
 80065e0:	e7e7      	b.n	80065b2 <_printf_float+0x192>
 80065e2:	2900      	cmp	r1, #0
 80065e4:	bfd4      	ite	le
 80065e6:	f1c1 0202 	rsble	r2, r1, #2
 80065ea:	2201      	movgt	r2, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	e7e0      	b.n	80065b2 <_printf_float+0x192>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	055a      	lsls	r2, r3, #21
 80065f4:	d407      	bmi.n	8006606 <_printf_float+0x1e6>
 80065f6:	6923      	ldr	r3, [r4, #16]
 80065f8:	4642      	mov	r2, r8
 80065fa:	4631      	mov	r1, r6
 80065fc:	4628      	mov	r0, r5
 80065fe:	47b8      	blx	r7
 8006600:	3001      	adds	r0, #1
 8006602:	d12b      	bne.n	800665c <_printf_float+0x23c>
 8006604:	e767      	b.n	80064d6 <_printf_float+0xb6>
 8006606:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800660a:	f240 80dd 	bls.w	80067c8 <_printf_float+0x3a8>
 800660e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006612:	2200      	movs	r2, #0
 8006614:	2300      	movs	r3, #0
 8006616:	f7fa fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800661a:	2800      	cmp	r0, #0
 800661c:	d033      	beq.n	8006686 <_printf_float+0x266>
 800661e:	4a37      	ldr	r2, [pc, #220]	@ (80066fc <_printf_float+0x2dc>)
 8006620:	2301      	movs	r3, #1
 8006622:	4631      	mov	r1, r6
 8006624:	4628      	mov	r0, r5
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	f43f af54 	beq.w	80064d6 <_printf_float+0xb6>
 800662e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006632:	4543      	cmp	r3, r8
 8006634:	db02      	blt.n	800663c <_printf_float+0x21c>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	07d8      	lsls	r0, r3, #31
 800663a:	d50f      	bpl.n	800665c <_printf_float+0x23c>
 800663c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f af45 	beq.w	80064d6 <_printf_float+0xb6>
 800664c:	f04f 0900 	mov.w	r9, #0
 8006650:	f108 38ff 	add.w	r8, r8, #4294967295
 8006654:	f104 0a1a 	add.w	sl, r4, #26
 8006658:	45c8      	cmp	r8, r9
 800665a:	dc09      	bgt.n	8006670 <_printf_float+0x250>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	f100 8103 	bmi.w	800686a <_printf_float+0x44a>
 8006664:	68e0      	ldr	r0, [r4, #12]
 8006666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006668:	4298      	cmp	r0, r3
 800666a:	bfb8      	it	lt
 800666c:	4618      	movlt	r0, r3
 800666e:	e734      	b.n	80064da <_printf_float+0xba>
 8006670:	2301      	movs	r3, #1
 8006672:	4652      	mov	r2, sl
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af2b 	beq.w	80064d6 <_printf_float+0xb6>
 8006680:	f109 0901 	add.w	r9, r9, #1
 8006684:	e7e8      	b.n	8006658 <_printf_float+0x238>
 8006686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc39      	bgt.n	8006700 <_printf_float+0x2e0>
 800668c:	4a1b      	ldr	r2, [pc, #108]	@ (80066fc <_printf_float+0x2dc>)
 800668e:	2301      	movs	r3, #1
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af1d 	beq.w	80064d6 <_printf_float+0xb6>
 800669c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066a0:	ea59 0303 	orrs.w	r3, r9, r3
 80066a4:	d102      	bne.n	80066ac <_printf_float+0x28c>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	07d9      	lsls	r1, r3, #31
 80066aa:	d5d7      	bpl.n	800665c <_printf_float+0x23c>
 80066ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af0d 	beq.w	80064d6 <_printf_float+0xb6>
 80066bc:	f04f 0a00 	mov.w	sl, #0
 80066c0:	f104 0b1a 	add.w	fp, r4, #26
 80066c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c6:	425b      	negs	r3, r3
 80066c8:	4553      	cmp	r3, sl
 80066ca:	dc01      	bgt.n	80066d0 <_printf_float+0x2b0>
 80066cc:	464b      	mov	r3, r9
 80066ce:	e793      	b.n	80065f8 <_printf_float+0x1d8>
 80066d0:	2301      	movs	r3, #1
 80066d2:	465a      	mov	r2, fp
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f aefb 	beq.w	80064d6 <_printf_float+0xb6>
 80066e0:	f10a 0a01 	add.w	sl, sl, #1
 80066e4:	e7ee      	b.n	80066c4 <_printf_float+0x2a4>
 80066e6:	bf00      	nop
 80066e8:	7fefffff 	.word	0x7fefffff
 80066ec:	08009958 	.word	0x08009958
 80066f0:	0800995c 	.word	0x0800995c
 80066f4:	08009960 	.word	0x08009960
 80066f8:	08009964 	.word	0x08009964
 80066fc:	08009968 	.word	0x08009968
 8006700:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006702:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006706:	4553      	cmp	r3, sl
 8006708:	bfa8      	it	ge
 800670a:	4653      	movge	r3, sl
 800670c:	2b00      	cmp	r3, #0
 800670e:	4699      	mov	r9, r3
 8006710:	dc36      	bgt.n	8006780 <_printf_float+0x360>
 8006712:	f04f 0b00 	mov.w	fp, #0
 8006716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800671a:	f104 021a 	add.w	r2, r4, #26
 800671e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006720:	9306      	str	r3, [sp, #24]
 8006722:	eba3 0309 	sub.w	r3, r3, r9
 8006726:	455b      	cmp	r3, fp
 8006728:	dc31      	bgt.n	800678e <_printf_float+0x36e>
 800672a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800672c:	459a      	cmp	sl, r3
 800672e:	dc3a      	bgt.n	80067a6 <_printf_float+0x386>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07da      	lsls	r2, r3, #31
 8006734:	d437      	bmi.n	80067a6 <_printf_float+0x386>
 8006736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006738:	ebaa 0903 	sub.w	r9, sl, r3
 800673c:	9b06      	ldr	r3, [sp, #24]
 800673e:	ebaa 0303 	sub.w	r3, sl, r3
 8006742:	4599      	cmp	r9, r3
 8006744:	bfa8      	it	ge
 8006746:	4699      	movge	r9, r3
 8006748:	f1b9 0f00 	cmp.w	r9, #0
 800674c:	dc33      	bgt.n	80067b6 <_printf_float+0x396>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006756:	f104 0b1a 	add.w	fp, r4, #26
 800675a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675c:	ebaa 0303 	sub.w	r3, sl, r3
 8006760:	eba3 0309 	sub.w	r3, r3, r9
 8006764:	4543      	cmp	r3, r8
 8006766:	f77f af79 	ble.w	800665c <_printf_float+0x23c>
 800676a:	2301      	movs	r3, #1
 800676c:	465a      	mov	r2, fp
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f aeae 	beq.w	80064d6 <_printf_float+0xb6>
 800677a:	f108 0801 	add.w	r8, r8, #1
 800677e:	e7ec      	b.n	800675a <_printf_float+0x33a>
 8006780:	4642      	mov	r2, r8
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	d1c2      	bne.n	8006712 <_printf_float+0x2f2>
 800678c:	e6a3      	b.n	80064d6 <_printf_float+0xb6>
 800678e:	2301      	movs	r3, #1
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	9206      	str	r2, [sp, #24]
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	f43f ae9c 	beq.w	80064d6 <_printf_float+0xb6>
 800679e:	9a06      	ldr	r2, [sp, #24]
 80067a0:	f10b 0b01 	add.w	fp, fp, #1
 80067a4:	e7bb      	b.n	800671e <_printf_float+0x2fe>
 80067a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	d1c0      	bne.n	8006736 <_printf_float+0x316>
 80067b4:	e68f      	b.n	80064d6 <_printf_float+0xb6>
 80067b6:	9a06      	ldr	r2, [sp, #24]
 80067b8:	464b      	mov	r3, r9
 80067ba:	4442      	add	r2, r8
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	d1c3      	bne.n	800674e <_printf_float+0x32e>
 80067c6:	e686      	b.n	80064d6 <_printf_float+0xb6>
 80067c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067cc:	f1ba 0f01 	cmp.w	sl, #1
 80067d0:	dc01      	bgt.n	80067d6 <_printf_float+0x3b6>
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d536      	bpl.n	8006844 <_printf_float+0x424>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4642      	mov	r2, r8
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae78 	beq.w	80064d6 <_printf_float+0xb6>
 80067e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	f43f ae70 	beq.w	80064d6 <_printf_float+0xb6>
 80067f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006802:	f7fa f961 	bl	8000ac8 <__aeabi_dcmpeq>
 8006806:	b9c0      	cbnz	r0, 800683a <_printf_float+0x41a>
 8006808:	4653      	mov	r3, sl
 800680a:	f108 0201 	add.w	r2, r8, #1
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	d10c      	bne.n	8006832 <_printf_float+0x412>
 8006818:	e65d      	b.n	80064d6 <_printf_float+0xb6>
 800681a:	2301      	movs	r3, #1
 800681c:	465a      	mov	r2, fp
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae56 	beq.w	80064d6 <_printf_float+0xb6>
 800682a:	f108 0801 	add.w	r8, r8, #1
 800682e:	45d0      	cmp	r8, sl
 8006830:	dbf3      	blt.n	800681a <_printf_float+0x3fa>
 8006832:	464b      	mov	r3, r9
 8006834:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006838:	e6df      	b.n	80065fa <_printf_float+0x1da>
 800683a:	f04f 0800 	mov.w	r8, #0
 800683e:	f104 0b1a 	add.w	fp, r4, #26
 8006842:	e7f4      	b.n	800682e <_printf_float+0x40e>
 8006844:	2301      	movs	r3, #1
 8006846:	4642      	mov	r2, r8
 8006848:	e7e1      	b.n	800680e <_printf_float+0x3ee>
 800684a:	2301      	movs	r3, #1
 800684c:	464a      	mov	r2, r9
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	47b8      	blx	r7
 8006854:	3001      	adds	r0, #1
 8006856:	f43f ae3e 	beq.w	80064d6 <_printf_float+0xb6>
 800685a:	f108 0801 	add.w	r8, r8, #1
 800685e:	68e3      	ldr	r3, [r4, #12]
 8006860:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006862:	1a5b      	subs	r3, r3, r1
 8006864:	4543      	cmp	r3, r8
 8006866:	dcf0      	bgt.n	800684a <_printf_float+0x42a>
 8006868:	e6fc      	b.n	8006664 <_printf_float+0x244>
 800686a:	f04f 0800 	mov.w	r8, #0
 800686e:	f104 0919 	add.w	r9, r4, #25
 8006872:	e7f4      	b.n	800685e <_printf_float+0x43e>

08006874 <_printf_common>:
 8006874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	4616      	mov	r6, r2
 800687a:	4698      	mov	r8, r3
 800687c:	688a      	ldr	r2, [r1, #8]
 800687e:	690b      	ldr	r3, [r1, #16]
 8006880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006884:	4293      	cmp	r3, r2
 8006886:	bfb8      	it	lt
 8006888:	4613      	movlt	r3, r2
 800688a:	6033      	str	r3, [r6, #0]
 800688c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006890:	4607      	mov	r7, r0
 8006892:	460c      	mov	r4, r1
 8006894:	b10a      	cbz	r2, 800689a <_printf_common+0x26>
 8006896:	3301      	adds	r3, #1
 8006898:	6033      	str	r3, [r6, #0]
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	0699      	lsls	r1, r3, #26
 800689e:	bf42      	ittt	mi
 80068a0:	6833      	ldrmi	r3, [r6, #0]
 80068a2:	3302      	addmi	r3, #2
 80068a4:	6033      	strmi	r3, [r6, #0]
 80068a6:	6825      	ldr	r5, [r4, #0]
 80068a8:	f015 0506 	ands.w	r5, r5, #6
 80068ac:	d106      	bne.n	80068bc <_printf_common+0x48>
 80068ae:	f104 0a19 	add.w	sl, r4, #25
 80068b2:	68e3      	ldr	r3, [r4, #12]
 80068b4:	6832      	ldr	r2, [r6, #0]
 80068b6:	1a9b      	subs	r3, r3, r2
 80068b8:	42ab      	cmp	r3, r5
 80068ba:	dc26      	bgt.n	800690a <_printf_common+0x96>
 80068bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	3b00      	subs	r3, #0
 80068c4:	bf18      	it	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	0692      	lsls	r2, r2, #26
 80068ca:	d42b      	bmi.n	8006924 <_printf_common+0xb0>
 80068cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068d0:	4641      	mov	r1, r8
 80068d2:	4638      	mov	r0, r7
 80068d4:	47c8      	blx	r9
 80068d6:	3001      	adds	r0, #1
 80068d8:	d01e      	beq.n	8006918 <_printf_common+0xa4>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	6922      	ldr	r2, [r4, #16]
 80068de:	f003 0306 	and.w	r3, r3, #6
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	bf02      	ittt	eq
 80068e6:	68e5      	ldreq	r5, [r4, #12]
 80068e8:	6833      	ldreq	r3, [r6, #0]
 80068ea:	1aed      	subeq	r5, r5, r3
 80068ec:	68a3      	ldr	r3, [r4, #8]
 80068ee:	bf0c      	ite	eq
 80068f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f4:	2500      	movne	r5, #0
 80068f6:	4293      	cmp	r3, r2
 80068f8:	bfc4      	itt	gt
 80068fa:	1a9b      	subgt	r3, r3, r2
 80068fc:	18ed      	addgt	r5, r5, r3
 80068fe:	2600      	movs	r6, #0
 8006900:	341a      	adds	r4, #26
 8006902:	42b5      	cmp	r5, r6
 8006904:	d11a      	bne.n	800693c <_printf_common+0xc8>
 8006906:	2000      	movs	r0, #0
 8006908:	e008      	b.n	800691c <_printf_common+0xa8>
 800690a:	2301      	movs	r3, #1
 800690c:	4652      	mov	r2, sl
 800690e:	4641      	mov	r1, r8
 8006910:	4638      	mov	r0, r7
 8006912:	47c8      	blx	r9
 8006914:	3001      	adds	r0, #1
 8006916:	d103      	bne.n	8006920 <_printf_common+0xac>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006920:	3501      	adds	r5, #1
 8006922:	e7c6      	b.n	80068b2 <_printf_common+0x3e>
 8006924:	18e1      	adds	r1, r4, r3
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	2030      	movs	r0, #48	@ 0x30
 800692a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800692e:	4422      	add	r2, r4
 8006930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006938:	3302      	adds	r3, #2
 800693a:	e7c7      	b.n	80068cc <_printf_common+0x58>
 800693c:	2301      	movs	r3, #1
 800693e:	4622      	mov	r2, r4
 8006940:	4641      	mov	r1, r8
 8006942:	4638      	mov	r0, r7
 8006944:	47c8      	blx	r9
 8006946:	3001      	adds	r0, #1
 8006948:	d0e6      	beq.n	8006918 <_printf_common+0xa4>
 800694a:	3601      	adds	r6, #1
 800694c:	e7d9      	b.n	8006902 <_printf_common+0x8e>
	...

08006950 <_printf_i>:
 8006950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	7e0f      	ldrb	r7, [r1, #24]
 8006956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006958:	2f78      	cmp	r7, #120	@ 0x78
 800695a:	4691      	mov	r9, r2
 800695c:	4680      	mov	r8, r0
 800695e:	460c      	mov	r4, r1
 8006960:	469a      	mov	sl, r3
 8006962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006966:	d807      	bhi.n	8006978 <_printf_i+0x28>
 8006968:	2f62      	cmp	r7, #98	@ 0x62
 800696a:	d80a      	bhi.n	8006982 <_printf_i+0x32>
 800696c:	2f00      	cmp	r7, #0
 800696e:	f000 80d2 	beq.w	8006b16 <_printf_i+0x1c6>
 8006972:	2f58      	cmp	r7, #88	@ 0x58
 8006974:	f000 80b9 	beq.w	8006aea <_printf_i+0x19a>
 8006978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800697c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006980:	e03a      	b.n	80069f8 <_printf_i+0xa8>
 8006982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006986:	2b15      	cmp	r3, #21
 8006988:	d8f6      	bhi.n	8006978 <_printf_i+0x28>
 800698a:	a101      	add	r1, pc, #4	@ (adr r1, 8006990 <_printf_i+0x40>)
 800698c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006990:	080069e9 	.word	0x080069e9
 8006994:	080069fd 	.word	0x080069fd
 8006998:	08006979 	.word	0x08006979
 800699c:	08006979 	.word	0x08006979
 80069a0:	08006979 	.word	0x08006979
 80069a4:	08006979 	.word	0x08006979
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	08006979 	.word	0x08006979
 80069b0:	08006979 	.word	0x08006979
 80069b4:	08006979 	.word	0x08006979
 80069b8:	08006979 	.word	0x08006979
 80069bc:	08006afd 	.word	0x08006afd
 80069c0:	08006a27 	.word	0x08006a27
 80069c4:	08006ab7 	.word	0x08006ab7
 80069c8:	08006979 	.word	0x08006979
 80069cc:	08006979 	.word	0x08006979
 80069d0:	08006b1f 	.word	0x08006b1f
 80069d4:	08006979 	.word	0x08006979
 80069d8:	08006a27 	.word	0x08006a27
 80069dc:	08006979 	.word	0x08006979
 80069e0:	08006979 	.word	0x08006979
 80069e4:	08006abf 	.word	0x08006abf
 80069e8:	6833      	ldr	r3, [r6, #0]
 80069ea:	1d1a      	adds	r2, r3, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6032      	str	r2, [r6, #0]
 80069f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069f8:	2301      	movs	r3, #1
 80069fa:	e09d      	b.n	8006b38 <_printf_i+0x1e8>
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	6820      	ldr	r0, [r4, #0]
 8006a00:	1d19      	adds	r1, r3, #4
 8006a02:	6031      	str	r1, [r6, #0]
 8006a04:	0606      	lsls	r6, r0, #24
 8006a06:	d501      	bpl.n	8006a0c <_printf_i+0xbc>
 8006a08:	681d      	ldr	r5, [r3, #0]
 8006a0a:	e003      	b.n	8006a14 <_printf_i+0xc4>
 8006a0c:	0645      	lsls	r5, r0, #25
 8006a0e:	d5fb      	bpl.n	8006a08 <_printf_i+0xb8>
 8006a10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	da03      	bge.n	8006a20 <_printf_i+0xd0>
 8006a18:	232d      	movs	r3, #45	@ 0x2d
 8006a1a:	426d      	negs	r5, r5
 8006a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a20:	4859      	ldr	r0, [pc, #356]	@ (8006b88 <_printf_i+0x238>)
 8006a22:	230a      	movs	r3, #10
 8006a24:	e011      	b.n	8006a4a <_printf_i+0xfa>
 8006a26:	6821      	ldr	r1, [r4, #0]
 8006a28:	6833      	ldr	r3, [r6, #0]
 8006a2a:	0608      	lsls	r0, r1, #24
 8006a2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a30:	d402      	bmi.n	8006a38 <_printf_i+0xe8>
 8006a32:	0649      	lsls	r1, r1, #25
 8006a34:	bf48      	it	mi
 8006a36:	b2ad      	uxthmi	r5, r5
 8006a38:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a3a:	4853      	ldr	r0, [pc, #332]	@ (8006b88 <_printf_i+0x238>)
 8006a3c:	6033      	str	r3, [r6, #0]
 8006a3e:	bf14      	ite	ne
 8006a40:	230a      	movne	r3, #10
 8006a42:	2308      	moveq	r3, #8
 8006a44:	2100      	movs	r1, #0
 8006a46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a4a:	6866      	ldr	r6, [r4, #4]
 8006a4c:	60a6      	str	r6, [r4, #8]
 8006a4e:	2e00      	cmp	r6, #0
 8006a50:	bfa2      	ittt	ge
 8006a52:	6821      	ldrge	r1, [r4, #0]
 8006a54:	f021 0104 	bicge.w	r1, r1, #4
 8006a58:	6021      	strge	r1, [r4, #0]
 8006a5a:	b90d      	cbnz	r5, 8006a60 <_printf_i+0x110>
 8006a5c:	2e00      	cmp	r6, #0
 8006a5e:	d04b      	beq.n	8006af8 <_printf_i+0x1a8>
 8006a60:	4616      	mov	r6, r2
 8006a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a66:	fb03 5711 	mls	r7, r3, r1, r5
 8006a6a:	5dc7      	ldrb	r7, [r0, r7]
 8006a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a70:	462f      	mov	r7, r5
 8006a72:	42bb      	cmp	r3, r7
 8006a74:	460d      	mov	r5, r1
 8006a76:	d9f4      	bls.n	8006a62 <_printf_i+0x112>
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d10b      	bne.n	8006a94 <_printf_i+0x144>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	07df      	lsls	r7, r3, #31
 8006a80:	d508      	bpl.n	8006a94 <_printf_i+0x144>
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	6861      	ldr	r1, [r4, #4]
 8006a86:	4299      	cmp	r1, r3
 8006a88:	bfde      	ittt	le
 8006a8a:	2330      	movle	r3, #48	@ 0x30
 8006a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a94:	1b92      	subs	r2, r2, r6
 8006a96:	6122      	str	r2, [r4, #16]
 8006a98:	f8cd a000 	str.w	sl, [sp]
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	aa03      	add	r2, sp, #12
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f7ff fee6 	bl	8006874 <_printf_common>
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d14a      	bne.n	8006b42 <_printf_i+0x1f2>
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	b004      	add	sp, #16
 8006ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	f043 0320 	orr.w	r3, r3, #32
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	4833      	ldr	r0, [pc, #204]	@ (8006b8c <_printf_i+0x23c>)
 8006ac0:	2778      	movs	r7, #120	@ 0x78
 8006ac2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	6831      	ldr	r1, [r6, #0]
 8006aca:	061f      	lsls	r7, r3, #24
 8006acc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ad0:	d402      	bmi.n	8006ad8 <_printf_i+0x188>
 8006ad2:	065f      	lsls	r7, r3, #25
 8006ad4:	bf48      	it	mi
 8006ad6:	b2ad      	uxthmi	r5, r5
 8006ad8:	6031      	str	r1, [r6, #0]
 8006ada:	07d9      	lsls	r1, r3, #31
 8006adc:	bf44      	itt	mi
 8006ade:	f043 0320 	orrmi.w	r3, r3, #32
 8006ae2:	6023      	strmi	r3, [r4, #0]
 8006ae4:	b11d      	cbz	r5, 8006aee <_printf_i+0x19e>
 8006ae6:	2310      	movs	r3, #16
 8006ae8:	e7ac      	b.n	8006a44 <_printf_i+0xf4>
 8006aea:	4827      	ldr	r0, [pc, #156]	@ (8006b88 <_printf_i+0x238>)
 8006aec:	e7e9      	b.n	8006ac2 <_printf_i+0x172>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f023 0320 	bic.w	r3, r3, #32
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	e7f6      	b.n	8006ae6 <_printf_i+0x196>
 8006af8:	4616      	mov	r6, r2
 8006afa:	e7bd      	b.n	8006a78 <_printf_i+0x128>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	6961      	ldr	r1, [r4, #20]
 8006b02:	1d18      	adds	r0, r3, #4
 8006b04:	6030      	str	r0, [r6, #0]
 8006b06:	062e      	lsls	r6, r5, #24
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	d501      	bpl.n	8006b10 <_printf_i+0x1c0>
 8006b0c:	6019      	str	r1, [r3, #0]
 8006b0e:	e002      	b.n	8006b16 <_printf_i+0x1c6>
 8006b10:	0668      	lsls	r0, r5, #25
 8006b12:	d5fb      	bpl.n	8006b0c <_printf_i+0x1bc>
 8006b14:	8019      	strh	r1, [r3, #0]
 8006b16:	2300      	movs	r3, #0
 8006b18:	6123      	str	r3, [r4, #16]
 8006b1a:	4616      	mov	r6, r2
 8006b1c:	e7bc      	b.n	8006a98 <_printf_i+0x148>
 8006b1e:	6833      	ldr	r3, [r6, #0]
 8006b20:	1d1a      	adds	r2, r3, #4
 8006b22:	6032      	str	r2, [r6, #0]
 8006b24:	681e      	ldr	r6, [r3, #0]
 8006b26:	6862      	ldr	r2, [r4, #4]
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f7f9 fb50 	bl	80001d0 <memchr>
 8006b30:	b108      	cbz	r0, 8006b36 <_printf_i+0x1e6>
 8006b32:	1b80      	subs	r0, r0, r6
 8006b34:	6060      	str	r0, [r4, #4]
 8006b36:	6863      	ldr	r3, [r4, #4]
 8006b38:	6123      	str	r3, [r4, #16]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b40:	e7aa      	b.n	8006a98 <_printf_i+0x148>
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	4632      	mov	r2, r6
 8006b46:	4649      	mov	r1, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	47d0      	blx	sl
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d0ad      	beq.n	8006aac <_printf_i+0x15c>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	079b      	lsls	r3, r3, #30
 8006b54:	d413      	bmi.n	8006b7e <_printf_i+0x22e>
 8006b56:	68e0      	ldr	r0, [r4, #12]
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	4298      	cmp	r0, r3
 8006b5c:	bfb8      	it	lt
 8006b5e:	4618      	movlt	r0, r3
 8006b60:	e7a6      	b.n	8006ab0 <_printf_i+0x160>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4632      	mov	r2, r6
 8006b66:	4649      	mov	r1, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	47d0      	blx	sl
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d09d      	beq.n	8006aac <_printf_i+0x15c>
 8006b70:	3501      	adds	r5, #1
 8006b72:	68e3      	ldr	r3, [r4, #12]
 8006b74:	9903      	ldr	r1, [sp, #12]
 8006b76:	1a5b      	subs	r3, r3, r1
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	dcf2      	bgt.n	8006b62 <_printf_i+0x212>
 8006b7c:	e7eb      	b.n	8006b56 <_printf_i+0x206>
 8006b7e:	2500      	movs	r5, #0
 8006b80:	f104 0619 	add.w	r6, r4, #25
 8006b84:	e7f5      	b.n	8006b72 <_printf_i+0x222>
 8006b86:	bf00      	nop
 8006b88:	0800996a 	.word	0x0800996a
 8006b8c:	0800997b 	.word	0x0800997b

08006b90 <std>:
 8006b90:	2300      	movs	r3, #0
 8006b92:	b510      	push	{r4, lr}
 8006b94:	4604      	mov	r4, r0
 8006b96:	e9c0 3300 	strd	r3, r3, [r0]
 8006b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b9e:	6083      	str	r3, [r0, #8]
 8006ba0:	8181      	strh	r1, [r0, #12]
 8006ba2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ba4:	81c2      	strh	r2, [r0, #14]
 8006ba6:	6183      	str	r3, [r0, #24]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	2208      	movs	r2, #8
 8006bac:	305c      	adds	r0, #92	@ 0x5c
 8006bae:	f000 fa01 	bl	8006fb4 <memset>
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006be8 <std+0x58>)
 8006bb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bec <std+0x5c>)
 8006bb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bba:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf0 <std+0x60>)
 8006bbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <std+0x64>)
 8006bc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <std+0x68>)
 8006bc4:	6224      	str	r4, [r4, #32]
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d006      	beq.n	8006bd8 <std+0x48>
 8006bca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bce:	4294      	cmp	r4, r2
 8006bd0:	d002      	beq.n	8006bd8 <std+0x48>
 8006bd2:	33d0      	adds	r3, #208	@ 0xd0
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	d105      	bne.n	8006be4 <std+0x54>
 8006bd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be0:	f000 ba64 	b.w	80070ac <__retarget_lock_init_recursive>
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	bf00      	nop
 8006be8:	08006e05 	.word	0x08006e05
 8006bec:	08006e27 	.word	0x08006e27
 8006bf0:	08006e5f 	.word	0x08006e5f
 8006bf4:	08006e83 	.word	0x08006e83
 8006bf8:	20001014 	.word	0x20001014

08006bfc <stdio_exit_handler>:
 8006bfc:	4a02      	ldr	r2, [pc, #8]	@ (8006c08 <stdio_exit_handler+0xc>)
 8006bfe:	4903      	ldr	r1, [pc, #12]	@ (8006c0c <stdio_exit_handler+0x10>)
 8006c00:	4803      	ldr	r0, [pc, #12]	@ (8006c10 <stdio_exit_handler+0x14>)
 8006c02:	f000 b869 	b.w	8006cd8 <_fwalk_sglue>
 8006c06:	bf00      	nop
 8006c08:	20000020 	.word	0x20000020
 8006c0c:	080089f9 	.word	0x080089f9
 8006c10:	20000030 	.word	0x20000030

08006c14 <cleanup_stdio>:
 8006c14:	6841      	ldr	r1, [r0, #4]
 8006c16:	4b0c      	ldr	r3, [pc, #48]	@ (8006c48 <cleanup_stdio+0x34>)
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	d001      	beq.n	8006c24 <cleanup_stdio+0x10>
 8006c20:	f001 feea 	bl	80089f8 <_fflush_r>
 8006c24:	68a1      	ldr	r1, [r4, #8]
 8006c26:	4b09      	ldr	r3, [pc, #36]	@ (8006c4c <cleanup_stdio+0x38>)
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	d002      	beq.n	8006c32 <cleanup_stdio+0x1e>
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f001 fee3 	bl	80089f8 <_fflush_r>
 8006c32:	68e1      	ldr	r1, [r4, #12]
 8006c34:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <cleanup_stdio+0x3c>)
 8006c36:	4299      	cmp	r1, r3
 8006c38:	d004      	beq.n	8006c44 <cleanup_stdio+0x30>
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c40:	f001 beda 	b.w	80089f8 <_fflush_r>
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	bf00      	nop
 8006c48:	20001014 	.word	0x20001014
 8006c4c:	2000107c 	.word	0x2000107c
 8006c50:	200010e4 	.word	0x200010e4

08006c54 <global_stdio_init.part.0>:
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <global_stdio_init.part.0+0x30>)
 8006c58:	4c0b      	ldr	r4, [pc, #44]	@ (8006c88 <global_stdio_init.part.0+0x34>)
 8006c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c8c <global_stdio_init.part.0+0x38>)
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	2200      	movs	r2, #0
 8006c62:	2104      	movs	r1, #4
 8006c64:	f7ff ff94 	bl	8006b90 <std>
 8006c68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	2109      	movs	r1, #9
 8006c70:	f7ff ff8e 	bl	8006b90 <std>
 8006c74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c78:	2202      	movs	r2, #2
 8006c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c7e:	2112      	movs	r1, #18
 8006c80:	f7ff bf86 	b.w	8006b90 <std>
 8006c84:	2000114c 	.word	0x2000114c
 8006c88:	20001014 	.word	0x20001014
 8006c8c:	08006bfd 	.word	0x08006bfd

08006c90 <__sfp_lock_acquire>:
 8006c90:	4801      	ldr	r0, [pc, #4]	@ (8006c98 <__sfp_lock_acquire+0x8>)
 8006c92:	f000 ba0c 	b.w	80070ae <__retarget_lock_acquire_recursive>
 8006c96:	bf00      	nop
 8006c98:	20001155 	.word	0x20001155

08006c9c <__sfp_lock_release>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	@ (8006ca4 <__sfp_lock_release+0x8>)
 8006c9e:	f000 ba07 	b.w	80070b0 <__retarget_lock_release_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	20001155 	.word	0x20001155

08006ca8 <__sinit>:
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4604      	mov	r4, r0
 8006cac:	f7ff fff0 	bl	8006c90 <__sfp_lock_acquire>
 8006cb0:	6a23      	ldr	r3, [r4, #32]
 8006cb2:	b11b      	cbz	r3, 8006cbc <__sinit+0x14>
 8006cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb8:	f7ff bff0 	b.w	8006c9c <__sfp_lock_release>
 8006cbc:	4b04      	ldr	r3, [pc, #16]	@ (8006cd0 <__sinit+0x28>)
 8006cbe:	6223      	str	r3, [r4, #32]
 8006cc0:	4b04      	ldr	r3, [pc, #16]	@ (8006cd4 <__sinit+0x2c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1f5      	bne.n	8006cb4 <__sinit+0xc>
 8006cc8:	f7ff ffc4 	bl	8006c54 <global_stdio_init.part.0>
 8006ccc:	e7f2      	b.n	8006cb4 <__sinit+0xc>
 8006cce:	bf00      	nop
 8006cd0:	08006c15 	.word	0x08006c15
 8006cd4:	2000114c 	.word	0x2000114c

08006cd8 <_fwalk_sglue>:
 8006cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4607      	mov	r7, r0
 8006cde:	4688      	mov	r8, r1
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8006cec:	d505      	bpl.n	8006cfa <_fwalk_sglue+0x22>
 8006cee:	6824      	ldr	r4, [r4, #0]
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	d1f7      	bne.n	8006ce4 <_fwalk_sglue+0xc>
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d907      	bls.n	8006d10 <_fwalk_sglue+0x38>
 8006d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d04:	3301      	adds	r3, #1
 8006d06:	d003      	beq.n	8006d10 <_fwalk_sglue+0x38>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	47c0      	blx	r8
 8006d0e:	4306      	orrs	r6, r0
 8006d10:	3568      	adds	r5, #104	@ 0x68
 8006d12:	e7e9      	b.n	8006ce8 <_fwalk_sglue+0x10>

08006d14 <iprintf>:
 8006d14:	b40f      	push	{r0, r1, r2, r3}
 8006d16:	b507      	push	{r0, r1, r2, lr}
 8006d18:	4906      	ldr	r1, [pc, #24]	@ (8006d34 <iprintf+0x20>)
 8006d1a:	ab04      	add	r3, sp, #16
 8006d1c:	6808      	ldr	r0, [r1, #0]
 8006d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d22:	6881      	ldr	r1, [r0, #8]
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	f001 fccb 	bl	80086c0 <_vfiprintf_r>
 8006d2a:	b003      	add	sp, #12
 8006d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d30:	b004      	add	sp, #16
 8006d32:	4770      	bx	lr
 8006d34:	2000002c 	.word	0x2000002c

08006d38 <putchar>:
 8006d38:	4b02      	ldr	r3, [pc, #8]	@ (8006d44 <putchar+0xc>)
 8006d3a:	4601      	mov	r1, r0
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	6882      	ldr	r2, [r0, #8]
 8006d40:	f001 bee4 	b.w	8008b0c <_putc_r>
 8006d44:	2000002c 	.word	0x2000002c

08006d48 <_puts_r>:
 8006d48:	6a03      	ldr	r3, [r0, #32]
 8006d4a:	b570      	push	{r4, r5, r6, lr}
 8006d4c:	6884      	ldr	r4, [r0, #8]
 8006d4e:	4605      	mov	r5, r0
 8006d50:	460e      	mov	r6, r1
 8006d52:	b90b      	cbnz	r3, 8006d58 <_puts_r+0x10>
 8006d54:	f7ff ffa8 	bl	8006ca8 <__sinit>
 8006d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d5a:	07db      	lsls	r3, r3, #31
 8006d5c:	d405      	bmi.n	8006d6a <_puts_r+0x22>
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	0598      	lsls	r0, r3, #22
 8006d62:	d402      	bmi.n	8006d6a <_puts_r+0x22>
 8006d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d66:	f000 f9a2 	bl	80070ae <__retarget_lock_acquire_recursive>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	0719      	lsls	r1, r3, #28
 8006d6e:	d502      	bpl.n	8006d76 <_puts_r+0x2e>
 8006d70:	6923      	ldr	r3, [r4, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d135      	bne.n	8006de2 <_puts_r+0x9a>
 8006d76:	4621      	mov	r1, r4
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f000 f8c5 	bl	8006f08 <__swsetup_r>
 8006d7e:	b380      	cbz	r0, 8006de2 <_puts_r+0x9a>
 8006d80:	f04f 35ff 	mov.w	r5, #4294967295
 8006d84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d86:	07da      	lsls	r2, r3, #31
 8006d88:	d405      	bmi.n	8006d96 <_puts_r+0x4e>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	059b      	lsls	r3, r3, #22
 8006d8e:	d402      	bmi.n	8006d96 <_puts_r+0x4e>
 8006d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d92:	f000 f98d 	bl	80070b0 <__retarget_lock_release_recursive>
 8006d96:	4628      	mov	r0, r5
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	da04      	bge.n	8006da8 <_puts_r+0x60>
 8006d9e:	69a2      	ldr	r2, [r4, #24]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	dc17      	bgt.n	8006dd4 <_puts_r+0x8c>
 8006da4:	290a      	cmp	r1, #10
 8006da6:	d015      	beq.n	8006dd4 <_puts_r+0x8c>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	6022      	str	r2, [r4, #0]
 8006dae:	7019      	strb	r1, [r3, #0]
 8006db0:	68a3      	ldr	r3, [r4, #8]
 8006db2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006db6:	3b01      	subs	r3, #1
 8006db8:	60a3      	str	r3, [r4, #8]
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	d1ed      	bne.n	8006d9a <_puts_r+0x52>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da11      	bge.n	8006de6 <_puts_r+0x9e>
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	210a      	movs	r1, #10
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f85f 	bl	8006e8a <__swbuf_r>
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d0d7      	beq.n	8006d80 <_puts_r+0x38>
 8006dd0:	250a      	movs	r5, #10
 8006dd2:	e7d7      	b.n	8006d84 <_puts_r+0x3c>
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f857 	bl	8006e8a <__swbuf_r>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d1e7      	bne.n	8006db0 <_puts_r+0x68>
 8006de0:	e7ce      	b.n	8006d80 <_puts_r+0x38>
 8006de2:	3e01      	subs	r6, #1
 8006de4:	e7e4      	b.n	8006db0 <_puts_r+0x68>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	6022      	str	r2, [r4, #0]
 8006dec:	220a      	movs	r2, #10
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	e7ee      	b.n	8006dd0 <_puts_r+0x88>
	...

08006df4 <puts>:
 8006df4:	4b02      	ldr	r3, [pc, #8]	@ (8006e00 <puts+0xc>)
 8006df6:	4601      	mov	r1, r0
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f7ff bfa5 	b.w	8006d48 <_puts_r>
 8006dfe:	bf00      	nop
 8006e00:	2000002c 	.word	0x2000002c

08006e04 <__sread>:
 8006e04:	b510      	push	{r4, lr}
 8006e06:	460c      	mov	r4, r1
 8006e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0c:	f000 f900 	bl	8007010 <_read_r>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	bfab      	itete	ge
 8006e14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e16:	89a3      	ldrhlt	r3, [r4, #12]
 8006e18:	181b      	addge	r3, r3, r0
 8006e1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e1e:	bfac      	ite	ge
 8006e20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e22:	81a3      	strhlt	r3, [r4, #12]
 8006e24:	bd10      	pop	{r4, pc}

08006e26 <__swrite>:
 8006e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2a:	461f      	mov	r7, r3
 8006e2c:	898b      	ldrh	r3, [r1, #12]
 8006e2e:	05db      	lsls	r3, r3, #23
 8006e30:	4605      	mov	r5, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	4616      	mov	r6, r2
 8006e36:	d505      	bpl.n	8006e44 <__swrite+0x1e>
 8006e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f000 f8d4 	bl	8006fec <_lseek_r>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	4632      	mov	r2, r6
 8006e52:	463b      	mov	r3, r7
 8006e54:	4628      	mov	r0, r5
 8006e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5a:	f000 b8eb 	b.w	8007034 <_write_r>

08006e5e <__sseek>:
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	460c      	mov	r4, r1
 8006e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e66:	f000 f8c1 	bl	8006fec <_lseek_r>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	bf15      	itete	ne
 8006e70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e7a:	81a3      	strheq	r3, [r4, #12]
 8006e7c:	bf18      	it	ne
 8006e7e:	81a3      	strhne	r3, [r4, #12]
 8006e80:	bd10      	pop	{r4, pc}

08006e82 <__sclose>:
 8006e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e86:	f000 b8a1 	b.w	8006fcc <_close_r>

08006e8a <__swbuf_r>:
 8006e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8c:	460e      	mov	r6, r1
 8006e8e:	4614      	mov	r4, r2
 8006e90:	4605      	mov	r5, r0
 8006e92:	b118      	cbz	r0, 8006e9c <__swbuf_r+0x12>
 8006e94:	6a03      	ldr	r3, [r0, #32]
 8006e96:	b90b      	cbnz	r3, 8006e9c <__swbuf_r+0x12>
 8006e98:	f7ff ff06 	bl	8006ca8 <__sinit>
 8006e9c:	69a3      	ldr	r3, [r4, #24]
 8006e9e:	60a3      	str	r3, [r4, #8]
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	071a      	lsls	r2, r3, #28
 8006ea4:	d501      	bpl.n	8006eaa <__swbuf_r+0x20>
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	b943      	cbnz	r3, 8006ebc <__swbuf_r+0x32>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 f82b 	bl	8006f08 <__swsetup_r>
 8006eb2:	b118      	cbz	r0, 8006ebc <__swbuf_r+0x32>
 8006eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8006eb8:	4638      	mov	r0, r7
 8006eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	6922      	ldr	r2, [r4, #16]
 8006ec0:	1a98      	subs	r0, r3, r2
 8006ec2:	6963      	ldr	r3, [r4, #20]
 8006ec4:	b2f6      	uxtb	r6, r6
 8006ec6:	4283      	cmp	r3, r0
 8006ec8:	4637      	mov	r7, r6
 8006eca:	dc05      	bgt.n	8006ed8 <__swbuf_r+0x4e>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f001 fd92 	bl	80089f8 <_fflush_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d1ed      	bne.n	8006eb4 <__swbuf_r+0x2a>
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	60a3      	str	r3, [r4, #8]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	6022      	str	r2, [r4, #0]
 8006ee4:	701e      	strb	r6, [r3, #0]
 8006ee6:	6962      	ldr	r2, [r4, #20]
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d004      	beq.n	8006ef8 <__swbuf_r+0x6e>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	07db      	lsls	r3, r3, #31
 8006ef2:	d5e1      	bpl.n	8006eb8 <__swbuf_r+0x2e>
 8006ef4:	2e0a      	cmp	r6, #10
 8006ef6:	d1df      	bne.n	8006eb8 <__swbuf_r+0x2e>
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4628      	mov	r0, r5
 8006efc:	f001 fd7c 	bl	80089f8 <_fflush_r>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d0d9      	beq.n	8006eb8 <__swbuf_r+0x2e>
 8006f04:	e7d6      	b.n	8006eb4 <__swbuf_r+0x2a>
	...

08006f08 <__swsetup_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4b29      	ldr	r3, [pc, #164]	@ (8006fb0 <__swsetup_r+0xa8>)
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	460c      	mov	r4, r1
 8006f12:	b118      	cbz	r0, 8006f1c <__swsetup_r+0x14>
 8006f14:	6a03      	ldr	r3, [r0, #32]
 8006f16:	b90b      	cbnz	r3, 8006f1c <__swsetup_r+0x14>
 8006f18:	f7ff fec6 	bl	8006ca8 <__sinit>
 8006f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f20:	0719      	lsls	r1, r3, #28
 8006f22:	d422      	bmi.n	8006f6a <__swsetup_r+0x62>
 8006f24:	06da      	lsls	r2, r3, #27
 8006f26:	d407      	bmi.n	8006f38 <__swsetup_r+0x30>
 8006f28:	2209      	movs	r2, #9
 8006f2a:	602a      	str	r2, [r5, #0]
 8006f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f30:	81a3      	strh	r3, [r4, #12]
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295
 8006f36:	e033      	b.n	8006fa0 <__swsetup_r+0x98>
 8006f38:	0758      	lsls	r0, r3, #29
 8006f3a:	d512      	bpl.n	8006f62 <__swsetup_r+0x5a>
 8006f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f3e:	b141      	cbz	r1, 8006f52 <__swsetup_r+0x4a>
 8006f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f44:	4299      	cmp	r1, r3
 8006f46:	d002      	beq.n	8006f4e <__swsetup_r+0x46>
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f000 ff0d 	bl	8007d68 <_free_r>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f043 0308 	orr.w	r3, r3, #8
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	b94b      	cbnz	r3, 8006f82 <__swsetup_r+0x7a>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f78:	d003      	beq.n	8006f82 <__swsetup_r+0x7a>
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f001 fd89 	bl	8008a94 <__smakebuf_r>
 8006f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f86:	f013 0201 	ands.w	r2, r3, #1
 8006f8a:	d00a      	beq.n	8006fa2 <__swsetup_r+0x9a>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	60a2      	str	r2, [r4, #8]
 8006f90:	6962      	ldr	r2, [r4, #20]
 8006f92:	4252      	negs	r2, r2
 8006f94:	61a2      	str	r2, [r4, #24]
 8006f96:	6922      	ldr	r2, [r4, #16]
 8006f98:	b942      	cbnz	r2, 8006fac <__swsetup_r+0xa4>
 8006f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f9e:	d1c5      	bne.n	8006f2c <__swsetup_r+0x24>
 8006fa0:	bd38      	pop	{r3, r4, r5, pc}
 8006fa2:	0799      	lsls	r1, r3, #30
 8006fa4:	bf58      	it	pl
 8006fa6:	6962      	ldrpl	r2, [r4, #20]
 8006fa8:	60a2      	str	r2, [r4, #8]
 8006faa:	e7f4      	b.n	8006f96 <__swsetup_r+0x8e>
 8006fac:	2000      	movs	r0, #0
 8006fae:	e7f7      	b.n	8006fa0 <__swsetup_r+0x98>
 8006fb0:	2000002c 	.word	0x2000002c

08006fb4 <memset>:
 8006fb4:	4402      	add	r2, r0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d100      	bne.n	8006fbe <memset+0xa>
 8006fbc:	4770      	bx	lr
 8006fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8006fc2:	e7f9      	b.n	8006fb8 <memset+0x4>

08006fc4 <_localeconv_r>:
 8006fc4:	4800      	ldr	r0, [pc, #0]	@ (8006fc8 <_localeconv_r+0x4>)
 8006fc6:	4770      	bx	lr
 8006fc8:	2000016c 	.word	0x2000016c

08006fcc <_close_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d06      	ldr	r5, [pc, #24]	@ (8006fe8 <_close_r+0x1c>)
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	f7fa faf8 	bl	80015cc <_close>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_close_r+0x1a>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_close_r+0x1a>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20001150 	.word	0x20001150

08006fec <_lseek_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	@ (800700c <_lseek_r+0x20>)
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	4608      	mov	r0, r1
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	602a      	str	r2, [r5, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f7fa fb0d 	bl	800161a <_lseek>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d102      	bne.n	800700a <_lseek_r+0x1e>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	b103      	cbz	r3, 800700a <_lseek_r+0x1e>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	20001150 	.word	0x20001150

08007010 <_read_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4d07      	ldr	r5, [pc, #28]	@ (8007030 <_read_r+0x20>)
 8007014:	4604      	mov	r4, r0
 8007016:	4608      	mov	r0, r1
 8007018:	4611      	mov	r1, r2
 800701a:	2200      	movs	r2, #0
 800701c:	602a      	str	r2, [r5, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	f7fa fa9b 	bl	800155a <_read>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d102      	bne.n	800702e <_read_r+0x1e>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	b103      	cbz	r3, 800702e <_read_r+0x1e>
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	bd38      	pop	{r3, r4, r5, pc}
 8007030:	20001150 	.word	0x20001150

08007034 <_write_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d07      	ldr	r5, [pc, #28]	@ (8007054 <_write_r+0x20>)
 8007038:	4604      	mov	r4, r0
 800703a:	4608      	mov	r0, r1
 800703c:	4611      	mov	r1, r2
 800703e:	2200      	movs	r2, #0
 8007040:	602a      	str	r2, [r5, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	f7fa faa6 	bl	8001594 <_write>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_write_r+0x1e>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_write_r+0x1e>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20001150 	.word	0x20001150

08007058 <__errno>:
 8007058:	4b01      	ldr	r3, [pc, #4]	@ (8007060 <__errno+0x8>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	2000002c 	.word	0x2000002c

08007064 <__libc_init_array>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	4d0d      	ldr	r5, [pc, #52]	@ (800709c <__libc_init_array+0x38>)
 8007068:	4c0d      	ldr	r4, [pc, #52]	@ (80070a0 <__libc_init_array+0x3c>)
 800706a:	1b64      	subs	r4, r4, r5
 800706c:	10a4      	asrs	r4, r4, #2
 800706e:	2600      	movs	r6, #0
 8007070:	42a6      	cmp	r6, r4
 8007072:	d109      	bne.n	8007088 <__libc_init_array+0x24>
 8007074:	4d0b      	ldr	r5, [pc, #44]	@ (80070a4 <__libc_init_array+0x40>)
 8007076:	4c0c      	ldr	r4, [pc, #48]	@ (80070a8 <__libc_init_array+0x44>)
 8007078:	f002 f914 	bl	80092a4 <_init>
 800707c:	1b64      	subs	r4, r4, r5
 800707e:	10a4      	asrs	r4, r4, #2
 8007080:	2600      	movs	r6, #0
 8007082:	42a6      	cmp	r6, r4
 8007084:	d105      	bne.n	8007092 <__libc_init_array+0x2e>
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	f855 3b04 	ldr.w	r3, [r5], #4
 800708c:	4798      	blx	r3
 800708e:	3601      	adds	r6, #1
 8007090:	e7ee      	b.n	8007070 <__libc_init_array+0xc>
 8007092:	f855 3b04 	ldr.w	r3, [r5], #4
 8007096:	4798      	blx	r3
 8007098:	3601      	adds	r6, #1
 800709a:	e7f2      	b.n	8007082 <__libc_init_array+0x1e>
 800709c:	08009ce8 	.word	0x08009ce8
 80070a0:	08009ce8 	.word	0x08009ce8
 80070a4:	08009ce8 	.word	0x08009ce8
 80070a8:	08009cec 	.word	0x08009cec

080070ac <__retarget_lock_init_recursive>:
 80070ac:	4770      	bx	lr

080070ae <__retarget_lock_acquire_recursive>:
 80070ae:	4770      	bx	lr

080070b0 <__retarget_lock_release_recursive>:
 80070b0:	4770      	bx	lr

080070b2 <memcpy>:
 80070b2:	440a      	add	r2, r1
 80070b4:	4291      	cmp	r1, r2
 80070b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80070ba:	d100      	bne.n	80070be <memcpy+0xc>
 80070bc:	4770      	bx	lr
 80070be:	b510      	push	{r4, lr}
 80070c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c8:	4291      	cmp	r1, r2
 80070ca:	d1f9      	bne.n	80070c0 <memcpy+0xe>
 80070cc:	bd10      	pop	{r4, pc}

080070ce <quorem>:
 80070ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d2:	6903      	ldr	r3, [r0, #16]
 80070d4:	690c      	ldr	r4, [r1, #16]
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	4607      	mov	r7, r0
 80070da:	db7e      	blt.n	80071da <quorem+0x10c>
 80070dc:	3c01      	subs	r4, #1
 80070de:	f101 0814 	add.w	r8, r1, #20
 80070e2:	00a3      	lsls	r3, r4, #2
 80070e4:	f100 0514 	add.w	r5, r0, #20
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070f8:	3301      	adds	r3, #1
 80070fa:	429a      	cmp	r2, r3
 80070fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007100:	fbb2 f6f3 	udiv	r6, r2, r3
 8007104:	d32e      	bcc.n	8007164 <quorem+0x96>
 8007106:	f04f 0a00 	mov.w	sl, #0
 800710a:	46c4      	mov	ip, r8
 800710c:	46ae      	mov	lr, r5
 800710e:	46d3      	mov	fp, sl
 8007110:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007114:	b298      	uxth	r0, r3
 8007116:	fb06 a000 	mla	r0, r6, r0, sl
 800711a:	0c02      	lsrs	r2, r0, #16
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	fb06 2303 	mla	r3, r6, r3, r2
 8007122:	f8de 2000 	ldr.w	r2, [lr]
 8007126:	b280      	uxth	r0, r0
 8007128:	b292      	uxth	r2, r2
 800712a:	1a12      	subs	r2, r2, r0
 800712c:	445a      	add	r2, fp
 800712e:	f8de 0000 	ldr.w	r0, [lr]
 8007132:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007136:	b29b      	uxth	r3, r3
 8007138:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800713c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007140:	b292      	uxth	r2, r2
 8007142:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007146:	45e1      	cmp	r9, ip
 8007148:	f84e 2b04 	str.w	r2, [lr], #4
 800714c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007150:	d2de      	bcs.n	8007110 <quorem+0x42>
 8007152:	9b00      	ldr	r3, [sp, #0]
 8007154:	58eb      	ldr	r3, [r5, r3]
 8007156:	b92b      	cbnz	r3, 8007164 <quorem+0x96>
 8007158:	9b01      	ldr	r3, [sp, #4]
 800715a:	3b04      	subs	r3, #4
 800715c:	429d      	cmp	r5, r3
 800715e:	461a      	mov	r2, r3
 8007160:	d32f      	bcc.n	80071c2 <quorem+0xf4>
 8007162:	613c      	str	r4, [r7, #16]
 8007164:	4638      	mov	r0, r7
 8007166:	f001 f979 	bl	800845c <__mcmp>
 800716a:	2800      	cmp	r0, #0
 800716c:	db25      	blt.n	80071ba <quorem+0xec>
 800716e:	4629      	mov	r1, r5
 8007170:	2000      	movs	r0, #0
 8007172:	f858 2b04 	ldr.w	r2, [r8], #4
 8007176:	f8d1 c000 	ldr.w	ip, [r1]
 800717a:	fa1f fe82 	uxth.w	lr, r2
 800717e:	fa1f f38c 	uxth.w	r3, ip
 8007182:	eba3 030e 	sub.w	r3, r3, lr
 8007186:	4403      	add	r3, r0
 8007188:	0c12      	lsrs	r2, r2, #16
 800718a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800718e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007198:	45c1      	cmp	r9, r8
 800719a:	f841 3b04 	str.w	r3, [r1], #4
 800719e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071a2:	d2e6      	bcs.n	8007172 <quorem+0xa4>
 80071a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071ac:	b922      	cbnz	r2, 80071b8 <quorem+0xea>
 80071ae:	3b04      	subs	r3, #4
 80071b0:	429d      	cmp	r5, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	d30b      	bcc.n	80071ce <quorem+0x100>
 80071b6:	613c      	str	r4, [r7, #16]
 80071b8:	3601      	adds	r6, #1
 80071ba:	4630      	mov	r0, r6
 80071bc:	b003      	add	sp, #12
 80071be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c2:	6812      	ldr	r2, [r2, #0]
 80071c4:	3b04      	subs	r3, #4
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	d1cb      	bne.n	8007162 <quorem+0x94>
 80071ca:	3c01      	subs	r4, #1
 80071cc:	e7c6      	b.n	800715c <quorem+0x8e>
 80071ce:	6812      	ldr	r2, [r2, #0]
 80071d0:	3b04      	subs	r3, #4
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	d1ef      	bne.n	80071b6 <quorem+0xe8>
 80071d6:	3c01      	subs	r4, #1
 80071d8:	e7ea      	b.n	80071b0 <quorem+0xe2>
 80071da:	2000      	movs	r0, #0
 80071dc:	e7ee      	b.n	80071bc <quorem+0xee>
	...

080071e0 <_dtoa_r>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	69c7      	ldr	r7, [r0, #28]
 80071e6:	b099      	sub	sp, #100	@ 0x64
 80071e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071ec:	ec55 4b10 	vmov	r4, r5, d0
 80071f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80071f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80071f4:	4683      	mov	fp, r0
 80071f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80071f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071fa:	b97f      	cbnz	r7, 800721c <_dtoa_r+0x3c>
 80071fc:	2010      	movs	r0, #16
 80071fe:	f000 fdfd 	bl	8007dfc <malloc>
 8007202:	4602      	mov	r2, r0
 8007204:	f8cb 001c 	str.w	r0, [fp, #28]
 8007208:	b920      	cbnz	r0, 8007214 <_dtoa_r+0x34>
 800720a:	4ba7      	ldr	r3, [pc, #668]	@ (80074a8 <_dtoa_r+0x2c8>)
 800720c:	21ef      	movs	r1, #239	@ 0xef
 800720e:	48a7      	ldr	r0, [pc, #668]	@ (80074ac <_dtoa_r+0x2cc>)
 8007210:	f001 fce2 	bl	8008bd8 <__assert_func>
 8007214:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007218:	6007      	str	r7, [r0, #0]
 800721a:	60c7      	str	r7, [r0, #12]
 800721c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007220:	6819      	ldr	r1, [r3, #0]
 8007222:	b159      	cbz	r1, 800723c <_dtoa_r+0x5c>
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	604a      	str	r2, [r1, #4]
 8007228:	2301      	movs	r3, #1
 800722a:	4093      	lsls	r3, r2
 800722c:	608b      	str	r3, [r1, #8]
 800722e:	4658      	mov	r0, fp
 8007230:	f000 feda 	bl	8007fe8 <_Bfree>
 8007234:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	1e2b      	subs	r3, r5, #0
 800723e:	bfb9      	ittee	lt
 8007240:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007244:	9303      	strlt	r3, [sp, #12]
 8007246:	2300      	movge	r3, #0
 8007248:	6033      	strge	r3, [r6, #0]
 800724a:	9f03      	ldr	r7, [sp, #12]
 800724c:	4b98      	ldr	r3, [pc, #608]	@ (80074b0 <_dtoa_r+0x2d0>)
 800724e:	bfbc      	itt	lt
 8007250:	2201      	movlt	r2, #1
 8007252:	6032      	strlt	r2, [r6, #0]
 8007254:	43bb      	bics	r3, r7
 8007256:	d112      	bne.n	800727e <_dtoa_r+0x9e>
 8007258:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800725a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007264:	4323      	orrs	r3, r4
 8007266:	f000 854d 	beq.w	8007d04 <_dtoa_r+0xb24>
 800726a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800726c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074c4 <_dtoa_r+0x2e4>
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 854f 	beq.w	8007d14 <_dtoa_r+0xb34>
 8007276:	f10a 0303 	add.w	r3, sl, #3
 800727a:	f000 bd49 	b.w	8007d10 <_dtoa_r+0xb30>
 800727e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	ec51 0b17 	vmov	r0, r1, d7
 8007288:	2300      	movs	r3, #0
 800728a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800728e:	f7f9 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007292:	4680      	mov	r8, r0
 8007294:	b158      	cbz	r0, 80072ae <_dtoa_r+0xce>
 8007296:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007298:	2301      	movs	r3, #1
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800729e:	b113      	cbz	r3, 80072a6 <_dtoa_r+0xc6>
 80072a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072a2:	4b84      	ldr	r3, [pc, #528]	@ (80074b4 <_dtoa_r+0x2d4>)
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074c8 <_dtoa_r+0x2e8>
 80072aa:	f000 bd33 	b.w	8007d14 <_dtoa_r+0xb34>
 80072ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072b2:	aa16      	add	r2, sp, #88	@ 0x58
 80072b4:	a917      	add	r1, sp, #92	@ 0x5c
 80072b6:	4658      	mov	r0, fp
 80072b8:	f001 f980 	bl	80085bc <__d2b>
 80072bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072c0:	4681      	mov	r9, r0
 80072c2:	2e00      	cmp	r6, #0
 80072c4:	d077      	beq.n	80073b6 <_dtoa_r+0x1d6>
 80072c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072e0:	4619      	mov	r1, r3
 80072e2:	2200      	movs	r2, #0
 80072e4:	4b74      	ldr	r3, [pc, #464]	@ (80074b8 <_dtoa_r+0x2d8>)
 80072e6:	f7f8 ffcf 	bl	8000288 <__aeabi_dsub>
 80072ea:	a369      	add	r3, pc, #420	@ (adr r3, 8007490 <_dtoa_r+0x2b0>)
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	f7f9 f982 	bl	80005f8 <__aeabi_dmul>
 80072f4:	a368      	add	r3, pc, #416	@ (adr r3, 8007498 <_dtoa_r+0x2b8>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f8 ffc7 	bl	800028c <__adddf3>
 80072fe:	4604      	mov	r4, r0
 8007300:	4630      	mov	r0, r6
 8007302:	460d      	mov	r5, r1
 8007304:	f7f9 f90e 	bl	8000524 <__aeabi_i2d>
 8007308:	a365      	add	r3, pc, #404	@ (adr r3, 80074a0 <_dtoa_r+0x2c0>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f7f9 f973 	bl	80005f8 <__aeabi_dmul>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f8 ffb7 	bl	800028c <__adddf3>
 800731e:	4604      	mov	r4, r0
 8007320:	460d      	mov	r5, r1
 8007322:	f7f9 fc19 	bl	8000b58 <__aeabi_d2iz>
 8007326:	2200      	movs	r2, #0
 8007328:	4607      	mov	r7, r0
 800732a:	2300      	movs	r3, #0
 800732c:	4620      	mov	r0, r4
 800732e:	4629      	mov	r1, r5
 8007330:	f7f9 fbd4 	bl	8000adc <__aeabi_dcmplt>
 8007334:	b140      	cbz	r0, 8007348 <_dtoa_r+0x168>
 8007336:	4638      	mov	r0, r7
 8007338:	f7f9 f8f4 	bl	8000524 <__aeabi_i2d>
 800733c:	4622      	mov	r2, r4
 800733e:	462b      	mov	r3, r5
 8007340:	f7f9 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007344:	b900      	cbnz	r0, 8007348 <_dtoa_r+0x168>
 8007346:	3f01      	subs	r7, #1
 8007348:	2f16      	cmp	r7, #22
 800734a:	d851      	bhi.n	80073f0 <_dtoa_r+0x210>
 800734c:	4b5b      	ldr	r3, [pc, #364]	@ (80074bc <_dtoa_r+0x2dc>)
 800734e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800735a:	f7f9 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800735e:	2800      	cmp	r0, #0
 8007360:	d048      	beq.n	80073f4 <_dtoa_r+0x214>
 8007362:	3f01      	subs	r7, #1
 8007364:	2300      	movs	r3, #0
 8007366:	9312      	str	r3, [sp, #72]	@ 0x48
 8007368:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800736a:	1b9b      	subs	r3, r3, r6
 800736c:	1e5a      	subs	r2, r3, #1
 800736e:	bf44      	itt	mi
 8007370:	f1c3 0801 	rsbmi	r8, r3, #1
 8007374:	2300      	movmi	r3, #0
 8007376:	9208      	str	r2, [sp, #32]
 8007378:	bf54      	ite	pl
 800737a:	f04f 0800 	movpl.w	r8, #0
 800737e:	9308      	strmi	r3, [sp, #32]
 8007380:	2f00      	cmp	r7, #0
 8007382:	db39      	blt.n	80073f8 <_dtoa_r+0x218>
 8007384:	9b08      	ldr	r3, [sp, #32]
 8007386:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007388:	443b      	add	r3, r7
 800738a:	9308      	str	r3, [sp, #32]
 800738c:	2300      	movs	r3, #0
 800738e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007392:	2b09      	cmp	r3, #9
 8007394:	d864      	bhi.n	8007460 <_dtoa_r+0x280>
 8007396:	2b05      	cmp	r3, #5
 8007398:	bfc4      	itt	gt
 800739a:	3b04      	subgt	r3, #4
 800739c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	f1a3 0302 	sub.w	r3, r3, #2
 80073a4:	bfcc      	ite	gt
 80073a6:	2400      	movgt	r4, #0
 80073a8:	2401      	movle	r4, #1
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d863      	bhi.n	8007476 <_dtoa_r+0x296>
 80073ae:	e8df f003 	tbb	[pc, r3]
 80073b2:	372a      	.short	0x372a
 80073b4:	5535      	.short	0x5535
 80073b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073ba:	441e      	add	r6, r3
 80073bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	bfc1      	itttt	gt
 80073c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073c8:	409f      	lslgt	r7, r3
 80073ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073d2:	bfd6      	itet	le
 80073d4:	f1c3 0320 	rsble	r3, r3, #32
 80073d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80073dc:	fa04 f003 	lslle.w	r0, r4, r3
 80073e0:	f7f9 f890 	bl	8000504 <__aeabi_ui2d>
 80073e4:	2201      	movs	r2, #1
 80073e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073ea:	3e01      	subs	r6, #1
 80073ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80073ee:	e777      	b.n	80072e0 <_dtoa_r+0x100>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e7b8      	b.n	8007366 <_dtoa_r+0x186>
 80073f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80073f6:	e7b7      	b.n	8007368 <_dtoa_r+0x188>
 80073f8:	427b      	negs	r3, r7
 80073fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80073fc:	2300      	movs	r3, #0
 80073fe:	eba8 0807 	sub.w	r8, r8, r7
 8007402:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007404:	e7c4      	b.n	8007390 <_dtoa_r+0x1b0>
 8007406:	2300      	movs	r3, #0
 8007408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800740a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800740c:	2b00      	cmp	r3, #0
 800740e:	dc35      	bgt.n	800747c <_dtoa_r+0x29c>
 8007410:	2301      	movs	r3, #1
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	9307      	str	r3, [sp, #28]
 8007416:	461a      	mov	r2, r3
 8007418:	920e      	str	r2, [sp, #56]	@ 0x38
 800741a:	e00b      	b.n	8007434 <_dtoa_r+0x254>
 800741c:	2301      	movs	r3, #1
 800741e:	e7f3      	b.n	8007408 <_dtoa_r+0x228>
 8007420:	2300      	movs	r3, #0
 8007422:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007426:	18fb      	adds	r3, r7, r3
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	2b01      	cmp	r3, #1
 800742e:	9307      	str	r3, [sp, #28]
 8007430:	bfb8      	it	lt
 8007432:	2301      	movlt	r3, #1
 8007434:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007438:	2100      	movs	r1, #0
 800743a:	2204      	movs	r2, #4
 800743c:	f102 0514 	add.w	r5, r2, #20
 8007440:	429d      	cmp	r5, r3
 8007442:	d91f      	bls.n	8007484 <_dtoa_r+0x2a4>
 8007444:	6041      	str	r1, [r0, #4]
 8007446:	4658      	mov	r0, fp
 8007448:	f000 fd8e 	bl	8007f68 <_Balloc>
 800744c:	4682      	mov	sl, r0
 800744e:	2800      	cmp	r0, #0
 8007450:	d13c      	bne.n	80074cc <_dtoa_r+0x2ec>
 8007452:	4b1b      	ldr	r3, [pc, #108]	@ (80074c0 <_dtoa_r+0x2e0>)
 8007454:	4602      	mov	r2, r0
 8007456:	f240 11af 	movw	r1, #431	@ 0x1af
 800745a:	e6d8      	b.n	800720e <_dtoa_r+0x2e>
 800745c:	2301      	movs	r3, #1
 800745e:	e7e0      	b.n	8007422 <_dtoa_r+0x242>
 8007460:	2401      	movs	r4, #1
 8007462:	2300      	movs	r3, #0
 8007464:	9309      	str	r3, [sp, #36]	@ 0x24
 8007466:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007468:	f04f 33ff 	mov.w	r3, #4294967295
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	9307      	str	r3, [sp, #28]
 8007470:	2200      	movs	r2, #0
 8007472:	2312      	movs	r3, #18
 8007474:	e7d0      	b.n	8007418 <_dtoa_r+0x238>
 8007476:	2301      	movs	r3, #1
 8007478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800747a:	e7f5      	b.n	8007468 <_dtoa_r+0x288>
 800747c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	9307      	str	r3, [sp, #28]
 8007482:	e7d7      	b.n	8007434 <_dtoa_r+0x254>
 8007484:	3101      	adds	r1, #1
 8007486:	0052      	lsls	r2, r2, #1
 8007488:	e7d8      	b.n	800743c <_dtoa_r+0x25c>
 800748a:	bf00      	nop
 800748c:	f3af 8000 	nop.w
 8007490:	636f4361 	.word	0x636f4361
 8007494:	3fd287a7 	.word	0x3fd287a7
 8007498:	8b60c8b3 	.word	0x8b60c8b3
 800749c:	3fc68a28 	.word	0x3fc68a28
 80074a0:	509f79fb 	.word	0x509f79fb
 80074a4:	3fd34413 	.word	0x3fd34413
 80074a8:	08009999 	.word	0x08009999
 80074ac:	080099b0 	.word	0x080099b0
 80074b0:	7ff00000 	.word	0x7ff00000
 80074b4:	08009969 	.word	0x08009969
 80074b8:	3ff80000 	.word	0x3ff80000
 80074bc:	08009aa8 	.word	0x08009aa8
 80074c0:	08009a08 	.word	0x08009a08
 80074c4:	08009995 	.word	0x08009995
 80074c8:	08009968 	.word	0x08009968
 80074cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074d0:	6018      	str	r0, [r3, #0]
 80074d2:	9b07      	ldr	r3, [sp, #28]
 80074d4:	2b0e      	cmp	r3, #14
 80074d6:	f200 80a4 	bhi.w	8007622 <_dtoa_r+0x442>
 80074da:	2c00      	cmp	r4, #0
 80074dc:	f000 80a1 	beq.w	8007622 <_dtoa_r+0x442>
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	dd33      	ble.n	800754c <_dtoa_r+0x36c>
 80074e4:	4bad      	ldr	r3, [pc, #692]	@ (800779c <_dtoa_r+0x5bc>)
 80074e6:	f007 020f 	and.w	r2, r7, #15
 80074ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ee:	ed93 7b00 	vldr	d7, [r3]
 80074f2:	05f8      	lsls	r0, r7, #23
 80074f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80074f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074fc:	d516      	bpl.n	800752c <_dtoa_r+0x34c>
 80074fe:	4ba8      	ldr	r3, [pc, #672]	@ (80077a0 <_dtoa_r+0x5c0>)
 8007500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007504:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007508:	f7f9 f9a0 	bl	800084c <__aeabi_ddiv>
 800750c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007510:	f004 040f 	and.w	r4, r4, #15
 8007514:	2603      	movs	r6, #3
 8007516:	4da2      	ldr	r5, [pc, #648]	@ (80077a0 <_dtoa_r+0x5c0>)
 8007518:	b954      	cbnz	r4, 8007530 <_dtoa_r+0x350>
 800751a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800751e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007522:	f7f9 f993 	bl	800084c <__aeabi_ddiv>
 8007526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800752a:	e028      	b.n	800757e <_dtoa_r+0x39e>
 800752c:	2602      	movs	r6, #2
 800752e:	e7f2      	b.n	8007516 <_dtoa_r+0x336>
 8007530:	07e1      	lsls	r1, r4, #31
 8007532:	d508      	bpl.n	8007546 <_dtoa_r+0x366>
 8007534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007538:	e9d5 2300 	ldrd	r2, r3, [r5]
 800753c:	f7f9 f85c 	bl	80005f8 <__aeabi_dmul>
 8007540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007544:	3601      	adds	r6, #1
 8007546:	1064      	asrs	r4, r4, #1
 8007548:	3508      	adds	r5, #8
 800754a:	e7e5      	b.n	8007518 <_dtoa_r+0x338>
 800754c:	f000 80d2 	beq.w	80076f4 <_dtoa_r+0x514>
 8007550:	427c      	negs	r4, r7
 8007552:	4b92      	ldr	r3, [pc, #584]	@ (800779c <_dtoa_r+0x5bc>)
 8007554:	4d92      	ldr	r5, [pc, #584]	@ (80077a0 <_dtoa_r+0x5c0>)
 8007556:	f004 020f 	and.w	r2, r4, #15
 800755a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007566:	f7f9 f847 	bl	80005f8 <__aeabi_dmul>
 800756a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800756e:	1124      	asrs	r4, r4, #4
 8007570:	2300      	movs	r3, #0
 8007572:	2602      	movs	r6, #2
 8007574:	2c00      	cmp	r4, #0
 8007576:	f040 80b2 	bne.w	80076de <_dtoa_r+0x4fe>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1d3      	bne.n	8007526 <_dtoa_r+0x346>
 800757e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007580:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80b7 	beq.w	80076f8 <_dtoa_r+0x518>
 800758a:	4b86      	ldr	r3, [pc, #536]	@ (80077a4 <_dtoa_r+0x5c4>)
 800758c:	2200      	movs	r2, #0
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f9 faa3 	bl	8000adc <__aeabi_dcmplt>
 8007596:	2800      	cmp	r0, #0
 8007598:	f000 80ae 	beq.w	80076f8 <_dtoa_r+0x518>
 800759c:	9b07      	ldr	r3, [sp, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80aa 	beq.w	80076f8 <_dtoa_r+0x518>
 80075a4:	9b00      	ldr	r3, [sp, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dd37      	ble.n	800761a <_dtoa_r+0x43a>
 80075aa:	1e7b      	subs	r3, r7, #1
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	4620      	mov	r0, r4
 80075b0:	4b7d      	ldr	r3, [pc, #500]	@ (80077a8 <_dtoa_r+0x5c8>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	4629      	mov	r1, r5
 80075b6:	f7f9 f81f 	bl	80005f8 <__aeabi_dmul>
 80075ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075be:	9c00      	ldr	r4, [sp, #0]
 80075c0:	3601      	adds	r6, #1
 80075c2:	4630      	mov	r0, r6
 80075c4:	f7f8 ffae 	bl	8000524 <__aeabi_i2d>
 80075c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075cc:	f7f9 f814 	bl	80005f8 <__aeabi_dmul>
 80075d0:	4b76      	ldr	r3, [pc, #472]	@ (80077ac <_dtoa_r+0x5cc>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	f7f8 fe5a 	bl	800028c <__adddf3>
 80075d8:	4605      	mov	r5, r0
 80075da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075de:	2c00      	cmp	r4, #0
 80075e0:	f040 808d 	bne.w	80076fe <_dtoa_r+0x51e>
 80075e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e8:	4b71      	ldr	r3, [pc, #452]	@ (80077b0 <_dtoa_r+0x5d0>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	f7f8 fe4c 	bl	8000288 <__aeabi_dsub>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075f8:	462a      	mov	r2, r5
 80075fa:	4633      	mov	r3, r6
 80075fc:	f7f9 fa8c 	bl	8000b18 <__aeabi_dcmpgt>
 8007600:	2800      	cmp	r0, #0
 8007602:	f040 828b 	bne.w	8007b1c <_dtoa_r+0x93c>
 8007606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760a:	462a      	mov	r2, r5
 800760c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007610:	f7f9 fa64 	bl	8000adc <__aeabi_dcmplt>
 8007614:	2800      	cmp	r0, #0
 8007616:	f040 8128 	bne.w	800786a <_dtoa_r+0x68a>
 800761a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800761e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007622:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007624:	2b00      	cmp	r3, #0
 8007626:	f2c0 815a 	blt.w	80078de <_dtoa_r+0x6fe>
 800762a:	2f0e      	cmp	r7, #14
 800762c:	f300 8157 	bgt.w	80078de <_dtoa_r+0x6fe>
 8007630:	4b5a      	ldr	r3, [pc, #360]	@ (800779c <_dtoa_r+0x5bc>)
 8007632:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007636:	ed93 7b00 	vldr	d7, [r3]
 800763a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800763c:	2b00      	cmp	r3, #0
 800763e:	ed8d 7b00 	vstr	d7, [sp]
 8007642:	da03      	bge.n	800764c <_dtoa_r+0x46c>
 8007644:	9b07      	ldr	r3, [sp, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f340 8101 	ble.w	800784e <_dtoa_r+0x66e>
 800764c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007650:	4656      	mov	r6, sl
 8007652:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007656:	4620      	mov	r0, r4
 8007658:	4629      	mov	r1, r5
 800765a:	f7f9 f8f7 	bl	800084c <__aeabi_ddiv>
 800765e:	f7f9 fa7b 	bl	8000b58 <__aeabi_d2iz>
 8007662:	4680      	mov	r8, r0
 8007664:	f7f8 ff5e 	bl	8000524 <__aeabi_i2d>
 8007668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800766c:	f7f8 ffc4 	bl	80005f8 <__aeabi_dmul>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4620      	mov	r0, r4
 8007676:	4629      	mov	r1, r5
 8007678:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800767c:	f7f8 fe04 	bl	8000288 <__aeabi_dsub>
 8007680:	f806 4b01 	strb.w	r4, [r6], #1
 8007684:	9d07      	ldr	r5, [sp, #28]
 8007686:	eba6 040a 	sub.w	r4, r6, sl
 800768a:	42a5      	cmp	r5, r4
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	f040 8117 	bne.w	80078c2 <_dtoa_r+0x6e2>
 8007694:	f7f8 fdfa 	bl	800028c <__adddf3>
 8007698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800769c:	4604      	mov	r4, r0
 800769e:	460d      	mov	r5, r1
 80076a0:	f7f9 fa3a 	bl	8000b18 <__aeabi_dcmpgt>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	f040 80f9 	bne.w	800789c <_dtoa_r+0x6bc>
 80076aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f9 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b6:	b118      	cbz	r0, 80076c0 <_dtoa_r+0x4e0>
 80076b8:	f018 0f01 	tst.w	r8, #1
 80076bc:	f040 80ee 	bne.w	800789c <_dtoa_r+0x6bc>
 80076c0:	4649      	mov	r1, r9
 80076c2:	4658      	mov	r0, fp
 80076c4:	f000 fc90 	bl	8007fe8 <_Bfree>
 80076c8:	2300      	movs	r3, #0
 80076ca:	7033      	strb	r3, [r6, #0]
 80076cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076ce:	3701      	adds	r7, #1
 80076d0:	601f      	str	r7, [r3, #0]
 80076d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 831d 	beq.w	8007d14 <_dtoa_r+0xb34>
 80076da:	601e      	str	r6, [r3, #0]
 80076dc:	e31a      	b.n	8007d14 <_dtoa_r+0xb34>
 80076de:	07e2      	lsls	r2, r4, #31
 80076e0:	d505      	bpl.n	80076ee <_dtoa_r+0x50e>
 80076e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076e6:	f7f8 ff87 	bl	80005f8 <__aeabi_dmul>
 80076ea:	3601      	adds	r6, #1
 80076ec:	2301      	movs	r3, #1
 80076ee:	1064      	asrs	r4, r4, #1
 80076f0:	3508      	adds	r5, #8
 80076f2:	e73f      	b.n	8007574 <_dtoa_r+0x394>
 80076f4:	2602      	movs	r6, #2
 80076f6:	e742      	b.n	800757e <_dtoa_r+0x39e>
 80076f8:	9c07      	ldr	r4, [sp, #28]
 80076fa:	9704      	str	r7, [sp, #16]
 80076fc:	e761      	b.n	80075c2 <_dtoa_r+0x3e2>
 80076fe:	4b27      	ldr	r3, [pc, #156]	@ (800779c <_dtoa_r+0x5bc>)
 8007700:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007702:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007706:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800770a:	4454      	add	r4, sl
 800770c:	2900      	cmp	r1, #0
 800770e:	d053      	beq.n	80077b8 <_dtoa_r+0x5d8>
 8007710:	4928      	ldr	r1, [pc, #160]	@ (80077b4 <_dtoa_r+0x5d4>)
 8007712:	2000      	movs	r0, #0
 8007714:	f7f9 f89a 	bl	800084c <__aeabi_ddiv>
 8007718:	4633      	mov	r3, r6
 800771a:	462a      	mov	r2, r5
 800771c:	f7f8 fdb4 	bl	8000288 <__aeabi_dsub>
 8007720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007724:	4656      	mov	r6, sl
 8007726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800772a:	f7f9 fa15 	bl	8000b58 <__aeabi_d2iz>
 800772e:	4605      	mov	r5, r0
 8007730:	f7f8 fef8 	bl	8000524 <__aeabi_i2d>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800773c:	f7f8 fda4 	bl	8000288 <__aeabi_dsub>
 8007740:	3530      	adds	r5, #48	@ 0x30
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800774a:	f806 5b01 	strb.w	r5, [r6], #1
 800774e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	d171      	bne.n	800783e <_dtoa_r+0x65e>
 800775a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800775e:	4911      	ldr	r1, [pc, #68]	@ (80077a4 <_dtoa_r+0x5c4>)
 8007760:	2000      	movs	r0, #0
 8007762:	f7f8 fd91 	bl	8000288 <__aeabi_dsub>
 8007766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800776a:	f7f9 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800776e:	2800      	cmp	r0, #0
 8007770:	f040 8095 	bne.w	800789e <_dtoa_r+0x6be>
 8007774:	42a6      	cmp	r6, r4
 8007776:	f43f af50 	beq.w	800761a <_dtoa_r+0x43a>
 800777a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800777e:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <_dtoa_r+0x5c8>)
 8007780:	2200      	movs	r2, #0
 8007782:	f7f8 ff39 	bl	80005f8 <__aeabi_dmul>
 8007786:	4b08      	ldr	r3, [pc, #32]	@ (80077a8 <_dtoa_r+0x5c8>)
 8007788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800778c:	2200      	movs	r2, #0
 800778e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007792:	f7f8 ff31 	bl	80005f8 <__aeabi_dmul>
 8007796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800779a:	e7c4      	b.n	8007726 <_dtoa_r+0x546>
 800779c:	08009aa8 	.word	0x08009aa8
 80077a0:	08009a80 	.word	0x08009a80
 80077a4:	3ff00000 	.word	0x3ff00000
 80077a8:	40240000 	.word	0x40240000
 80077ac:	401c0000 	.word	0x401c0000
 80077b0:	40140000 	.word	0x40140000
 80077b4:	3fe00000 	.word	0x3fe00000
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	f7f8 ff1c 	bl	80005f8 <__aeabi_dmul>
 80077c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80077c6:	4656      	mov	r6, sl
 80077c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077cc:	f7f9 f9c4 	bl	8000b58 <__aeabi_d2iz>
 80077d0:	4605      	mov	r5, r0
 80077d2:	f7f8 fea7 	bl	8000524 <__aeabi_i2d>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077de:	f7f8 fd53 	bl	8000288 <__aeabi_dsub>
 80077e2:	3530      	adds	r5, #48	@ 0x30
 80077e4:	f806 5b01 	strb.w	r5, [r6], #1
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	d124      	bne.n	8007842 <_dtoa_r+0x662>
 80077f8:	4bac      	ldr	r3, [pc, #688]	@ (8007aac <_dtoa_r+0x8cc>)
 80077fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077fe:	f7f8 fd45 	bl	800028c <__adddf3>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780a:	f7f9 f985 	bl	8000b18 <__aeabi_dcmpgt>
 800780e:	2800      	cmp	r0, #0
 8007810:	d145      	bne.n	800789e <_dtoa_r+0x6be>
 8007812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007816:	49a5      	ldr	r1, [pc, #660]	@ (8007aac <_dtoa_r+0x8cc>)
 8007818:	2000      	movs	r0, #0
 800781a:	f7f8 fd35 	bl	8000288 <__aeabi_dsub>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007826:	f7f9 f959 	bl	8000adc <__aeabi_dcmplt>
 800782a:	2800      	cmp	r0, #0
 800782c:	f43f aef5 	beq.w	800761a <_dtoa_r+0x43a>
 8007830:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007832:	1e73      	subs	r3, r6, #1
 8007834:	9315      	str	r3, [sp, #84]	@ 0x54
 8007836:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800783a:	2b30      	cmp	r3, #48	@ 0x30
 800783c:	d0f8      	beq.n	8007830 <_dtoa_r+0x650>
 800783e:	9f04      	ldr	r7, [sp, #16]
 8007840:	e73e      	b.n	80076c0 <_dtoa_r+0x4e0>
 8007842:	4b9b      	ldr	r3, [pc, #620]	@ (8007ab0 <_dtoa_r+0x8d0>)
 8007844:	f7f8 fed8 	bl	80005f8 <__aeabi_dmul>
 8007848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800784c:	e7bc      	b.n	80077c8 <_dtoa_r+0x5e8>
 800784e:	d10c      	bne.n	800786a <_dtoa_r+0x68a>
 8007850:	4b98      	ldr	r3, [pc, #608]	@ (8007ab4 <_dtoa_r+0x8d4>)
 8007852:	2200      	movs	r2, #0
 8007854:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007858:	f7f8 fece 	bl	80005f8 <__aeabi_dmul>
 800785c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007860:	f7f9 f950 	bl	8000b04 <__aeabi_dcmpge>
 8007864:	2800      	cmp	r0, #0
 8007866:	f000 8157 	beq.w	8007b18 <_dtoa_r+0x938>
 800786a:	2400      	movs	r4, #0
 800786c:	4625      	mov	r5, r4
 800786e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007870:	43db      	mvns	r3, r3
 8007872:	9304      	str	r3, [sp, #16]
 8007874:	4656      	mov	r6, sl
 8007876:	2700      	movs	r7, #0
 8007878:	4621      	mov	r1, r4
 800787a:	4658      	mov	r0, fp
 800787c:	f000 fbb4 	bl	8007fe8 <_Bfree>
 8007880:	2d00      	cmp	r5, #0
 8007882:	d0dc      	beq.n	800783e <_dtoa_r+0x65e>
 8007884:	b12f      	cbz	r7, 8007892 <_dtoa_r+0x6b2>
 8007886:	42af      	cmp	r7, r5
 8007888:	d003      	beq.n	8007892 <_dtoa_r+0x6b2>
 800788a:	4639      	mov	r1, r7
 800788c:	4658      	mov	r0, fp
 800788e:	f000 fbab 	bl	8007fe8 <_Bfree>
 8007892:	4629      	mov	r1, r5
 8007894:	4658      	mov	r0, fp
 8007896:	f000 fba7 	bl	8007fe8 <_Bfree>
 800789a:	e7d0      	b.n	800783e <_dtoa_r+0x65e>
 800789c:	9704      	str	r7, [sp, #16]
 800789e:	4633      	mov	r3, r6
 80078a0:	461e      	mov	r6, r3
 80078a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078a6:	2a39      	cmp	r2, #57	@ 0x39
 80078a8:	d107      	bne.n	80078ba <_dtoa_r+0x6da>
 80078aa:	459a      	cmp	sl, r3
 80078ac:	d1f8      	bne.n	80078a0 <_dtoa_r+0x6c0>
 80078ae:	9a04      	ldr	r2, [sp, #16]
 80078b0:	3201      	adds	r2, #1
 80078b2:	9204      	str	r2, [sp, #16]
 80078b4:	2230      	movs	r2, #48	@ 0x30
 80078b6:	f88a 2000 	strb.w	r2, [sl]
 80078ba:	781a      	ldrb	r2, [r3, #0]
 80078bc:	3201      	adds	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	e7bd      	b.n	800783e <_dtoa_r+0x65e>
 80078c2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ab0 <_dtoa_r+0x8d0>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	f7f8 fe97 	bl	80005f8 <__aeabi_dmul>
 80078ca:	2200      	movs	r2, #0
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	460d      	mov	r5, r1
 80078d2:	f7f9 f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f43f aebb 	beq.w	8007652 <_dtoa_r+0x472>
 80078dc:	e6f0      	b.n	80076c0 <_dtoa_r+0x4e0>
 80078de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	f000 80db 	beq.w	8007a9c <_dtoa_r+0x8bc>
 80078e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e8:	2a01      	cmp	r2, #1
 80078ea:	f300 80bf 	bgt.w	8007a6c <_dtoa_r+0x88c>
 80078ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078f0:	2a00      	cmp	r2, #0
 80078f2:	f000 80b7 	beq.w	8007a64 <_dtoa_r+0x884>
 80078f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078fc:	4646      	mov	r6, r8
 80078fe:	9a08      	ldr	r2, [sp, #32]
 8007900:	2101      	movs	r1, #1
 8007902:	441a      	add	r2, r3
 8007904:	4658      	mov	r0, fp
 8007906:	4498      	add	r8, r3
 8007908:	9208      	str	r2, [sp, #32]
 800790a:	f000 fc21 	bl	8008150 <__i2b>
 800790e:	4605      	mov	r5, r0
 8007910:	b15e      	cbz	r6, 800792a <_dtoa_r+0x74a>
 8007912:	9b08      	ldr	r3, [sp, #32]
 8007914:	2b00      	cmp	r3, #0
 8007916:	dd08      	ble.n	800792a <_dtoa_r+0x74a>
 8007918:	42b3      	cmp	r3, r6
 800791a:	9a08      	ldr	r2, [sp, #32]
 800791c:	bfa8      	it	ge
 800791e:	4633      	movge	r3, r6
 8007920:	eba8 0803 	sub.w	r8, r8, r3
 8007924:	1af6      	subs	r6, r6, r3
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	9308      	str	r3, [sp, #32]
 800792a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800792c:	b1f3      	cbz	r3, 800796c <_dtoa_r+0x78c>
 800792e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80b7 	beq.w	8007aa4 <_dtoa_r+0x8c4>
 8007936:	b18c      	cbz	r4, 800795c <_dtoa_r+0x77c>
 8007938:	4629      	mov	r1, r5
 800793a:	4622      	mov	r2, r4
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fcc7 	bl	80082d0 <__pow5mult>
 8007942:	464a      	mov	r2, r9
 8007944:	4601      	mov	r1, r0
 8007946:	4605      	mov	r5, r0
 8007948:	4658      	mov	r0, fp
 800794a:	f000 fc17 	bl	800817c <__multiply>
 800794e:	4649      	mov	r1, r9
 8007950:	9004      	str	r0, [sp, #16]
 8007952:	4658      	mov	r0, fp
 8007954:	f000 fb48 	bl	8007fe8 <_Bfree>
 8007958:	9b04      	ldr	r3, [sp, #16]
 800795a:	4699      	mov	r9, r3
 800795c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800795e:	1b1a      	subs	r2, r3, r4
 8007960:	d004      	beq.n	800796c <_dtoa_r+0x78c>
 8007962:	4649      	mov	r1, r9
 8007964:	4658      	mov	r0, fp
 8007966:	f000 fcb3 	bl	80082d0 <__pow5mult>
 800796a:	4681      	mov	r9, r0
 800796c:	2101      	movs	r1, #1
 800796e:	4658      	mov	r0, fp
 8007970:	f000 fbee 	bl	8008150 <__i2b>
 8007974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007976:	4604      	mov	r4, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 81cf 	beq.w	8007d1c <_dtoa_r+0xb3c>
 800797e:	461a      	mov	r2, r3
 8007980:	4601      	mov	r1, r0
 8007982:	4658      	mov	r0, fp
 8007984:	f000 fca4 	bl	80082d0 <__pow5mult>
 8007988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798a:	2b01      	cmp	r3, #1
 800798c:	4604      	mov	r4, r0
 800798e:	f300 8095 	bgt.w	8007abc <_dtoa_r+0x8dc>
 8007992:	9b02      	ldr	r3, [sp, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 8087 	bne.w	8007aa8 <_dtoa_r+0x8c8>
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 8089 	bne.w	8007ab8 <_dtoa_r+0x8d8>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079ac:	0d1b      	lsrs	r3, r3, #20
 80079ae:	051b      	lsls	r3, r3, #20
 80079b0:	b12b      	cbz	r3, 80079be <_dtoa_r+0x7de>
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	3301      	adds	r3, #1
 80079b6:	9308      	str	r3, [sp, #32]
 80079b8:	f108 0801 	add.w	r8, r8, #1
 80079bc:	2301      	movs	r3, #1
 80079be:	930a      	str	r3, [sp, #40]	@ 0x28
 80079c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 81b0 	beq.w	8007d28 <_dtoa_r+0xb48>
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079ce:	6918      	ldr	r0, [r3, #16]
 80079d0:	f000 fb72 	bl	80080b8 <__hi0bits>
 80079d4:	f1c0 0020 	rsb	r0, r0, #32
 80079d8:	9b08      	ldr	r3, [sp, #32]
 80079da:	4418      	add	r0, r3
 80079dc:	f010 001f 	ands.w	r0, r0, #31
 80079e0:	d077      	beq.n	8007ad2 <_dtoa_r+0x8f2>
 80079e2:	f1c0 0320 	rsb	r3, r0, #32
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	dd6b      	ble.n	8007ac2 <_dtoa_r+0x8e2>
 80079ea:	9b08      	ldr	r3, [sp, #32]
 80079ec:	f1c0 001c 	rsb	r0, r0, #28
 80079f0:	4403      	add	r3, r0
 80079f2:	4480      	add	r8, r0
 80079f4:	4406      	add	r6, r0
 80079f6:	9308      	str	r3, [sp, #32]
 80079f8:	f1b8 0f00 	cmp.w	r8, #0
 80079fc:	dd05      	ble.n	8007a0a <_dtoa_r+0x82a>
 80079fe:	4649      	mov	r1, r9
 8007a00:	4642      	mov	r2, r8
 8007a02:	4658      	mov	r0, fp
 8007a04:	f000 fcbe 	bl	8008384 <__lshift>
 8007a08:	4681      	mov	r9, r0
 8007a0a:	9b08      	ldr	r3, [sp, #32]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	dd05      	ble.n	8007a1c <_dtoa_r+0x83c>
 8007a10:	4621      	mov	r1, r4
 8007a12:	461a      	mov	r2, r3
 8007a14:	4658      	mov	r0, fp
 8007a16:	f000 fcb5 	bl	8008384 <__lshift>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d059      	beq.n	8007ad6 <_dtoa_r+0x8f6>
 8007a22:	4621      	mov	r1, r4
 8007a24:	4648      	mov	r0, r9
 8007a26:	f000 fd19 	bl	800845c <__mcmp>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	da53      	bge.n	8007ad6 <_dtoa_r+0x8f6>
 8007a2e:	1e7b      	subs	r3, r7, #1
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	4649      	mov	r1, r9
 8007a34:	2300      	movs	r3, #0
 8007a36:	220a      	movs	r2, #10
 8007a38:	4658      	mov	r0, fp
 8007a3a:	f000 faf7 	bl	800802c <__multadd>
 8007a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a40:	4681      	mov	r9, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8172 	beq.w	8007d2c <_dtoa_r+0xb4c>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	220a      	movs	r2, #10
 8007a4e:	4658      	mov	r0, fp
 8007a50:	f000 faec 	bl	800802c <__multadd>
 8007a54:	9b00      	ldr	r3, [sp, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	4605      	mov	r5, r0
 8007a5a:	dc67      	bgt.n	8007b2c <_dtoa_r+0x94c>
 8007a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	dc41      	bgt.n	8007ae6 <_dtoa_r+0x906>
 8007a62:	e063      	b.n	8007b2c <_dtoa_r+0x94c>
 8007a64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a6a:	e746      	b.n	80078fa <_dtoa_r+0x71a>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	1e5c      	subs	r4, r3, #1
 8007a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a72:	42a3      	cmp	r3, r4
 8007a74:	bfbf      	itttt	lt
 8007a76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a7c:	1ae3      	sublt	r3, r4, r3
 8007a7e:	bfb4      	ite	lt
 8007a80:	18d2      	addlt	r2, r2, r3
 8007a82:	1b1c      	subge	r4, r3, r4
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	bfbc      	itt	lt
 8007a88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a8a:	2400      	movlt	r4, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bfb5      	itete	lt
 8007a90:	eba8 0603 	sublt.w	r6, r8, r3
 8007a94:	9b07      	ldrge	r3, [sp, #28]
 8007a96:	2300      	movlt	r3, #0
 8007a98:	4646      	movge	r6, r8
 8007a9a:	e730      	b.n	80078fe <_dtoa_r+0x71e>
 8007a9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007aa0:	4646      	mov	r6, r8
 8007aa2:	e735      	b.n	8007910 <_dtoa_r+0x730>
 8007aa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007aa6:	e75c      	b.n	8007962 <_dtoa_r+0x782>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e788      	b.n	80079be <_dtoa_r+0x7de>
 8007aac:	3fe00000 	.word	0x3fe00000
 8007ab0:	40240000 	.word	0x40240000
 8007ab4:	40140000 	.word	0x40140000
 8007ab8:	9b02      	ldr	r3, [sp, #8]
 8007aba:	e780      	b.n	80079be <_dtoa_r+0x7de>
 8007abc:	2300      	movs	r3, #0
 8007abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ac0:	e782      	b.n	80079c8 <_dtoa_r+0x7e8>
 8007ac2:	d099      	beq.n	80079f8 <_dtoa_r+0x818>
 8007ac4:	9a08      	ldr	r2, [sp, #32]
 8007ac6:	331c      	adds	r3, #28
 8007ac8:	441a      	add	r2, r3
 8007aca:	4498      	add	r8, r3
 8007acc:	441e      	add	r6, r3
 8007ace:	9208      	str	r2, [sp, #32]
 8007ad0:	e792      	b.n	80079f8 <_dtoa_r+0x818>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	e7f6      	b.n	8007ac4 <_dtoa_r+0x8e4>
 8007ad6:	9b07      	ldr	r3, [sp, #28]
 8007ad8:	9704      	str	r7, [sp, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	dc20      	bgt.n	8007b20 <_dtoa_r+0x940>
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	dd1e      	ble.n	8007b24 <_dtoa_r+0x944>
 8007ae6:	9b00      	ldr	r3, [sp, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f47f aec0 	bne.w	800786e <_dtoa_r+0x68e>
 8007aee:	4621      	mov	r1, r4
 8007af0:	2205      	movs	r2, #5
 8007af2:	4658      	mov	r0, fp
 8007af4:	f000 fa9a 	bl	800802c <__multadd>
 8007af8:	4601      	mov	r1, r0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4648      	mov	r0, r9
 8007afe:	f000 fcad 	bl	800845c <__mcmp>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f77f aeb3 	ble.w	800786e <_dtoa_r+0x68e>
 8007b08:	4656      	mov	r6, sl
 8007b0a:	2331      	movs	r3, #49	@ 0x31
 8007b0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	3301      	adds	r3, #1
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	e6ae      	b.n	8007876 <_dtoa_r+0x696>
 8007b18:	9c07      	ldr	r4, [sp, #28]
 8007b1a:	9704      	str	r7, [sp, #16]
 8007b1c:	4625      	mov	r5, r4
 8007b1e:	e7f3      	b.n	8007b08 <_dtoa_r+0x928>
 8007b20:	9b07      	ldr	r3, [sp, #28]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 8104 	beq.w	8007d34 <_dtoa_r+0xb54>
 8007b2c:	2e00      	cmp	r6, #0
 8007b2e:	dd05      	ble.n	8007b3c <_dtoa_r+0x95c>
 8007b30:	4629      	mov	r1, r5
 8007b32:	4632      	mov	r2, r6
 8007b34:	4658      	mov	r0, fp
 8007b36:	f000 fc25 	bl	8008384 <__lshift>
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d05a      	beq.n	8007bf8 <_dtoa_r+0xa18>
 8007b42:	6869      	ldr	r1, [r5, #4]
 8007b44:	4658      	mov	r0, fp
 8007b46:	f000 fa0f 	bl	8007f68 <_Balloc>
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	b928      	cbnz	r0, 8007b5a <_dtoa_r+0x97a>
 8007b4e:	4b84      	ldr	r3, [pc, #528]	@ (8007d60 <_dtoa_r+0xb80>)
 8007b50:	4602      	mov	r2, r0
 8007b52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b56:	f7ff bb5a 	b.w	800720e <_dtoa_r+0x2e>
 8007b5a:	692a      	ldr	r2, [r5, #16]
 8007b5c:	3202      	adds	r2, #2
 8007b5e:	0092      	lsls	r2, r2, #2
 8007b60:	f105 010c 	add.w	r1, r5, #12
 8007b64:	300c      	adds	r0, #12
 8007b66:	f7ff faa4 	bl	80070b2 <memcpy>
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4658      	mov	r0, fp
 8007b70:	f000 fc08 	bl	8008384 <__lshift>
 8007b74:	f10a 0301 	add.w	r3, sl, #1
 8007b78:	9307      	str	r3, [sp, #28]
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	4453      	add	r3, sl
 8007b7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b80:	9b02      	ldr	r3, [sp, #8]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	462f      	mov	r7, r5
 8007b88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	9b07      	ldr	r3, [sp, #28]
 8007b8e:	4621      	mov	r1, r4
 8007b90:	3b01      	subs	r3, #1
 8007b92:	4648      	mov	r0, r9
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	f7ff fa9a 	bl	80070ce <quorem>
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	9002      	str	r0, [sp, #8]
 8007b9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ba2:	4648      	mov	r0, r9
 8007ba4:	f000 fc5a 	bl	800845c <__mcmp>
 8007ba8:	462a      	mov	r2, r5
 8007baa:	9008      	str	r0, [sp, #32]
 8007bac:	4621      	mov	r1, r4
 8007bae:	4658      	mov	r0, fp
 8007bb0:	f000 fc70 	bl	8008494 <__mdiff>
 8007bb4:	68c2      	ldr	r2, [r0, #12]
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	bb02      	cbnz	r2, 8007bfc <_dtoa_r+0xa1c>
 8007bba:	4601      	mov	r1, r0
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f000 fc4d 	bl	800845c <__mcmp>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4658      	mov	r0, fp
 8007bc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bca:	f000 fa0d 	bl	8007fe8 <_Bfree>
 8007bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bd2:	9e07      	ldr	r6, [sp, #28]
 8007bd4:	ea43 0102 	orr.w	r1, r3, r2
 8007bd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bda:	4319      	orrs	r1, r3
 8007bdc:	d110      	bne.n	8007c00 <_dtoa_r+0xa20>
 8007bde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007be2:	d029      	beq.n	8007c38 <_dtoa_r+0xa58>
 8007be4:	9b08      	ldr	r3, [sp, #32]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dd02      	ble.n	8007bf0 <_dtoa_r+0xa10>
 8007bea:	9b02      	ldr	r3, [sp, #8]
 8007bec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007bf0:	9b00      	ldr	r3, [sp, #0]
 8007bf2:	f883 8000 	strb.w	r8, [r3]
 8007bf6:	e63f      	b.n	8007878 <_dtoa_r+0x698>
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	e7bb      	b.n	8007b74 <_dtoa_r+0x994>
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	e7e1      	b.n	8007bc4 <_dtoa_r+0x9e4>
 8007c00:	9b08      	ldr	r3, [sp, #32]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	db04      	blt.n	8007c10 <_dtoa_r+0xa30>
 8007c06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	d120      	bne.n	8007c52 <_dtoa_r+0xa72>
 8007c10:	2a00      	cmp	r2, #0
 8007c12:	dded      	ble.n	8007bf0 <_dtoa_r+0xa10>
 8007c14:	4649      	mov	r1, r9
 8007c16:	2201      	movs	r2, #1
 8007c18:	4658      	mov	r0, fp
 8007c1a:	f000 fbb3 	bl	8008384 <__lshift>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4681      	mov	r9, r0
 8007c22:	f000 fc1b 	bl	800845c <__mcmp>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	dc03      	bgt.n	8007c32 <_dtoa_r+0xa52>
 8007c2a:	d1e1      	bne.n	8007bf0 <_dtoa_r+0xa10>
 8007c2c:	f018 0f01 	tst.w	r8, #1
 8007c30:	d0de      	beq.n	8007bf0 <_dtoa_r+0xa10>
 8007c32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c36:	d1d8      	bne.n	8007bea <_dtoa_r+0xa0a>
 8007c38:	9a00      	ldr	r2, [sp, #0]
 8007c3a:	2339      	movs	r3, #57	@ 0x39
 8007c3c:	7013      	strb	r3, [r2, #0]
 8007c3e:	4633      	mov	r3, r6
 8007c40:	461e      	mov	r6, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c48:	2a39      	cmp	r2, #57	@ 0x39
 8007c4a:	d052      	beq.n	8007cf2 <_dtoa_r+0xb12>
 8007c4c:	3201      	adds	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e612      	b.n	8007878 <_dtoa_r+0x698>
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	dd07      	ble.n	8007c66 <_dtoa_r+0xa86>
 8007c56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c5a:	d0ed      	beq.n	8007c38 <_dtoa_r+0xa58>
 8007c5c:	9a00      	ldr	r2, [sp, #0]
 8007c5e:	f108 0301 	add.w	r3, r8, #1
 8007c62:	7013      	strb	r3, [r2, #0]
 8007c64:	e608      	b.n	8007878 <_dtoa_r+0x698>
 8007c66:	9b07      	ldr	r3, [sp, #28]
 8007c68:	9a07      	ldr	r2, [sp, #28]
 8007c6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d028      	beq.n	8007cc6 <_dtoa_r+0xae6>
 8007c74:	4649      	mov	r1, r9
 8007c76:	2300      	movs	r3, #0
 8007c78:	220a      	movs	r2, #10
 8007c7a:	4658      	mov	r0, fp
 8007c7c:	f000 f9d6 	bl	800802c <__multadd>
 8007c80:	42af      	cmp	r7, r5
 8007c82:	4681      	mov	r9, r0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	f04f 020a 	mov.w	r2, #10
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	4658      	mov	r0, fp
 8007c90:	d107      	bne.n	8007ca2 <_dtoa_r+0xac2>
 8007c92:	f000 f9cb 	bl	800802c <__multadd>
 8007c96:	4607      	mov	r7, r0
 8007c98:	4605      	mov	r5, r0
 8007c9a:	9b07      	ldr	r3, [sp, #28]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	9307      	str	r3, [sp, #28]
 8007ca0:	e774      	b.n	8007b8c <_dtoa_r+0x9ac>
 8007ca2:	f000 f9c3 	bl	800802c <__multadd>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4607      	mov	r7, r0
 8007caa:	2300      	movs	r3, #0
 8007cac:	220a      	movs	r2, #10
 8007cae:	4658      	mov	r0, fp
 8007cb0:	f000 f9bc 	bl	800802c <__multadd>
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	e7f0      	b.n	8007c9a <_dtoa_r+0xaba>
 8007cb8:	9b00      	ldr	r3, [sp, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bfcc      	ite	gt
 8007cbe:	461e      	movgt	r6, r3
 8007cc0:	2601      	movle	r6, #1
 8007cc2:	4456      	add	r6, sl
 8007cc4:	2700      	movs	r7, #0
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	2201      	movs	r2, #1
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f000 fb5a 	bl	8008384 <__lshift>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4681      	mov	r9, r0
 8007cd4:	f000 fbc2 	bl	800845c <__mcmp>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	dcb0      	bgt.n	8007c3e <_dtoa_r+0xa5e>
 8007cdc:	d102      	bne.n	8007ce4 <_dtoa_r+0xb04>
 8007cde:	f018 0f01 	tst.w	r8, #1
 8007ce2:	d1ac      	bne.n	8007c3e <_dtoa_r+0xa5e>
 8007ce4:	4633      	mov	r3, r6
 8007ce6:	461e      	mov	r6, r3
 8007ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cec:	2a30      	cmp	r2, #48	@ 0x30
 8007cee:	d0fa      	beq.n	8007ce6 <_dtoa_r+0xb06>
 8007cf0:	e5c2      	b.n	8007878 <_dtoa_r+0x698>
 8007cf2:	459a      	cmp	sl, r3
 8007cf4:	d1a4      	bne.n	8007c40 <_dtoa_r+0xa60>
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	2331      	movs	r3, #49	@ 0x31
 8007cfe:	f88a 3000 	strb.w	r3, [sl]
 8007d02:	e5b9      	b.n	8007878 <_dtoa_r+0x698>
 8007d04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d64 <_dtoa_r+0xb84>
 8007d0a:	b11b      	cbz	r3, 8007d14 <_dtoa_r+0xb34>
 8007d0c:	f10a 0308 	add.w	r3, sl, #8
 8007d10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	4650      	mov	r0, sl
 8007d16:	b019      	add	sp, #100	@ 0x64
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	f77f ae37 	ble.w	8007992 <_dtoa_r+0x7b2>
 8007d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d28:	2001      	movs	r0, #1
 8007d2a:	e655      	b.n	80079d8 <_dtoa_r+0x7f8>
 8007d2c:	9b00      	ldr	r3, [sp, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f77f aed6 	ble.w	8007ae0 <_dtoa_r+0x900>
 8007d34:	4656      	mov	r6, sl
 8007d36:	4621      	mov	r1, r4
 8007d38:	4648      	mov	r0, r9
 8007d3a:	f7ff f9c8 	bl	80070ce <quorem>
 8007d3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d42:	f806 8b01 	strb.w	r8, [r6], #1
 8007d46:	9b00      	ldr	r3, [sp, #0]
 8007d48:	eba6 020a 	sub.w	r2, r6, sl
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	ddb3      	ble.n	8007cb8 <_dtoa_r+0xad8>
 8007d50:	4649      	mov	r1, r9
 8007d52:	2300      	movs	r3, #0
 8007d54:	220a      	movs	r2, #10
 8007d56:	4658      	mov	r0, fp
 8007d58:	f000 f968 	bl	800802c <__multadd>
 8007d5c:	4681      	mov	r9, r0
 8007d5e:	e7ea      	b.n	8007d36 <_dtoa_r+0xb56>
 8007d60:	08009a08 	.word	0x08009a08
 8007d64:	0800998c 	.word	0x0800998c

08007d68 <_free_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d041      	beq.n	8007df4 <_free_r+0x8c>
 8007d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d74:	1f0c      	subs	r4, r1, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bfb8      	it	lt
 8007d7a:	18e4      	addlt	r4, r4, r3
 8007d7c:	f000 f8e8 	bl	8007f50 <__malloc_lock>
 8007d80:	4a1d      	ldr	r2, [pc, #116]	@ (8007df8 <_free_r+0x90>)
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	b933      	cbnz	r3, 8007d94 <_free_r+0x2c>
 8007d86:	6063      	str	r3, [r4, #4]
 8007d88:	6014      	str	r4, [r2, #0]
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d90:	f000 b8e4 	b.w	8007f5c <__malloc_unlock>
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d908      	bls.n	8007daa <_free_r+0x42>
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	1821      	adds	r1, r4, r0
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	bf01      	itttt	eq
 8007da0:	6819      	ldreq	r1, [r3, #0]
 8007da2:	685b      	ldreq	r3, [r3, #4]
 8007da4:	1809      	addeq	r1, r1, r0
 8007da6:	6021      	streq	r1, [r4, #0]
 8007da8:	e7ed      	b.n	8007d86 <_free_r+0x1e>
 8007daa:	461a      	mov	r2, r3
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	b10b      	cbz	r3, 8007db4 <_free_r+0x4c>
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d9fa      	bls.n	8007daa <_free_r+0x42>
 8007db4:	6811      	ldr	r1, [r2, #0]
 8007db6:	1850      	adds	r0, r2, r1
 8007db8:	42a0      	cmp	r0, r4
 8007dba:	d10b      	bne.n	8007dd4 <_free_r+0x6c>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	4401      	add	r1, r0
 8007dc0:	1850      	adds	r0, r2, r1
 8007dc2:	4283      	cmp	r3, r0
 8007dc4:	6011      	str	r1, [r2, #0]
 8007dc6:	d1e0      	bne.n	8007d8a <_free_r+0x22>
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	6053      	str	r3, [r2, #4]
 8007dce:	4408      	add	r0, r1
 8007dd0:	6010      	str	r0, [r2, #0]
 8007dd2:	e7da      	b.n	8007d8a <_free_r+0x22>
 8007dd4:	d902      	bls.n	8007ddc <_free_r+0x74>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	e7d6      	b.n	8007d8a <_free_r+0x22>
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	1821      	adds	r1, r4, r0
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf04      	itt	eq
 8007de4:	6819      	ldreq	r1, [r3, #0]
 8007de6:	685b      	ldreq	r3, [r3, #4]
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	bf04      	itt	eq
 8007dec:	1809      	addeq	r1, r1, r0
 8007dee:	6021      	streq	r1, [r4, #0]
 8007df0:	6054      	str	r4, [r2, #4]
 8007df2:	e7ca      	b.n	8007d8a <_free_r+0x22>
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	bf00      	nop
 8007df8:	2000115c 	.word	0x2000115c

08007dfc <malloc>:
 8007dfc:	4b02      	ldr	r3, [pc, #8]	@ (8007e08 <malloc+0xc>)
 8007dfe:	4601      	mov	r1, r0
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	f000 b825 	b.w	8007e50 <_malloc_r>
 8007e06:	bf00      	nop
 8007e08:	2000002c 	.word	0x2000002c

08007e0c <sbrk_aligned>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007e4c <sbrk_aligned+0x40>)
 8007e10:	460c      	mov	r4, r1
 8007e12:	6831      	ldr	r1, [r6, #0]
 8007e14:	4605      	mov	r5, r0
 8007e16:	b911      	cbnz	r1, 8007e1e <sbrk_aligned+0x12>
 8007e18:	f000 fece 	bl	8008bb8 <_sbrk_r>
 8007e1c:	6030      	str	r0, [r6, #0]
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	f000 fec9 	bl	8008bb8 <_sbrk_r>
 8007e26:	1c43      	adds	r3, r0, #1
 8007e28:	d103      	bne.n	8007e32 <sbrk_aligned+0x26>
 8007e2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e2e:	4620      	mov	r0, r4
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	1cc4      	adds	r4, r0, #3
 8007e34:	f024 0403 	bic.w	r4, r4, #3
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d0f8      	beq.n	8007e2e <sbrk_aligned+0x22>
 8007e3c:	1a21      	subs	r1, r4, r0
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 feba 	bl	8008bb8 <_sbrk_r>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d1f2      	bne.n	8007e2e <sbrk_aligned+0x22>
 8007e48:	e7ef      	b.n	8007e2a <sbrk_aligned+0x1e>
 8007e4a:	bf00      	nop
 8007e4c:	20001158 	.word	0x20001158

08007e50 <_malloc_r>:
 8007e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	1ccd      	adds	r5, r1, #3
 8007e56:	f025 0503 	bic.w	r5, r5, #3
 8007e5a:	3508      	adds	r5, #8
 8007e5c:	2d0c      	cmp	r5, #12
 8007e5e:	bf38      	it	cc
 8007e60:	250c      	movcc	r5, #12
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	4606      	mov	r6, r0
 8007e66:	db01      	blt.n	8007e6c <_malloc_r+0x1c>
 8007e68:	42a9      	cmp	r1, r5
 8007e6a:	d904      	bls.n	8007e76 <_malloc_r+0x26>
 8007e6c:	230c      	movs	r3, #12
 8007e6e:	6033      	str	r3, [r6, #0]
 8007e70:	2000      	movs	r0, #0
 8007e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f4c <_malloc_r+0xfc>
 8007e7a:	f000 f869 	bl	8007f50 <__malloc_lock>
 8007e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e82:	461c      	mov	r4, r3
 8007e84:	bb44      	cbnz	r4, 8007ed8 <_malloc_r+0x88>
 8007e86:	4629      	mov	r1, r5
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff ffbf 	bl	8007e0c <sbrk_aligned>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	4604      	mov	r4, r0
 8007e92:	d158      	bne.n	8007f46 <_malloc_r+0xf6>
 8007e94:	f8d8 4000 	ldr.w	r4, [r8]
 8007e98:	4627      	mov	r7, r4
 8007e9a:	2f00      	cmp	r7, #0
 8007e9c:	d143      	bne.n	8007f26 <_malloc_r+0xd6>
 8007e9e:	2c00      	cmp	r4, #0
 8007ea0:	d04b      	beq.n	8007f3a <_malloc_r+0xea>
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	eb04 0903 	add.w	r9, r4, r3
 8007eac:	f000 fe84 	bl	8008bb8 <_sbrk_r>
 8007eb0:	4581      	cmp	r9, r0
 8007eb2:	d142      	bne.n	8007f3a <_malloc_r+0xea>
 8007eb4:	6821      	ldr	r1, [r4, #0]
 8007eb6:	1a6d      	subs	r5, r5, r1
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7ff ffa6 	bl	8007e0c <sbrk_aligned>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d03a      	beq.n	8007f3a <_malloc_r+0xea>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	442b      	add	r3, r5
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	f8d8 3000 	ldr.w	r3, [r8]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	bb62      	cbnz	r2, 8007f2c <_malloc_r+0xdc>
 8007ed2:	f8c8 7000 	str.w	r7, [r8]
 8007ed6:	e00f      	b.n	8007ef8 <_malloc_r+0xa8>
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	1b52      	subs	r2, r2, r5
 8007edc:	d420      	bmi.n	8007f20 <_malloc_r+0xd0>
 8007ede:	2a0b      	cmp	r2, #11
 8007ee0:	d917      	bls.n	8007f12 <_malloc_r+0xc2>
 8007ee2:	1961      	adds	r1, r4, r5
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	6025      	str	r5, [r4, #0]
 8007ee8:	bf18      	it	ne
 8007eea:	6059      	strne	r1, [r3, #4]
 8007eec:	6863      	ldr	r3, [r4, #4]
 8007eee:	bf08      	it	eq
 8007ef0:	f8c8 1000 	streq.w	r1, [r8]
 8007ef4:	5162      	str	r2, [r4, r5]
 8007ef6:	604b      	str	r3, [r1, #4]
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 f82f 	bl	8007f5c <__malloc_unlock>
 8007efe:	f104 000b 	add.w	r0, r4, #11
 8007f02:	1d23      	adds	r3, r4, #4
 8007f04:	f020 0007 	bic.w	r0, r0, #7
 8007f08:	1ac2      	subs	r2, r0, r3
 8007f0a:	bf1c      	itt	ne
 8007f0c:	1a1b      	subne	r3, r3, r0
 8007f0e:	50a3      	strne	r3, [r4, r2]
 8007f10:	e7af      	b.n	8007e72 <_malloc_r+0x22>
 8007f12:	6862      	ldr	r2, [r4, #4]
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	bf0c      	ite	eq
 8007f18:	f8c8 2000 	streq.w	r2, [r8]
 8007f1c:	605a      	strne	r2, [r3, #4]
 8007f1e:	e7eb      	b.n	8007ef8 <_malloc_r+0xa8>
 8007f20:	4623      	mov	r3, r4
 8007f22:	6864      	ldr	r4, [r4, #4]
 8007f24:	e7ae      	b.n	8007e84 <_malloc_r+0x34>
 8007f26:	463c      	mov	r4, r7
 8007f28:	687f      	ldr	r7, [r7, #4]
 8007f2a:	e7b6      	b.n	8007e9a <_malloc_r+0x4a>
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	42a3      	cmp	r3, r4
 8007f32:	d1fb      	bne.n	8007f2c <_malloc_r+0xdc>
 8007f34:	2300      	movs	r3, #0
 8007f36:	6053      	str	r3, [r2, #4]
 8007f38:	e7de      	b.n	8007ef8 <_malloc_r+0xa8>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	6033      	str	r3, [r6, #0]
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f000 f80c 	bl	8007f5c <__malloc_unlock>
 8007f44:	e794      	b.n	8007e70 <_malloc_r+0x20>
 8007f46:	6005      	str	r5, [r0, #0]
 8007f48:	e7d6      	b.n	8007ef8 <_malloc_r+0xa8>
 8007f4a:	bf00      	nop
 8007f4c:	2000115c 	.word	0x2000115c

08007f50 <__malloc_lock>:
 8007f50:	4801      	ldr	r0, [pc, #4]	@ (8007f58 <__malloc_lock+0x8>)
 8007f52:	f7ff b8ac 	b.w	80070ae <__retarget_lock_acquire_recursive>
 8007f56:	bf00      	nop
 8007f58:	20001154 	.word	0x20001154

08007f5c <__malloc_unlock>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	@ (8007f64 <__malloc_unlock+0x8>)
 8007f5e:	f7ff b8a7 	b.w	80070b0 <__retarget_lock_release_recursive>
 8007f62:	bf00      	nop
 8007f64:	20001154 	.word	0x20001154

08007f68 <_Balloc>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	69c6      	ldr	r6, [r0, #28]
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	460d      	mov	r5, r1
 8007f70:	b976      	cbnz	r6, 8007f90 <_Balloc+0x28>
 8007f72:	2010      	movs	r0, #16
 8007f74:	f7ff ff42 	bl	8007dfc <malloc>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	61e0      	str	r0, [r4, #28]
 8007f7c:	b920      	cbnz	r0, 8007f88 <_Balloc+0x20>
 8007f7e:	4b18      	ldr	r3, [pc, #96]	@ (8007fe0 <_Balloc+0x78>)
 8007f80:	4818      	ldr	r0, [pc, #96]	@ (8007fe4 <_Balloc+0x7c>)
 8007f82:	216b      	movs	r1, #107	@ 0x6b
 8007f84:	f000 fe28 	bl	8008bd8 <__assert_func>
 8007f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f8c:	6006      	str	r6, [r0, #0]
 8007f8e:	60c6      	str	r6, [r0, #12]
 8007f90:	69e6      	ldr	r6, [r4, #28]
 8007f92:	68f3      	ldr	r3, [r6, #12]
 8007f94:	b183      	cbz	r3, 8007fb8 <_Balloc+0x50>
 8007f96:	69e3      	ldr	r3, [r4, #28]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f9e:	b9b8      	cbnz	r0, 8007fd0 <_Balloc+0x68>
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	fa01 f605 	lsl.w	r6, r1, r5
 8007fa6:	1d72      	adds	r2, r6, #5
 8007fa8:	0092      	lsls	r2, r2, #2
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 fe32 	bl	8008c14 <_calloc_r>
 8007fb0:	b160      	cbz	r0, 8007fcc <_Balloc+0x64>
 8007fb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fb6:	e00e      	b.n	8007fd6 <_Balloc+0x6e>
 8007fb8:	2221      	movs	r2, #33	@ 0x21
 8007fba:	2104      	movs	r1, #4
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f000 fe29 	bl	8008c14 <_calloc_r>
 8007fc2:	69e3      	ldr	r3, [r4, #28]
 8007fc4:	60f0      	str	r0, [r6, #12]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e4      	bne.n	8007f96 <_Balloc+0x2e>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	6802      	ldr	r2, [r0, #0]
 8007fd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fdc:	e7f7      	b.n	8007fce <_Balloc+0x66>
 8007fde:	bf00      	nop
 8007fe0:	08009999 	.word	0x08009999
 8007fe4:	08009a19 	.word	0x08009a19

08007fe8 <_Bfree>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	69c6      	ldr	r6, [r0, #28]
 8007fec:	4605      	mov	r5, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	b976      	cbnz	r6, 8008010 <_Bfree+0x28>
 8007ff2:	2010      	movs	r0, #16
 8007ff4:	f7ff ff02 	bl	8007dfc <malloc>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	61e8      	str	r0, [r5, #28]
 8007ffc:	b920      	cbnz	r0, 8008008 <_Bfree+0x20>
 8007ffe:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <_Bfree+0x3c>)
 8008000:	4809      	ldr	r0, [pc, #36]	@ (8008028 <_Bfree+0x40>)
 8008002:	218f      	movs	r1, #143	@ 0x8f
 8008004:	f000 fde8 	bl	8008bd8 <__assert_func>
 8008008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800800c:	6006      	str	r6, [r0, #0]
 800800e:	60c6      	str	r6, [r0, #12]
 8008010:	b13c      	cbz	r4, 8008022 <_Bfree+0x3a>
 8008012:	69eb      	ldr	r3, [r5, #28]
 8008014:	6862      	ldr	r2, [r4, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800801c:	6021      	str	r1, [r4, #0]
 800801e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	08009999 	.word	0x08009999
 8008028:	08009a19 	.word	0x08009a19

0800802c <__multadd>:
 800802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008030:	690d      	ldr	r5, [r1, #16]
 8008032:	4607      	mov	r7, r0
 8008034:	460c      	mov	r4, r1
 8008036:	461e      	mov	r6, r3
 8008038:	f101 0c14 	add.w	ip, r1, #20
 800803c:	2000      	movs	r0, #0
 800803e:	f8dc 3000 	ldr.w	r3, [ip]
 8008042:	b299      	uxth	r1, r3
 8008044:	fb02 6101 	mla	r1, r2, r1, r6
 8008048:	0c1e      	lsrs	r6, r3, #16
 800804a:	0c0b      	lsrs	r3, r1, #16
 800804c:	fb02 3306 	mla	r3, r2, r6, r3
 8008050:	b289      	uxth	r1, r1
 8008052:	3001      	adds	r0, #1
 8008054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008058:	4285      	cmp	r5, r0
 800805a:	f84c 1b04 	str.w	r1, [ip], #4
 800805e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008062:	dcec      	bgt.n	800803e <__multadd+0x12>
 8008064:	b30e      	cbz	r6, 80080aa <__multadd+0x7e>
 8008066:	68a3      	ldr	r3, [r4, #8]
 8008068:	42ab      	cmp	r3, r5
 800806a:	dc19      	bgt.n	80080a0 <__multadd+0x74>
 800806c:	6861      	ldr	r1, [r4, #4]
 800806e:	4638      	mov	r0, r7
 8008070:	3101      	adds	r1, #1
 8008072:	f7ff ff79 	bl	8007f68 <_Balloc>
 8008076:	4680      	mov	r8, r0
 8008078:	b928      	cbnz	r0, 8008086 <__multadd+0x5a>
 800807a:	4602      	mov	r2, r0
 800807c:	4b0c      	ldr	r3, [pc, #48]	@ (80080b0 <__multadd+0x84>)
 800807e:	480d      	ldr	r0, [pc, #52]	@ (80080b4 <__multadd+0x88>)
 8008080:	21ba      	movs	r1, #186	@ 0xba
 8008082:	f000 fda9 	bl	8008bd8 <__assert_func>
 8008086:	6922      	ldr	r2, [r4, #16]
 8008088:	3202      	adds	r2, #2
 800808a:	f104 010c 	add.w	r1, r4, #12
 800808e:	0092      	lsls	r2, r2, #2
 8008090:	300c      	adds	r0, #12
 8008092:	f7ff f80e 	bl	80070b2 <memcpy>
 8008096:	4621      	mov	r1, r4
 8008098:	4638      	mov	r0, r7
 800809a:	f7ff ffa5 	bl	8007fe8 <_Bfree>
 800809e:	4644      	mov	r4, r8
 80080a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080a4:	3501      	adds	r5, #1
 80080a6:	615e      	str	r6, [r3, #20]
 80080a8:	6125      	str	r5, [r4, #16]
 80080aa:	4620      	mov	r0, r4
 80080ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b0:	08009a08 	.word	0x08009a08
 80080b4:	08009a19 	.word	0x08009a19

080080b8 <__hi0bits>:
 80080b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080bc:	4603      	mov	r3, r0
 80080be:	bf36      	itet	cc
 80080c0:	0403      	lslcc	r3, r0, #16
 80080c2:	2000      	movcs	r0, #0
 80080c4:	2010      	movcc	r0, #16
 80080c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080ca:	bf3c      	itt	cc
 80080cc:	021b      	lslcc	r3, r3, #8
 80080ce:	3008      	addcc	r0, #8
 80080d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080d4:	bf3c      	itt	cc
 80080d6:	011b      	lslcc	r3, r3, #4
 80080d8:	3004      	addcc	r0, #4
 80080da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080de:	bf3c      	itt	cc
 80080e0:	009b      	lslcc	r3, r3, #2
 80080e2:	3002      	addcc	r0, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	db05      	blt.n	80080f4 <__hi0bits+0x3c>
 80080e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080ec:	f100 0001 	add.w	r0, r0, #1
 80080f0:	bf08      	it	eq
 80080f2:	2020      	moveq	r0, #32
 80080f4:	4770      	bx	lr

080080f6 <__lo0bits>:
 80080f6:	6803      	ldr	r3, [r0, #0]
 80080f8:	4602      	mov	r2, r0
 80080fa:	f013 0007 	ands.w	r0, r3, #7
 80080fe:	d00b      	beq.n	8008118 <__lo0bits+0x22>
 8008100:	07d9      	lsls	r1, r3, #31
 8008102:	d421      	bmi.n	8008148 <__lo0bits+0x52>
 8008104:	0798      	lsls	r0, r3, #30
 8008106:	bf49      	itett	mi
 8008108:	085b      	lsrmi	r3, r3, #1
 800810a:	089b      	lsrpl	r3, r3, #2
 800810c:	2001      	movmi	r0, #1
 800810e:	6013      	strmi	r3, [r2, #0]
 8008110:	bf5c      	itt	pl
 8008112:	6013      	strpl	r3, [r2, #0]
 8008114:	2002      	movpl	r0, #2
 8008116:	4770      	bx	lr
 8008118:	b299      	uxth	r1, r3
 800811a:	b909      	cbnz	r1, 8008120 <__lo0bits+0x2a>
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	2010      	movs	r0, #16
 8008120:	b2d9      	uxtb	r1, r3
 8008122:	b909      	cbnz	r1, 8008128 <__lo0bits+0x32>
 8008124:	3008      	adds	r0, #8
 8008126:	0a1b      	lsrs	r3, r3, #8
 8008128:	0719      	lsls	r1, r3, #28
 800812a:	bf04      	itt	eq
 800812c:	091b      	lsreq	r3, r3, #4
 800812e:	3004      	addeq	r0, #4
 8008130:	0799      	lsls	r1, r3, #30
 8008132:	bf04      	itt	eq
 8008134:	089b      	lsreq	r3, r3, #2
 8008136:	3002      	addeq	r0, #2
 8008138:	07d9      	lsls	r1, r3, #31
 800813a:	d403      	bmi.n	8008144 <__lo0bits+0x4e>
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	f100 0001 	add.w	r0, r0, #1
 8008142:	d003      	beq.n	800814c <__lo0bits+0x56>
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	4770      	bx	lr
 8008148:	2000      	movs	r0, #0
 800814a:	4770      	bx	lr
 800814c:	2020      	movs	r0, #32
 800814e:	4770      	bx	lr

08008150 <__i2b>:
 8008150:	b510      	push	{r4, lr}
 8008152:	460c      	mov	r4, r1
 8008154:	2101      	movs	r1, #1
 8008156:	f7ff ff07 	bl	8007f68 <_Balloc>
 800815a:	4602      	mov	r2, r0
 800815c:	b928      	cbnz	r0, 800816a <__i2b+0x1a>
 800815e:	4b05      	ldr	r3, [pc, #20]	@ (8008174 <__i2b+0x24>)
 8008160:	4805      	ldr	r0, [pc, #20]	@ (8008178 <__i2b+0x28>)
 8008162:	f240 1145 	movw	r1, #325	@ 0x145
 8008166:	f000 fd37 	bl	8008bd8 <__assert_func>
 800816a:	2301      	movs	r3, #1
 800816c:	6144      	str	r4, [r0, #20]
 800816e:	6103      	str	r3, [r0, #16]
 8008170:	bd10      	pop	{r4, pc}
 8008172:	bf00      	nop
 8008174:	08009a08 	.word	0x08009a08
 8008178:	08009a19 	.word	0x08009a19

0800817c <__multiply>:
 800817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	4614      	mov	r4, r2
 8008182:	690a      	ldr	r2, [r1, #16]
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	bfa8      	it	ge
 800818a:	4623      	movge	r3, r4
 800818c:	460f      	mov	r7, r1
 800818e:	bfa4      	itt	ge
 8008190:	460c      	movge	r4, r1
 8008192:	461f      	movge	r7, r3
 8008194:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008198:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800819c:	68a3      	ldr	r3, [r4, #8]
 800819e:	6861      	ldr	r1, [r4, #4]
 80081a0:	eb0a 0609 	add.w	r6, sl, r9
 80081a4:	42b3      	cmp	r3, r6
 80081a6:	b085      	sub	sp, #20
 80081a8:	bfb8      	it	lt
 80081aa:	3101      	addlt	r1, #1
 80081ac:	f7ff fedc 	bl	8007f68 <_Balloc>
 80081b0:	b930      	cbnz	r0, 80081c0 <__multiply+0x44>
 80081b2:	4602      	mov	r2, r0
 80081b4:	4b44      	ldr	r3, [pc, #272]	@ (80082c8 <__multiply+0x14c>)
 80081b6:	4845      	ldr	r0, [pc, #276]	@ (80082cc <__multiply+0x150>)
 80081b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081bc:	f000 fd0c 	bl	8008bd8 <__assert_func>
 80081c0:	f100 0514 	add.w	r5, r0, #20
 80081c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081c8:	462b      	mov	r3, r5
 80081ca:	2200      	movs	r2, #0
 80081cc:	4543      	cmp	r3, r8
 80081ce:	d321      	bcc.n	8008214 <__multiply+0x98>
 80081d0:	f107 0114 	add.w	r1, r7, #20
 80081d4:	f104 0214 	add.w	r2, r4, #20
 80081d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081e0:	9302      	str	r3, [sp, #8]
 80081e2:	1b13      	subs	r3, r2, r4
 80081e4:	3b15      	subs	r3, #21
 80081e6:	f023 0303 	bic.w	r3, r3, #3
 80081ea:	3304      	adds	r3, #4
 80081ec:	f104 0715 	add.w	r7, r4, #21
 80081f0:	42ba      	cmp	r2, r7
 80081f2:	bf38      	it	cc
 80081f4:	2304      	movcc	r3, #4
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	9b02      	ldr	r3, [sp, #8]
 80081fa:	9103      	str	r1, [sp, #12]
 80081fc:	428b      	cmp	r3, r1
 80081fe:	d80c      	bhi.n	800821a <__multiply+0x9e>
 8008200:	2e00      	cmp	r6, #0
 8008202:	dd03      	ble.n	800820c <__multiply+0x90>
 8008204:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008208:	2b00      	cmp	r3, #0
 800820a:	d05b      	beq.n	80082c4 <__multiply+0x148>
 800820c:	6106      	str	r6, [r0, #16]
 800820e:	b005      	add	sp, #20
 8008210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008214:	f843 2b04 	str.w	r2, [r3], #4
 8008218:	e7d8      	b.n	80081cc <__multiply+0x50>
 800821a:	f8b1 a000 	ldrh.w	sl, [r1]
 800821e:	f1ba 0f00 	cmp.w	sl, #0
 8008222:	d024      	beq.n	800826e <__multiply+0xf2>
 8008224:	f104 0e14 	add.w	lr, r4, #20
 8008228:	46a9      	mov	r9, r5
 800822a:	f04f 0c00 	mov.w	ip, #0
 800822e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008232:	f8d9 3000 	ldr.w	r3, [r9]
 8008236:	fa1f fb87 	uxth.w	fp, r7
 800823a:	b29b      	uxth	r3, r3
 800823c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008240:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008244:	f8d9 7000 	ldr.w	r7, [r9]
 8008248:	4463      	add	r3, ip
 800824a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800824e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008252:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008256:	b29b      	uxth	r3, r3
 8008258:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800825c:	4572      	cmp	r2, lr
 800825e:	f849 3b04 	str.w	r3, [r9], #4
 8008262:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008266:	d8e2      	bhi.n	800822e <__multiply+0xb2>
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	f845 c003 	str.w	ip, [r5, r3]
 800826e:	9b03      	ldr	r3, [sp, #12]
 8008270:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008274:	3104      	adds	r1, #4
 8008276:	f1b9 0f00 	cmp.w	r9, #0
 800827a:	d021      	beq.n	80082c0 <__multiply+0x144>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	f104 0c14 	add.w	ip, r4, #20
 8008282:	46ae      	mov	lr, r5
 8008284:	f04f 0a00 	mov.w	sl, #0
 8008288:	f8bc b000 	ldrh.w	fp, [ip]
 800828c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008290:	fb09 770b 	mla	r7, r9, fp, r7
 8008294:	4457      	add	r7, sl
 8008296:	b29b      	uxth	r3, r3
 8008298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800829c:	f84e 3b04 	str.w	r3, [lr], #4
 80082a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082a8:	f8be 3000 	ldrh.w	r3, [lr]
 80082ac:	fb09 330a 	mla	r3, r9, sl, r3
 80082b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082b4:	4562      	cmp	r2, ip
 80082b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082ba:	d8e5      	bhi.n	8008288 <__multiply+0x10c>
 80082bc:	9f01      	ldr	r7, [sp, #4]
 80082be:	51eb      	str	r3, [r5, r7]
 80082c0:	3504      	adds	r5, #4
 80082c2:	e799      	b.n	80081f8 <__multiply+0x7c>
 80082c4:	3e01      	subs	r6, #1
 80082c6:	e79b      	b.n	8008200 <__multiply+0x84>
 80082c8:	08009a08 	.word	0x08009a08
 80082cc:	08009a19 	.word	0x08009a19

080082d0 <__pow5mult>:
 80082d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	4615      	mov	r5, r2
 80082d6:	f012 0203 	ands.w	r2, r2, #3
 80082da:	4607      	mov	r7, r0
 80082dc:	460e      	mov	r6, r1
 80082de:	d007      	beq.n	80082f0 <__pow5mult+0x20>
 80082e0:	4c25      	ldr	r4, [pc, #148]	@ (8008378 <__pow5mult+0xa8>)
 80082e2:	3a01      	subs	r2, #1
 80082e4:	2300      	movs	r3, #0
 80082e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082ea:	f7ff fe9f 	bl	800802c <__multadd>
 80082ee:	4606      	mov	r6, r0
 80082f0:	10ad      	asrs	r5, r5, #2
 80082f2:	d03d      	beq.n	8008370 <__pow5mult+0xa0>
 80082f4:	69fc      	ldr	r4, [r7, #28]
 80082f6:	b97c      	cbnz	r4, 8008318 <__pow5mult+0x48>
 80082f8:	2010      	movs	r0, #16
 80082fa:	f7ff fd7f 	bl	8007dfc <malloc>
 80082fe:	4602      	mov	r2, r0
 8008300:	61f8      	str	r0, [r7, #28]
 8008302:	b928      	cbnz	r0, 8008310 <__pow5mult+0x40>
 8008304:	4b1d      	ldr	r3, [pc, #116]	@ (800837c <__pow5mult+0xac>)
 8008306:	481e      	ldr	r0, [pc, #120]	@ (8008380 <__pow5mult+0xb0>)
 8008308:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800830c:	f000 fc64 	bl	8008bd8 <__assert_func>
 8008310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008314:	6004      	str	r4, [r0, #0]
 8008316:	60c4      	str	r4, [r0, #12]
 8008318:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800831c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008320:	b94c      	cbnz	r4, 8008336 <__pow5mult+0x66>
 8008322:	f240 2171 	movw	r1, #625	@ 0x271
 8008326:	4638      	mov	r0, r7
 8008328:	f7ff ff12 	bl	8008150 <__i2b>
 800832c:	2300      	movs	r3, #0
 800832e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008332:	4604      	mov	r4, r0
 8008334:	6003      	str	r3, [r0, #0]
 8008336:	f04f 0900 	mov.w	r9, #0
 800833a:	07eb      	lsls	r3, r5, #31
 800833c:	d50a      	bpl.n	8008354 <__pow5mult+0x84>
 800833e:	4631      	mov	r1, r6
 8008340:	4622      	mov	r2, r4
 8008342:	4638      	mov	r0, r7
 8008344:	f7ff ff1a 	bl	800817c <__multiply>
 8008348:	4631      	mov	r1, r6
 800834a:	4680      	mov	r8, r0
 800834c:	4638      	mov	r0, r7
 800834e:	f7ff fe4b 	bl	8007fe8 <_Bfree>
 8008352:	4646      	mov	r6, r8
 8008354:	106d      	asrs	r5, r5, #1
 8008356:	d00b      	beq.n	8008370 <__pow5mult+0xa0>
 8008358:	6820      	ldr	r0, [r4, #0]
 800835a:	b938      	cbnz	r0, 800836c <__pow5mult+0x9c>
 800835c:	4622      	mov	r2, r4
 800835e:	4621      	mov	r1, r4
 8008360:	4638      	mov	r0, r7
 8008362:	f7ff ff0b 	bl	800817c <__multiply>
 8008366:	6020      	str	r0, [r4, #0]
 8008368:	f8c0 9000 	str.w	r9, [r0]
 800836c:	4604      	mov	r4, r0
 800836e:	e7e4      	b.n	800833a <__pow5mult+0x6a>
 8008370:	4630      	mov	r0, r6
 8008372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008376:	bf00      	nop
 8008378:	08009a74 	.word	0x08009a74
 800837c:	08009999 	.word	0x08009999
 8008380:	08009a19 	.word	0x08009a19

08008384 <__lshift>:
 8008384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	460c      	mov	r4, r1
 800838a:	6849      	ldr	r1, [r1, #4]
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	4607      	mov	r7, r0
 8008396:	4691      	mov	r9, r2
 8008398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800839c:	f108 0601 	add.w	r6, r8, #1
 80083a0:	42b3      	cmp	r3, r6
 80083a2:	db0b      	blt.n	80083bc <__lshift+0x38>
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff fddf 	bl	8007f68 <_Balloc>
 80083aa:	4605      	mov	r5, r0
 80083ac:	b948      	cbnz	r0, 80083c2 <__lshift+0x3e>
 80083ae:	4602      	mov	r2, r0
 80083b0:	4b28      	ldr	r3, [pc, #160]	@ (8008454 <__lshift+0xd0>)
 80083b2:	4829      	ldr	r0, [pc, #164]	@ (8008458 <__lshift+0xd4>)
 80083b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083b8:	f000 fc0e 	bl	8008bd8 <__assert_func>
 80083bc:	3101      	adds	r1, #1
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	e7ee      	b.n	80083a0 <__lshift+0x1c>
 80083c2:	2300      	movs	r3, #0
 80083c4:	f100 0114 	add.w	r1, r0, #20
 80083c8:	f100 0210 	add.w	r2, r0, #16
 80083cc:	4618      	mov	r0, r3
 80083ce:	4553      	cmp	r3, sl
 80083d0:	db33      	blt.n	800843a <__lshift+0xb6>
 80083d2:	6920      	ldr	r0, [r4, #16]
 80083d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083d8:	f104 0314 	add.w	r3, r4, #20
 80083dc:	f019 091f 	ands.w	r9, r9, #31
 80083e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083e8:	d02b      	beq.n	8008442 <__lshift+0xbe>
 80083ea:	f1c9 0e20 	rsb	lr, r9, #32
 80083ee:	468a      	mov	sl, r1
 80083f0:	2200      	movs	r2, #0
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	fa00 f009 	lsl.w	r0, r0, r9
 80083f8:	4310      	orrs	r0, r2
 80083fa:	f84a 0b04 	str.w	r0, [sl], #4
 80083fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008402:	459c      	cmp	ip, r3
 8008404:	fa22 f20e 	lsr.w	r2, r2, lr
 8008408:	d8f3      	bhi.n	80083f2 <__lshift+0x6e>
 800840a:	ebac 0304 	sub.w	r3, ip, r4
 800840e:	3b15      	subs	r3, #21
 8008410:	f023 0303 	bic.w	r3, r3, #3
 8008414:	3304      	adds	r3, #4
 8008416:	f104 0015 	add.w	r0, r4, #21
 800841a:	4584      	cmp	ip, r0
 800841c:	bf38      	it	cc
 800841e:	2304      	movcc	r3, #4
 8008420:	50ca      	str	r2, [r1, r3]
 8008422:	b10a      	cbz	r2, 8008428 <__lshift+0xa4>
 8008424:	f108 0602 	add.w	r6, r8, #2
 8008428:	3e01      	subs	r6, #1
 800842a:	4638      	mov	r0, r7
 800842c:	612e      	str	r6, [r5, #16]
 800842e:	4621      	mov	r1, r4
 8008430:	f7ff fdda 	bl	8007fe8 <_Bfree>
 8008434:	4628      	mov	r0, r5
 8008436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843a:	f842 0f04 	str.w	r0, [r2, #4]!
 800843e:	3301      	adds	r3, #1
 8008440:	e7c5      	b.n	80083ce <__lshift+0x4a>
 8008442:	3904      	subs	r1, #4
 8008444:	f853 2b04 	ldr.w	r2, [r3], #4
 8008448:	f841 2f04 	str.w	r2, [r1, #4]!
 800844c:	459c      	cmp	ip, r3
 800844e:	d8f9      	bhi.n	8008444 <__lshift+0xc0>
 8008450:	e7ea      	b.n	8008428 <__lshift+0xa4>
 8008452:	bf00      	nop
 8008454:	08009a08 	.word	0x08009a08
 8008458:	08009a19 	.word	0x08009a19

0800845c <__mcmp>:
 800845c:	690a      	ldr	r2, [r1, #16]
 800845e:	4603      	mov	r3, r0
 8008460:	6900      	ldr	r0, [r0, #16]
 8008462:	1a80      	subs	r0, r0, r2
 8008464:	b530      	push	{r4, r5, lr}
 8008466:	d10e      	bne.n	8008486 <__mcmp+0x2a>
 8008468:	3314      	adds	r3, #20
 800846a:	3114      	adds	r1, #20
 800846c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008470:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800847c:	4295      	cmp	r5, r2
 800847e:	d003      	beq.n	8008488 <__mcmp+0x2c>
 8008480:	d205      	bcs.n	800848e <__mcmp+0x32>
 8008482:	f04f 30ff 	mov.w	r0, #4294967295
 8008486:	bd30      	pop	{r4, r5, pc}
 8008488:	42a3      	cmp	r3, r4
 800848a:	d3f3      	bcc.n	8008474 <__mcmp+0x18>
 800848c:	e7fb      	b.n	8008486 <__mcmp+0x2a>
 800848e:	2001      	movs	r0, #1
 8008490:	e7f9      	b.n	8008486 <__mcmp+0x2a>
	...

08008494 <__mdiff>:
 8008494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	4689      	mov	r9, r1
 800849a:	4606      	mov	r6, r0
 800849c:	4611      	mov	r1, r2
 800849e:	4648      	mov	r0, r9
 80084a0:	4614      	mov	r4, r2
 80084a2:	f7ff ffdb 	bl	800845c <__mcmp>
 80084a6:	1e05      	subs	r5, r0, #0
 80084a8:	d112      	bne.n	80084d0 <__mdiff+0x3c>
 80084aa:	4629      	mov	r1, r5
 80084ac:	4630      	mov	r0, r6
 80084ae:	f7ff fd5b 	bl	8007f68 <_Balloc>
 80084b2:	4602      	mov	r2, r0
 80084b4:	b928      	cbnz	r0, 80084c2 <__mdiff+0x2e>
 80084b6:	4b3f      	ldr	r3, [pc, #252]	@ (80085b4 <__mdiff+0x120>)
 80084b8:	f240 2137 	movw	r1, #567	@ 0x237
 80084bc:	483e      	ldr	r0, [pc, #248]	@ (80085b8 <__mdiff+0x124>)
 80084be:	f000 fb8b 	bl	8008bd8 <__assert_func>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084c8:	4610      	mov	r0, r2
 80084ca:	b003      	add	sp, #12
 80084cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d0:	bfbc      	itt	lt
 80084d2:	464b      	movlt	r3, r9
 80084d4:	46a1      	movlt	r9, r4
 80084d6:	4630      	mov	r0, r6
 80084d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084dc:	bfba      	itte	lt
 80084de:	461c      	movlt	r4, r3
 80084e0:	2501      	movlt	r5, #1
 80084e2:	2500      	movge	r5, #0
 80084e4:	f7ff fd40 	bl	8007f68 <_Balloc>
 80084e8:	4602      	mov	r2, r0
 80084ea:	b918      	cbnz	r0, 80084f4 <__mdiff+0x60>
 80084ec:	4b31      	ldr	r3, [pc, #196]	@ (80085b4 <__mdiff+0x120>)
 80084ee:	f240 2145 	movw	r1, #581	@ 0x245
 80084f2:	e7e3      	b.n	80084bc <__mdiff+0x28>
 80084f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084f8:	6926      	ldr	r6, [r4, #16]
 80084fa:	60c5      	str	r5, [r0, #12]
 80084fc:	f109 0310 	add.w	r3, r9, #16
 8008500:	f109 0514 	add.w	r5, r9, #20
 8008504:	f104 0e14 	add.w	lr, r4, #20
 8008508:	f100 0b14 	add.w	fp, r0, #20
 800850c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008510:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	46d9      	mov	r9, fp
 8008518:	f04f 0c00 	mov.w	ip, #0
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008522:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	fa1f f38a 	uxth.w	r3, sl
 800852c:	4619      	mov	r1, r3
 800852e:	b283      	uxth	r3, r0
 8008530:	1acb      	subs	r3, r1, r3
 8008532:	0c00      	lsrs	r0, r0, #16
 8008534:	4463      	add	r3, ip
 8008536:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800853a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800853e:	b29b      	uxth	r3, r3
 8008540:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008544:	4576      	cmp	r6, lr
 8008546:	f849 3b04 	str.w	r3, [r9], #4
 800854a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800854e:	d8e5      	bhi.n	800851c <__mdiff+0x88>
 8008550:	1b33      	subs	r3, r6, r4
 8008552:	3b15      	subs	r3, #21
 8008554:	f023 0303 	bic.w	r3, r3, #3
 8008558:	3415      	adds	r4, #21
 800855a:	3304      	adds	r3, #4
 800855c:	42a6      	cmp	r6, r4
 800855e:	bf38      	it	cc
 8008560:	2304      	movcc	r3, #4
 8008562:	441d      	add	r5, r3
 8008564:	445b      	add	r3, fp
 8008566:	461e      	mov	r6, r3
 8008568:	462c      	mov	r4, r5
 800856a:	4544      	cmp	r4, r8
 800856c:	d30e      	bcc.n	800858c <__mdiff+0xf8>
 800856e:	f108 0103 	add.w	r1, r8, #3
 8008572:	1b49      	subs	r1, r1, r5
 8008574:	f021 0103 	bic.w	r1, r1, #3
 8008578:	3d03      	subs	r5, #3
 800857a:	45a8      	cmp	r8, r5
 800857c:	bf38      	it	cc
 800857e:	2100      	movcc	r1, #0
 8008580:	440b      	add	r3, r1
 8008582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008586:	b191      	cbz	r1, 80085ae <__mdiff+0x11a>
 8008588:	6117      	str	r7, [r2, #16]
 800858a:	e79d      	b.n	80084c8 <__mdiff+0x34>
 800858c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008590:	46e6      	mov	lr, ip
 8008592:	0c08      	lsrs	r0, r1, #16
 8008594:	fa1c fc81 	uxtah	ip, ip, r1
 8008598:	4471      	add	r1, lr
 800859a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800859e:	b289      	uxth	r1, r1
 80085a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085a4:	f846 1b04 	str.w	r1, [r6], #4
 80085a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085ac:	e7dd      	b.n	800856a <__mdiff+0xd6>
 80085ae:	3f01      	subs	r7, #1
 80085b0:	e7e7      	b.n	8008582 <__mdiff+0xee>
 80085b2:	bf00      	nop
 80085b4:	08009a08 	.word	0x08009a08
 80085b8:	08009a19 	.word	0x08009a19

080085bc <__d2b>:
 80085bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085c0:	460f      	mov	r7, r1
 80085c2:	2101      	movs	r1, #1
 80085c4:	ec59 8b10 	vmov	r8, r9, d0
 80085c8:	4616      	mov	r6, r2
 80085ca:	f7ff fccd 	bl	8007f68 <_Balloc>
 80085ce:	4604      	mov	r4, r0
 80085d0:	b930      	cbnz	r0, 80085e0 <__d2b+0x24>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4b23      	ldr	r3, [pc, #140]	@ (8008664 <__d2b+0xa8>)
 80085d6:	4824      	ldr	r0, [pc, #144]	@ (8008668 <__d2b+0xac>)
 80085d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80085dc:	f000 fafc 	bl	8008bd8 <__assert_func>
 80085e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085e8:	b10d      	cbz	r5, 80085ee <__d2b+0x32>
 80085ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	f1b8 0300 	subs.w	r3, r8, #0
 80085f4:	d023      	beq.n	800863e <__d2b+0x82>
 80085f6:	4668      	mov	r0, sp
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	f7ff fd7c 	bl	80080f6 <__lo0bits>
 80085fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008602:	b1d0      	cbz	r0, 800863a <__d2b+0x7e>
 8008604:	f1c0 0320 	rsb	r3, r0, #32
 8008608:	fa02 f303 	lsl.w	r3, r2, r3
 800860c:	430b      	orrs	r3, r1
 800860e:	40c2      	lsrs	r2, r0
 8008610:	6163      	str	r3, [r4, #20]
 8008612:	9201      	str	r2, [sp, #4]
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	61a3      	str	r3, [r4, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	bf0c      	ite	eq
 800861c:	2201      	moveq	r2, #1
 800861e:	2202      	movne	r2, #2
 8008620:	6122      	str	r2, [r4, #16]
 8008622:	b1a5      	cbz	r5, 800864e <__d2b+0x92>
 8008624:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008628:	4405      	add	r5, r0
 800862a:	603d      	str	r5, [r7, #0]
 800862c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008630:	6030      	str	r0, [r6, #0]
 8008632:	4620      	mov	r0, r4
 8008634:	b003      	add	sp, #12
 8008636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800863a:	6161      	str	r1, [r4, #20]
 800863c:	e7ea      	b.n	8008614 <__d2b+0x58>
 800863e:	a801      	add	r0, sp, #4
 8008640:	f7ff fd59 	bl	80080f6 <__lo0bits>
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	6163      	str	r3, [r4, #20]
 8008648:	3020      	adds	r0, #32
 800864a:	2201      	movs	r2, #1
 800864c:	e7e8      	b.n	8008620 <__d2b+0x64>
 800864e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008652:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008656:	6038      	str	r0, [r7, #0]
 8008658:	6918      	ldr	r0, [r3, #16]
 800865a:	f7ff fd2d 	bl	80080b8 <__hi0bits>
 800865e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008662:	e7e5      	b.n	8008630 <__d2b+0x74>
 8008664:	08009a08 	.word	0x08009a08
 8008668:	08009a19 	.word	0x08009a19

0800866c <__sfputc_r>:
 800866c:	6893      	ldr	r3, [r2, #8]
 800866e:	3b01      	subs	r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	b410      	push	{r4}
 8008674:	6093      	str	r3, [r2, #8]
 8008676:	da08      	bge.n	800868a <__sfputc_r+0x1e>
 8008678:	6994      	ldr	r4, [r2, #24]
 800867a:	42a3      	cmp	r3, r4
 800867c:	db01      	blt.n	8008682 <__sfputc_r+0x16>
 800867e:	290a      	cmp	r1, #10
 8008680:	d103      	bne.n	800868a <__sfputc_r+0x1e>
 8008682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008686:	f7fe bc00 	b.w	8006e8a <__swbuf_r>
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	1c58      	adds	r0, r3, #1
 800868e:	6010      	str	r0, [r2, #0]
 8008690:	7019      	strb	r1, [r3, #0]
 8008692:	4608      	mov	r0, r1
 8008694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008698:	4770      	bx	lr

0800869a <__sfputs_r>:
 800869a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869c:	4606      	mov	r6, r0
 800869e:	460f      	mov	r7, r1
 80086a0:	4614      	mov	r4, r2
 80086a2:	18d5      	adds	r5, r2, r3
 80086a4:	42ac      	cmp	r4, r5
 80086a6:	d101      	bne.n	80086ac <__sfputs_r+0x12>
 80086a8:	2000      	movs	r0, #0
 80086aa:	e007      	b.n	80086bc <__sfputs_r+0x22>
 80086ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b0:	463a      	mov	r2, r7
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7ff ffda 	bl	800866c <__sfputc_r>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d1f3      	bne.n	80086a4 <__sfputs_r+0xa>
 80086bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086c0 <_vfiprintf_r>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	460d      	mov	r5, r1
 80086c6:	b09d      	sub	sp, #116	@ 0x74
 80086c8:	4614      	mov	r4, r2
 80086ca:	4698      	mov	r8, r3
 80086cc:	4606      	mov	r6, r0
 80086ce:	b118      	cbz	r0, 80086d8 <_vfiprintf_r+0x18>
 80086d0:	6a03      	ldr	r3, [r0, #32]
 80086d2:	b90b      	cbnz	r3, 80086d8 <_vfiprintf_r+0x18>
 80086d4:	f7fe fae8 	bl	8006ca8 <__sinit>
 80086d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086da:	07d9      	lsls	r1, r3, #31
 80086dc:	d405      	bmi.n	80086ea <_vfiprintf_r+0x2a>
 80086de:	89ab      	ldrh	r3, [r5, #12]
 80086e0:	059a      	lsls	r2, r3, #22
 80086e2:	d402      	bmi.n	80086ea <_vfiprintf_r+0x2a>
 80086e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086e6:	f7fe fce2 	bl	80070ae <__retarget_lock_acquire_recursive>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	071b      	lsls	r3, r3, #28
 80086ee:	d501      	bpl.n	80086f4 <_vfiprintf_r+0x34>
 80086f0:	692b      	ldr	r3, [r5, #16]
 80086f2:	b99b      	cbnz	r3, 800871c <_vfiprintf_r+0x5c>
 80086f4:	4629      	mov	r1, r5
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7fe fc06 	bl	8006f08 <__swsetup_r>
 80086fc:	b170      	cbz	r0, 800871c <_vfiprintf_r+0x5c>
 80086fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008700:	07dc      	lsls	r4, r3, #31
 8008702:	d504      	bpl.n	800870e <_vfiprintf_r+0x4e>
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	b01d      	add	sp, #116	@ 0x74
 800870a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870e:	89ab      	ldrh	r3, [r5, #12]
 8008710:	0598      	lsls	r0, r3, #22
 8008712:	d4f7      	bmi.n	8008704 <_vfiprintf_r+0x44>
 8008714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008716:	f7fe fccb 	bl	80070b0 <__retarget_lock_release_recursive>
 800871a:	e7f3      	b.n	8008704 <_vfiprintf_r+0x44>
 800871c:	2300      	movs	r3, #0
 800871e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008720:	2320      	movs	r3, #32
 8008722:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008726:	f8cd 800c 	str.w	r8, [sp, #12]
 800872a:	2330      	movs	r3, #48	@ 0x30
 800872c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088dc <_vfiprintf_r+0x21c>
 8008730:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008734:	f04f 0901 	mov.w	r9, #1
 8008738:	4623      	mov	r3, r4
 800873a:	469a      	mov	sl, r3
 800873c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008740:	b10a      	cbz	r2, 8008746 <_vfiprintf_r+0x86>
 8008742:	2a25      	cmp	r2, #37	@ 0x25
 8008744:	d1f9      	bne.n	800873a <_vfiprintf_r+0x7a>
 8008746:	ebba 0b04 	subs.w	fp, sl, r4
 800874a:	d00b      	beq.n	8008764 <_vfiprintf_r+0xa4>
 800874c:	465b      	mov	r3, fp
 800874e:	4622      	mov	r2, r4
 8008750:	4629      	mov	r1, r5
 8008752:	4630      	mov	r0, r6
 8008754:	f7ff ffa1 	bl	800869a <__sfputs_r>
 8008758:	3001      	adds	r0, #1
 800875a:	f000 80a7 	beq.w	80088ac <_vfiprintf_r+0x1ec>
 800875e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008760:	445a      	add	r2, fp
 8008762:	9209      	str	r2, [sp, #36]	@ 0x24
 8008764:	f89a 3000 	ldrb.w	r3, [sl]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 809f 	beq.w	80088ac <_vfiprintf_r+0x1ec>
 800876e:	2300      	movs	r3, #0
 8008770:	f04f 32ff 	mov.w	r2, #4294967295
 8008774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008778:	f10a 0a01 	add.w	sl, sl, #1
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	9307      	str	r3, [sp, #28]
 8008780:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008784:	931a      	str	r3, [sp, #104]	@ 0x68
 8008786:	4654      	mov	r4, sl
 8008788:	2205      	movs	r2, #5
 800878a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878e:	4853      	ldr	r0, [pc, #332]	@ (80088dc <_vfiprintf_r+0x21c>)
 8008790:	f7f7 fd1e 	bl	80001d0 <memchr>
 8008794:	9a04      	ldr	r2, [sp, #16]
 8008796:	b9d8      	cbnz	r0, 80087d0 <_vfiprintf_r+0x110>
 8008798:	06d1      	lsls	r1, r2, #27
 800879a:	bf44      	itt	mi
 800879c:	2320      	movmi	r3, #32
 800879e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087a2:	0713      	lsls	r3, r2, #28
 80087a4:	bf44      	itt	mi
 80087a6:	232b      	movmi	r3, #43	@ 0x2b
 80087a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087ac:	f89a 3000 	ldrb.w	r3, [sl]
 80087b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b2:	d015      	beq.n	80087e0 <_vfiprintf_r+0x120>
 80087b4:	9a07      	ldr	r2, [sp, #28]
 80087b6:	4654      	mov	r4, sl
 80087b8:	2000      	movs	r0, #0
 80087ba:	f04f 0c0a 	mov.w	ip, #10
 80087be:	4621      	mov	r1, r4
 80087c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c4:	3b30      	subs	r3, #48	@ 0x30
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d94b      	bls.n	8008862 <_vfiprintf_r+0x1a2>
 80087ca:	b1b0      	cbz	r0, 80087fa <_vfiprintf_r+0x13a>
 80087cc:	9207      	str	r2, [sp, #28]
 80087ce:	e014      	b.n	80087fa <_vfiprintf_r+0x13a>
 80087d0:	eba0 0308 	sub.w	r3, r0, r8
 80087d4:	fa09 f303 	lsl.w	r3, r9, r3
 80087d8:	4313      	orrs	r3, r2
 80087da:	9304      	str	r3, [sp, #16]
 80087dc:	46a2      	mov	sl, r4
 80087de:	e7d2      	b.n	8008786 <_vfiprintf_r+0xc6>
 80087e0:	9b03      	ldr	r3, [sp, #12]
 80087e2:	1d19      	adds	r1, r3, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	9103      	str	r1, [sp, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bfbb      	ittet	lt
 80087ec:	425b      	neglt	r3, r3
 80087ee:	f042 0202 	orrlt.w	r2, r2, #2
 80087f2:	9307      	strge	r3, [sp, #28]
 80087f4:	9307      	strlt	r3, [sp, #28]
 80087f6:	bfb8      	it	lt
 80087f8:	9204      	strlt	r2, [sp, #16]
 80087fa:	7823      	ldrb	r3, [r4, #0]
 80087fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80087fe:	d10a      	bne.n	8008816 <_vfiprintf_r+0x156>
 8008800:	7863      	ldrb	r3, [r4, #1]
 8008802:	2b2a      	cmp	r3, #42	@ 0x2a
 8008804:	d132      	bne.n	800886c <_vfiprintf_r+0x1ac>
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	1d1a      	adds	r2, r3, #4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	9203      	str	r2, [sp, #12]
 800880e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008812:	3402      	adds	r4, #2
 8008814:	9305      	str	r3, [sp, #20]
 8008816:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088ec <_vfiprintf_r+0x22c>
 800881a:	7821      	ldrb	r1, [r4, #0]
 800881c:	2203      	movs	r2, #3
 800881e:	4650      	mov	r0, sl
 8008820:	f7f7 fcd6 	bl	80001d0 <memchr>
 8008824:	b138      	cbz	r0, 8008836 <_vfiprintf_r+0x176>
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	eba0 000a 	sub.w	r0, r0, sl
 800882c:	2240      	movs	r2, #64	@ 0x40
 800882e:	4082      	lsls	r2, r0
 8008830:	4313      	orrs	r3, r2
 8008832:	3401      	adds	r4, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883a:	4829      	ldr	r0, [pc, #164]	@ (80088e0 <_vfiprintf_r+0x220>)
 800883c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008840:	2206      	movs	r2, #6
 8008842:	f7f7 fcc5 	bl	80001d0 <memchr>
 8008846:	2800      	cmp	r0, #0
 8008848:	d03f      	beq.n	80088ca <_vfiprintf_r+0x20a>
 800884a:	4b26      	ldr	r3, [pc, #152]	@ (80088e4 <_vfiprintf_r+0x224>)
 800884c:	bb1b      	cbnz	r3, 8008896 <_vfiprintf_r+0x1d6>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	3307      	adds	r3, #7
 8008852:	f023 0307 	bic.w	r3, r3, #7
 8008856:	3308      	adds	r3, #8
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885c:	443b      	add	r3, r7
 800885e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008860:	e76a      	b.n	8008738 <_vfiprintf_r+0x78>
 8008862:	fb0c 3202 	mla	r2, ip, r2, r3
 8008866:	460c      	mov	r4, r1
 8008868:	2001      	movs	r0, #1
 800886a:	e7a8      	b.n	80087be <_vfiprintf_r+0xfe>
 800886c:	2300      	movs	r3, #0
 800886e:	3401      	adds	r4, #1
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	4619      	mov	r1, r3
 8008874:	f04f 0c0a 	mov.w	ip, #10
 8008878:	4620      	mov	r0, r4
 800887a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800887e:	3a30      	subs	r2, #48	@ 0x30
 8008880:	2a09      	cmp	r2, #9
 8008882:	d903      	bls.n	800888c <_vfiprintf_r+0x1cc>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0c6      	beq.n	8008816 <_vfiprintf_r+0x156>
 8008888:	9105      	str	r1, [sp, #20]
 800888a:	e7c4      	b.n	8008816 <_vfiprintf_r+0x156>
 800888c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008890:	4604      	mov	r4, r0
 8008892:	2301      	movs	r3, #1
 8008894:	e7f0      	b.n	8008878 <_vfiprintf_r+0x1b8>
 8008896:	ab03      	add	r3, sp, #12
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	462a      	mov	r2, r5
 800889c:	4b12      	ldr	r3, [pc, #72]	@ (80088e8 <_vfiprintf_r+0x228>)
 800889e:	a904      	add	r1, sp, #16
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7fd fdbd 	bl	8006420 <_printf_float>
 80088a6:	4607      	mov	r7, r0
 80088a8:	1c78      	adds	r0, r7, #1
 80088aa:	d1d6      	bne.n	800885a <_vfiprintf_r+0x19a>
 80088ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088ae:	07d9      	lsls	r1, r3, #31
 80088b0:	d405      	bmi.n	80088be <_vfiprintf_r+0x1fe>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	059a      	lsls	r2, r3, #22
 80088b6:	d402      	bmi.n	80088be <_vfiprintf_r+0x1fe>
 80088b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ba:	f7fe fbf9 	bl	80070b0 <__retarget_lock_release_recursive>
 80088be:	89ab      	ldrh	r3, [r5, #12]
 80088c0:	065b      	lsls	r3, r3, #25
 80088c2:	f53f af1f 	bmi.w	8008704 <_vfiprintf_r+0x44>
 80088c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088c8:	e71e      	b.n	8008708 <_vfiprintf_r+0x48>
 80088ca:	ab03      	add	r3, sp, #12
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	462a      	mov	r2, r5
 80088d0:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <_vfiprintf_r+0x228>)
 80088d2:	a904      	add	r1, sp, #16
 80088d4:	4630      	mov	r0, r6
 80088d6:	f7fe f83b 	bl	8006950 <_printf_i>
 80088da:	e7e4      	b.n	80088a6 <_vfiprintf_r+0x1e6>
 80088dc:	08009b70 	.word	0x08009b70
 80088e0:	08009b7a 	.word	0x08009b7a
 80088e4:	08006421 	.word	0x08006421
 80088e8:	0800869b 	.word	0x0800869b
 80088ec:	08009b76 	.word	0x08009b76

080088f0 <__sflush_r>:
 80088f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f8:	0716      	lsls	r6, r2, #28
 80088fa:	4605      	mov	r5, r0
 80088fc:	460c      	mov	r4, r1
 80088fe:	d454      	bmi.n	80089aa <__sflush_r+0xba>
 8008900:	684b      	ldr	r3, [r1, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dc02      	bgt.n	800890c <__sflush_r+0x1c>
 8008906:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	dd48      	ble.n	800899e <__sflush_r+0xae>
 800890c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800890e:	2e00      	cmp	r6, #0
 8008910:	d045      	beq.n	800899e <__sflush_r+0xae>
 8008912:	2300      	movs	r3, #0
 8008914:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008918:	682f      	ldr	r7, [r5, #0]
 800891a:	6a21      	ldr	r1, [r4, #32]
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	d030      	beq.n	8008982 <__sflush_r+0x92>
 8008920:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	0759      	lsls	r1, r3, #29
 8008926:	d505      	bpl.n	8008934 <__sflush_r+0x44>
 8008928:	6863      	ldr	r3, [r4, #4]
 800892a:	1ad2      	subs	r2, r2, r3
 800892c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800892e:	b10b      	cbz	r3, 8008934 <__sflush_r+0x44>
 8008930:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008932:	1ad2      	subs	r2, r2, r3
 8008934:	2300      	movs	r3, #0
 8008936:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008938:	6a21      	ldr	r1, [r4, #32]
 800893a:	4628      	mov	r0, r5
 800893c:	47b0      	blx	r6
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	d106      	bne.n	8008952 <__sflush_r+0x62>
 8008944:	6829      	ldr	r1, [r5, #0]
 8008946:	291d      	cmp	r1, #29
 8008948:	d82b      	bhi.n	80089a2 <__sflush_r+0xb2>
 800894a:	4a2a      	ldr	r2, [pc, #168]	@ (80089f4 <__sflush_r+0x104>)
 800894c:	410a      	asrs	r2, r1
 800894e:	07d6      	lsls	r6, r2, #31
 8008950:	d427      	bmi.n	80089a2 <__sflush_r+0xb2>
 8008952:	2200      	movs	r2, #0
 8008954:	6062      	str	r2, [r4, #4]
 8008956:	04d9      	lsls	r1, r3, #19
 8008958:	6922      	ldr	r2, [r4, #16]
 800895a:	6022      	str	r2, [r4, #0]
 800895c:	d504      	bpl.n	8008968 <__sflush_r+0x78>
 800895e:	1c42      	adds	r2, r0, #1
 8008960:	d101      	bne.n	8008966 <__sflush_r+0x76>
 8008962:	682b      	ldr	r3, [r5, #0]
 8008964:	b903      	cbnz	r3, 8008968 <__sflush_r+0x78>
 8008966:	6560      	str	r0, [r4, #84]	@ 0x54
 8008968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800896a:	602f      	str	r7, [r5, #0]
 800896c:	b1b9      	cbz	r1, 800899e <__sflush_r+0xae>
 800896e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008972:	4299      	cmp	r1, r3
 8008974:	d002      	beq.n	800897c <__sflush_r+0x8c>
 8008976:	4628      	mov	r0, r5
 8008978:	f7ff f9f6 	bl	8007d68 <_free_r>
 800897c:	2300      	movs	r3, #0
 800897e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008980:	e00d      	b.n	800899e <__sflush_r+0xae>
 8008982:	2301      	movs	r3, #1
 8008984:	4628      	mov	r0, r5
 8008986:	47b0      	blx	r6
 8008988:	4602      	mov	r2, r0
 800898a:	1c50      	adds	r0, r2, #1
 800898c:	d1c9      	bne.n	8008922 <__sflush_r+0x32>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0c6      	beq.n	8008922 <__sflush_r+0x32>
 8008994:	2b1d      	cmp	r3, #29
 8008996:	d001      	beq.n	800899c <__sflush_r+0xac>
 8008998:	2b16      	cmp	r3, #22
 800899a:	d11e      	bne.n	80089da <__sflush_r+0xea>
 800899c:	602f      	str	r7, [r5, #0]
 800899e:	2000      	movs	r0, #0
 80089a0:	e022      	b.n	80089e8 <__sflush_r+0xf8>
 80089a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089a6:	b21b      	sxth	r3, r3
 80089a8:	e01b      	b.n	80089e2 <__sflush_r+0xf2>
 80089aa:	690f      	ldr	r7, [r1, #16]
 80089ac:	2f00      	cmp	r7, #0
 80089ae:	d0f6      	beq.n	800899e <__sflush_r+0xae>
 80089b0:	0793      	lsls	r3, r2, #30
 80089b2:	680e      	ldr	r6, [r1, #0]
 80089b4:	bf08      	it	eq
 80089b6:	694b      	ldreq	r3, [r1, #20]
 80089b8:	600f      	str	r7, [r1, #0]
 80089ba:	bf18      	it	ne
 80089bc:	2300      	movne	r3, #0
 80089be:	eba6 0807 	sub.w	r8, r6, r7
 80089c2:	608b      	str	r3, [r1, #8]
 80089c4:	f1b8 0f00 	cmp.w	r8, #0
 80089c8:	dde9      	ble.n	800899e <__sflush_r+0xae>
 80089ca:	6a21      	ldr	r1, [r4, #32]
 80089cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089ce:	4643      	mov	r3, r8
 80089d0:	463a      	mov	r2, r7
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b0      	blx	r6
 80089d6:	2800      	cmp	r0, #0
 80089d8:	dc08      	bgt.n	80089ec <__sflush_r+0xfc>
 80089da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ec:	4407      	add	r7, r0
 80089ee:	eba8 0800 	sub.w	r8, r8, r0
 80089f2:	e7e7      	b.n	80089c4 <__sflush_r+0xd4>
 80089f4:	dfbffffe 	.word	0xdfbffffe

080089f8 <_fflush_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	690b      	ldr	r3, [r1, #16]
 80089fc:	4605      	mov	r5, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	b913      	cbnz	r3, 8008a08 <_fflush_r+0x10>
 8008a02:	2500      	movs	r5, #0
 8008a04:	4628      	mov	r0, r5
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	b118      	cbz	r0, 8008a12 <_fflush_r+0x1a>
 8008a0a:	6a03      	ldr	r3, [r0, #32]
 8008a0c:	b90b      	cbnz	r3, 8008a12 <_fflush_r+0x1a>
 8008a0e:	f7fe f94b 	bl	8006ca8 <__sinit>
 8008a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f3      	beq.n	8008a02 <_fflush_r+0xa>
 8008a1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a1c:	07d0      	lsls	r0, r2, #31
 8008a1e:	d404      	bmi.n	8008a2a <_fflush_r+0x32>
 8008a20:	0599      	lsls	r1, r3, #22
 8008a22:	d402      	bmi.n	8008a2a <_fflush_r+0x32>
 8008a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a26:	f7fe fb42 	bl	80070ae <__retarget_lock_acquire_recursive>
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f7ff ff5f 	bl	80088f0 <__sflush_r>
 8008a32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a34:	07da      	lsls	r2, r3, #31
 8008a36:	4605      	mov	r5, r0
 8008a38:	d4e4      	bmi.n	8008a04 <_fflush_r+0xc>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	059b      	lsls	r3, r3, #22
 8008a3e:	d4e1      	bmi.n	8008a04 <_fflush_r+0xc>
 8008a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a42:	f7fe fb35 	bl	80070b0 <__retarget_lock_release_recursive>
 8008a46:	e7dd      	b.n	8008a04 <_fflush_r+0xc>

08008a48 <__swhatbuf_r>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	2900      	cmp	r1, #0
 8008a52:	b096      	sub	sp, #88	@ 0x58
 8008a54:	4615      	mov	r5, r2
 8008a56:	461e      	mov	r6, r3
 8008a58:	da0d      	bge.n	8008a76 <__swhatbuf_r+0x2e>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a60:	f04f 0100 	mov.w	r1, #0
 8008a64:	bf14      	ite	ne
 8008a66:	2340      	movne	r3, #64	@ 0x40
 8008a68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	6031      	str	r1, [r6, #0]
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	b016      	add	sp, #88	@ 0x58
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
 8008a76:	466a      	mov	r2, sp
 8008a78:	f000 f87c 	bl	8008b74 <_fstat_r>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	dbec      	blt.n	8008a5a <__swhatbuf_r+0x12>
 8008a80:	9901      	ldr	r1, [sp, #4]
 8008a82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a8a:	4259      	negs	r1, r3
 8008a8c:	4159      	adcs	r1, r3
 8008a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a92:	e7eb      	b.n	8008a6c <__swhatbuf_r+0x24>

08008a94 <__smakebuf_r>:
 8008a94:	898b      	ldrh	r3, [r1, #12]
 8008a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a98:	079d      	lsls	r5, r3, #30
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	d507      	bpl.n	8008ab0 <__smakebuf_r+0x1c>
 8008aa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	6123      	str	r3, [r4, #16]
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	6163      	str	r3, [r4, #20]
 8008aac:	b003      	add	sp, #12
 8008aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab0:	ab01      	add	r3, sp, #4
 8008ab2:	466a      	mov	r2, sp
 8008ab4:	f7ff ffc8 	bl	8008a48 <__swhatbuf_r>
 8008ab8:	9f00      	ldr	r7, [sp, #0]
 8008aba:	4605      	mov	r5, r0
 8008abc:	4639      	mov	r1, r7
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7ff f9c6 	bl	8007e50 <_malloc_r>
 8008ac4:	b948      	cbnz	r0, 8008ada <__smakebuf_r+0x46>
 8008ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aca:	059a      	lsls	r2, r3, #22
 8008acc:	d4ee      	bmi.n	8008aac <__smakebuf_r+0x18>
 8008ace:	f023 0303 	bic.w	r3, r3, #3
 8008ad2:	f043 0302 	orr.w	r3, r3, #2
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	e7e2      	b.n	8008aa0 <__smakebuf_r+0xc>
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	6020      	str	r0, [r4, #0]
 8008ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008aea:	b15b      	cbz	r3, 8008b04 <__smakebuf_r+0x70>
 8008aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 f851 	bl	8008b98 <_isatty_r>
 8008af6:	b128      	cbz	r0, 8008b04 <__smakebuf_r+0x70>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	431d      	orrs	r5, r3
 8008b08:	81a5      	strh	r5, [r4, #12]
 8008b0a:	e7cf      	b.n	8008aac <__smakebuf_r+0x18>

08008b0c <_putc_r>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	460d      	mov	r5, r1
 8008b10:	4614      	mov	r4, r2
 8008b12:	4606      	mov	r6, r0
 8008b14:	b118      	cbz	r0, 8008b1e <_putc_r+0x12>
 8008b16:	6a03      	ldr	r3, [r0, #32]
 8008b18:	b90b      	cbnz	r3, 8008b1e <_putc_r+0x12>
 8008b1a:	f7fe f8c5 	bl	8006ca8 <__sinit>
 8008b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b20:	07d8      	lsls	r0, r3, #31
 8008b22:	d405      	bmi.n	8008b30 <_putc_r+0x24>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	0599      	lsls	r1, r3, #22
 8008b28:	d402      	bmi.n	8008b30 <_putc_r+0x24>
 8008b2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b2c:	f7fe fabf 	bl	80070ae <__retarget_lock_acquire_recursive>
 8008b30:	68a3      	ldr	r3, [r4, #8]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	60a3      	str	r3, [r4, #8]
 8008b38:	da05      	bge.n	8008b46 <_putc_r+0x3a>
 8008b3a:	69a2      	ldr	r2, [r4, #24]
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	db12      	blt.n	8008b66 <_putc_r+0x5a>
 8008b40:	b2eb      	uxtb	r3, r5
 8008b42:	2b0a      	cmp	r3, #10
 8008b44:	d00f      	beq.n	8008b66 <_putc_r+0x5a>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	6022      	str	r2, [r4, #0]
 8008b4c:	701d      	strb	r5, [r3, #0]
 8008b4e:	b2ed      	uxtb	r5, r5
 8008b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b52:	07da      	lsls	r2, r3, #31
 8008b54:	d405      	bmi.n	8008b62 <_putc_r+0x56>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	d402      	bmi.n	8008b62 <_putc_r+0x56>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5e:	f7fe faa7 	bl	80070b0 <__retarget_lock_release_recursive>
 8008b62:	4628      	mov	r0, r5
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	4629      	mov	r1, r5
 8008b68:	4622      	mov	r2, r4
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f7fe f98d 	bl	8006e8a <__swbuf_r>
 8008b70:	4605      	mov	r5, r0
 8008b72:	e7ed      	b.n	8008b50 <_putc_r+0x44>

08008b74 <_fstat_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d07      	ldr	r5, [pc, #28]	@ (8008b94 <_fstat_r+0x20>)
 8008b78:	2300      	movs	r3, #0
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	4611      	mov	r1, r2
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	f7f8 fd2f 	bl	80015e4 <_fstat>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	d102      	bne.n	8008b90 <_fstat_r+0x1c>
 8008b8a:	682b      	ldr	r3, [r5, #0]
 8008b8c:	b103      	cbz	r3, 8008b90 <_fstat_r+0x1c>
 8008b8e:	6023      	str	r3, [r4, #0]
 8008b90:	bd38      	pop	{r3, r4, r5, pc}
 8008b92:	bf00      	nop
 8008b94:	20001150 	.word	0x20001150

08008b98 <_isatty_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d06      	ldr	r5, [pc, #24]	@ (8008bb4 <_isatty_r+0x1c>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	f7f8 fd2e 	bl	8001604 <_isatty>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_isatty_r+0x1a>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_isatty_r+0x1a>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	20001150 	.word	0x20001150

08008bb8 <_sbrk_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4d06      	ldr	r5, [pc, #24]	@ (8008bd4 <_sbrk_r+0x1c>)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	f7f8 fd36 	bl	8001634 <_sbrk>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_sbrk_r+0x1a>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_sbrk_r+0x1a>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20001150 	.word	0x20001150

08008bd8 <__assert_func>:
 8008bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bda:	4614      	mov	r4, r2
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4b09      	ldr	r3, [pc, #36]	@ (8008c04 <__assert_func+0x2c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4605      	mov	r5, r0
 8008be4:	68d8      	ldr	r0, [r3, #12]
 8008be6:	b954      	cbnz	r4, 8008bfe <__assert_func+0x26>
 8008be8:	4b07      	ldr	r3, [pc, #28]	@ (8008c08 <__assert_func+0x30>)
 8008bea:	461c      	mov	r4, r3
 8008bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bf0:	9100      	str	r1, [sp, #0]
 8008bf2:	462b      	mov	r3, r5
 8008bf4:	4905      	ldr	r1, [pc, #20]	@ (8008c0c <__assert_func+0x34>)
 8008bf6:	f000 f841 	bl	8008c7c <fiprintf>
 8008bfa:	f000 f851 	bl	8008ca0 <abort>
 8008bfe:	4b04      	ldr	r3, [pc, #16]	@ (8008c10 <__assert_func+0x38>)
 8008c00:	e7f4      	b.n	8008bec <__assert_func+0x14>
 8008c02:	bf00      	nop
 8008c04:	2000002c 	.word	0x2000002c
 8008c08:	08009bc6 	.word	0x08009bc6
 8008c0c:	08009b98 	.word	0x08009b98
 8008c10:	08009b8b 	.word	0x08009b8b

08008c14 <_calloc_r>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	fba1 5402 	umull	r5, r4, r1, r2
 8008c1a:	b93c      	cbnz	r4, 8008c2c <_calloc_r+0x18>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7ff f917 	bl	8007e50 <_malloc_r>
 8008c22:	4606      	mov	r6, r0
 8008c24:	b928      	cbnz	r0, 8008c32 <_calloc_r+0x1e>
 8008c26:	2600      	movs	r6, #0
 8008c28:	4630      	mov	r0, r6
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	220c      	movs	r2, #12
 8008c2e:	6002      	str	r2, [r0, #0]
 8008c30:	e7f9      	b.n	8008c26 <_calloc_r+0x12>
 8008c32:	462a      	mov	r2, r5
 8008c34:	4621      	mov	r1, r4
 8008c36:	f7fe f9bd 	bl	8006fb4 <memset>
 8008c3a:	e7f5      	b.n	8008c28 <_calloc_r+0x14>

08008c3c <__ascii_mbtowc>:
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	b901      	cbnz	r1, 8008c42 <__ascii_mbtowc+0x6>
 8008c40:	a901      	add	r1, sp, #4
 8008c42:	b142      	cbz	r2, 8008c56 <__ascii_mbtowc+0x1a>
 8008c44:	b14b      	cbz	r3, 8008c5a <__ascii_mbtowc+0x1e>
 8008c46:	7813      	ldrb	r3, [r2, #0]
 8008c48:	600b      	str	r3, [r1, #0]
 8008c4a:	7812      	ldrb	r2, [r2, #0]
 8008c4c:	1e10      	subs	r0, r2, #0
 8008c4e:	bf18      	it	ne
 8008c50:	2001      	movne	r0, #1
 8008c52:	b002      	add	sp, #8
 8008c54:	4770      	bx	lr
 8008c56:	4610      	mov	r0, r2
 8008c58:	e7fb      	b.n	8008c52 <__ascii_mbtowc+0x16>
 8008c5a:	f06f 0001 	mvn.w	r0, #1
 8008c5e:	e7f8      	b.n	8008c52 <__ascii_mbtowc+0x16>

08008c60 <__ascii_wctomb>:
 8008c60:	4603      	mov	r3, r0
 8008c62:	4608      	mov	r0, r1
 8008c64:	b141      	cbz	r1, 8008c78 <__ascii_wctomb+0x18>
 8008c66:	2aff      	cmp	r2, #255	@ 0xff
 8008c68:	d904      	bls.n	8008c74 <__ascii_wctomb+0x14>
 8008c6a:	228a      	movs	r2, #138	@ 0x8a
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	4770      	bx	lr
 8008c74:	700a      	strb	r2, [r1, #0]
 8008c76:	2001      	movs	r0, #1
 8008c78:	4770      	bx	lr
	...

08008c7c <fiprintf>:
 8008c7c:	b40e      	push	{r1, r2, r3}
 8008c7e:	b503      	push	{r0, r1, lr}
 8008c80:	4601      	mov	r1, r0
 8008c82:	ab03      	add	r3, sp, #12
 8008c84:	4805      	ldr	r0, [pc, #20]	@ (8008c9c <fiprintf+0x20>)
 8008c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8a:	6800      	ldr	r0, [r0, #0]
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	f7ff fd17 	bl	80086c0 <_vfiprintf_r>
 8008c92:	b002      	add	sp, #8
 8008c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c98:	b003      	add	sp, #12
 8008c9a:	4770      	bx	lr
 8008c9c:	2000002c 	.word	0x2000002c

08008ca0 <abort>:
 8008ca0:	b508      	push	{r3, lr}
 8008ca2:	2006      	movs	r0, #6
 8008ca4:	f000 f82c 	bl	8008d00 <raise>
 8008ca8:	2001      	movs	r0, #1
 8008caa:	f7f8 fc4b 	bl	8001544 <_exit>

08008cae <_raise_r>:
 8008cae:	291f      	cmp	r1, #31
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	d904      	bls.n	8008cc2 <_raise_r+0x14>
 8008cb8:	2316      	movs	r3, #22
 8008cba:	6003      	str	r3, [r0, #0]
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
 8008cc2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008cc4:	b112      	cbz	r2, 8008ccc <_raise_r+0x1e>
 8008cc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cca:	b94b      	cbnz	r3, 8008ce0 <_raise_r+0x32>
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f000 f831 	bl	8008d34 <_getpid_r>
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	4601      	mov	r1, r0
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cdc:	f000 b818 	b.w	8008d10 <_kill_r>
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d00a      	beq.n	8008cfa <_raise_r+0x4c>
 8008ce4:	1c59      	adds	r1, r3, #1
 8008ce6:	d103      	bne.n	8008cf0 <_raise_r+0x42>
 8008ce8:	2316      	movs	r3, #22
 8008cea:	6003      	str	r3, [r0, #0]
 8008cec:	2001      	movs	r0, #1
 8008cee:	e7e7      	b.n	8008cc0 <_raise_r+0x12>
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4798      	blx	r3
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	e7e0      	b.n	8008cc0 <_raise_r+0x12>
	...

08008d00 <raise>:
 8008d00:	4b02      	ldr	r3, [pc, #8]	@ (8008d0c <raise+0xc>)
 8008d02:	4601      	mov	r1, r0
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	f7ff bfd2 	b.w	8008cae <_raise_r>
 8008d0a:	bf00      	nop
 8008d0c:	2000002c 	.word	0x2000002c

08008d10 <_kill_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d07      	ldr	r5, [pc, #28]	@ (8008d30 <_kill_r+0x20>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	602b      	str	r3, [r5, #0]
 8008d1e:	f7f8 fc01 	bl	8001524 <_kill>
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	d102      	bne.n	8008d2c <_kill_r+0x1c>
 8008d26:	682b      	ldr	r3, [r5, #0]
 8008d28:	b103      	cbz	r3, 8008d2c <_kill_r+0x1c>
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	bd38      	pop	{r3, r4, r5, pc}
 8008d2e:	bf00      	nop
 8008d30:	20001150 	.word	0x20001150

08008d34 <_getpid_r>:
 8008d34:	f7f8 bbee 	b.w	8001514 <_getpid>

08008d38 <expf>:
 8008d38:	b508      	push	{r3, lr}
 8008d3a:	ed2d 8b02 	vpush	{d8}
 8008d3e:	eef0 8a40 	vmov.f32	s17, s0
 8008d42:	f000 f8c9 	bl	8008ed8 <__ieee754_expf>
 8008d46:	eeb0 8a40 	vmov.f32	s16, s0
 8008d4a:	eeb0 0a68 	vmov.f32	s0, s17
 8008d4e:	f000 f875 	bl	8008e3c <finitef>
 8008d52:	b160      	cbz	r0, 8008d6e <expf+0x36>
 8008d54:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8008d94 <expf+0x5c>
 8008d58:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d60:	dd0a      	ble.n	8008d78 <expf+0x40>
 8008d62:	f7fe f979 	bl	8007058 <__errno>
 8008d66:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8008d98 <expf+0x60>
 8008d6a:	2322      	movs	r3, #34	@ 0x22
 8008d6c:	6003      	str	r3, [r0, #0]
 8008d6e:	eeb0 0a48 	vmov.f32	s0, s16
 8008d72:	ecbd 8b02 	vpop	{d8}
 8008d76:	bd08      	pop	{r3, pc}
 8008d78:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008d9c <expf+0x64>
 8008d7c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d84:	d5f3      	bpl.n	8008d6e <expf+0x36>
 8008d86:	f7fe f967 	bl	8007058 <__errno>
 8008d8a:	2322      	movs	r3, #34	@ 0x22
 8008d8c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8008da0 <expf+0x68>
 8008d90:	6003      	str	r3, [r0, #0]
 8008d92:	e7ec      	b.n	8008d6e <expf+0x36>
 8008d94:	42b17217 	.word	0x42b17217
 8008d98:	7f800000 	.word	0x7f800000
 8008d9c:	c2cff1b5 	.word	0xc2cff1b5
 8008da0:	00000000 	.word	0x00000000

08008da4 <logf>:
 8008da4:	b508      	push	{r3, lr}
 8008da6:	ed2d 8b02 	vpush	{d8}
 8008daa:	eeb0 8a40 	vmov.f32	s16, s0
 8008dae:	f000 f961 	bl	8009074 <__ieee754_logf>
 8008db2:	eeb4 8a48 	vcmp.f32	s16, s16
 8008db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dba:	d60f      	bvs.n	8008ddc <logf+0x38>
 8008dbc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc4:	dc0a      	bgt.n	8008ddc <logf+0x38>
 8008dc6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dce:	d108      	bne.n	8008de2 <logf+0x3e>
 8008dd0:	f7fe f942 	bl	8007058 <__errno>
 8008dd4:	2322      	movs	r3, #34	@ 0x22
 8008dd6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008df8 <logf+0x54>
 8008dda:	6003      	str	r3, [r0, #0]
 8008ddc:	ecbd 8b02 	vpop	{d8}
 8008de0:	bd08      	pop	{r3, pc}
 8008de2:	f7fe f939 	bl	8007058 <__errno>
 8008de6:	ecbd 8b02 	vpop	{d8}
 8008dea:	2321      	movs	r3, #33	@ 0x21
 8008dec:	6003      	str	r3, [r0, #0]
 8008dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008df2:	4802      	ldr	r0, [pc, #8]	@ (8008dfc <logf+0x58>)
 8008df4:	f000 b82c 	b.w	8008e50 <nanf>
 8008df8:	ff800000 	.word	0xff800000
 8008dfc:	08009bc6 	.word	0x08009bc6

08008e00 <sqrtf>:
 8008e00:	b508      	push	{r3, lr}
 8008e02:	ed2d 8b02 	vpush	{d8}
 8008e06:	eeb0 8a40 	vmov.f32	s16, s0
 8008e0a:	f000 f861 	bl	8008ed0 <__ieee754_sqrtf>
 8008e0e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	d60c      	bvs.n	8008e32 <sqrtf+0x32>
 8008e18:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008e38 <sqrtf+0x38>
 8008e1c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e24:	d505      	bpl.n	8008e32 <sqrtf+0x32>
 8008e26:	f7fe f917 	bl	8007058 <__errno>
 8008e2a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008e2e:	2321      	movs	r3, #33	@ 0x21
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	ecbd 8b02 	vpop	{d8}
 8008e36:	bd08      	pop	{r3, pc}
 8008e38:	00000000 	.word	0x00000000

08008e3c <finitef>:
 8008e3c:	ee10 3a10 	vmov	r3, s0
 8008e40:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008e44:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008e48:	bfac      	ite	ge
 8008e4a:	2000      	movge	r0, #0
 8008e4c:	2001      	movlt	r0, #1
 8008e4e:	4770      	bx	lr

08008e50 <nanf>:
 8008e50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008e58 <nanf+0x8>
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	7fc00000 	.word	0x7fc00000

08008e5c <fminf>:
 8008e5c:	b508      	push	{r3, lr}
 8008e5e:	ed2d 8b02 	vpush	{d8}
 8008e62:	eeb0 8a40 	vmov.f32	s16, s0
 8008e66:	eef0 8a60 	vmov.f32	s17, s1
 8008e6a:	f000 f815 	bl	8008e98 <__fpclassifyf>
 8008e6e:	b930      	cbnz	r0, 8008e7e <fminf+0x22>
 8008e70:	eeb0 8a68 	vmov.f32	s16, s17
 8008e74:	eeb0 0a48 	vmov.f32	s0, s16
 8008e78:	ecbd 8b02 	vpop	{d8}
 8008e7c:	bd08      	pop	{r3, pc}
 8008e7e:	eeb0 0a68 	vmov.f32	s0, s17
 8008e82:	f000 f809 	bl	8008e98 <__fpclassifyf>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d0f4      	beq.n	8008e74 <fminf+0x18>
 8008e8a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e92:	d5ed      	bpl.n	8008e70 <fminf+0x14>
 8008e94:	e7ee      	b.n	8008e74 <fminf+0x18>
	...

08008e98 <__fpclassifyf>:
 8008e98:	ee10 3a10 	vmov	r3, s0
 8008e9c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8008ea0:	d00d      	beq.n	8008ebe <__fpclassifyf+0x26>
 8008ea2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008ea6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008eaa:	d30a      	bcc.n	8008ec2 <__fpclassifyf+0x2a>
 8008eac:	4b07      	ldr	r3, [pc, #28]	@ (8008ecc <__fpclassifyf+0x34>)
 8008eae:	1e42      	subs	r2, r0, #1
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d908      	bls.n	8008ec6 <__fpclassifyf+0x2e>
 8008eb4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008eb8:	4258      	negs	r0, r3
 8008eba:	4158      	adcs	r0, r3
 8008ebc:	4770      	bx	lr
 8008ebe:	2002      	movs	r0, #2
 8008ec0:	4770      	bx	lr
 8008ec2:	2004      	movs	r0, #4
 8008ec4:	4770      	bx	lr
 8008ec6:	2003      	movs	r0, #3
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	007ffffe 	.word	0x007ffffe

08008ed0 <__ieee754_sqrtf>:
 8008ed0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008ed4:	4770      	bx	lr
	...

08008ed8 <__ieee754_expf>:
 8008ed8:	ee10 2a10 	vmov	r2, s0
 8008edc:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8008ee0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008ee4:	d902      	bls.n	8008eec <__ieee754_expf+0x14>
 8008ee6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008eea:	4770      	bx	lr
 8008eec:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8008ef0:	d106      	bne.n	8008f00 <__ieee754_expf+0x28>
 8008ef2:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800902c <__ieee754_expf+0x154>
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	bf18      	it	ne
 8008efa:	eeb0 0a67 	vmovne.f32	s0, s15
 8008efe:	4770      	bx	lr
 8008f00:	484b      	ldr	r0, [pc, #300]	@ (8009030 <__ieee754_expf+0x158>)
 8008f02:	4282      	cmp	r2, r0
 8008f04:	dd02      	ble.n	8008f0c <__ieee754_expf+0x34>
 8008f06:	2000      	movs	r0, #0
 8008f08:	f000 b9c6 	b.w	8009298 <__math_oflowf>
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	da05      	bge.n	8008f1c <__ieee754_expf+0x44>
 8008f10:	4a48      	ldr	r2, [pc, #288]	@ (8009034 <__ieee754_expf+0x15c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d902      	bls.n	8008f1c <__ieee754_expf+0x44>
 8008f16:	2000      	movs	r0, #0
 8008f18:	f000 b9b8 	b.w	800928c <__math_uflowf>
 8008f1c:	4a46      	ldr	r2, [pc, #280]	@ (8009038 <__ieee754_expf+0x160>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8008f24:	d952      	bls.n	8008fcc <__ieee754_expf+0xf4>
 8008f26:	4a45      	ldr	r2, [pc, #276]	@ (800903c <__ieee754_expf+0x164>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8008f2e:	d834      	bhi.n	8008f9a <__ieee754_expf+0xc2>
 8008f30:	4b43      	ldr	r3, [pc, #268]	@ (8009040 <__ieee754_expf+0x168>)
 8008f32:	4413      	add	r3, r2
 8008f34:	ed93 7a00 	vldr	s14, [r3]
 8008f38:	4b42      	ldr	r3, [pc, #264]	@ (8009044 <__ieee754_expf+0x16c>)
 8008f3a:	4413      	add	r3, r2
 8008f3c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008f40:	f1c1 0201 	rsb	r2, r1, #1
 8008f44:	edd3 7a00 	vldr	s15, [r3]
 8008f48:	1a52      	subs	r2, r2, r1
 8008f4a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008f4e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008f52:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8009048 <__ieee754_expf+0x170>
 8008f56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800904c <__ieee754_expf+0x174>
 8008f5a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8008f5e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8009050 <__ieee754_expf+0x178>
 8008f62:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008f66:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009054 <__ieee754_expf+0x17c>
 8008f6a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8008f6e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8009058 <__ieee754_expf+0x180>
 8008f72:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008f76:	eef0 6a40 	vmov.f32	s13, s0
 8008f7a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8008f7e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8008f82:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008f86:	bb92      	cbnz	r2, 8008fee <__ieee754_expf+0x116>
 8008f88:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008f8c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008f90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008f94:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8008f98:	4770      	bx	lr
 8008f9a:	4b30      	ldr	r3, [pc, #192]	@ (800905c <__ieee754_expf+0x184>)
 8008f9c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8009060 <__ieee754_expf+0x188>
 8008fa0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8009064 <__ieee754_expf+0x18c>
 8008fa4:	4413      	add	r3, r2
 8008fa6:	edd3 7a00 	vldr	s15, [r3]
 8008faa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008fae:	eeb0 7a40 	vmov.f32	s14, s0
 8008fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fb6:	ee17 2a90 	vmov	r2, s15
 8008fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fbe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008fc2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8009068 <__ieee754_expf+0x190>
 8008fc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008fca:	e7be      	b.n	8008f4a <__ieee754_expf+0x72>
 8008fcc:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8008fd0:	d20b      	bcs.n	8008fea <__ieee754_expf+0x112>
 8008fd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800906c <__ieee754_expf+0x194>
 8008fd6:	ee70 6a26 	vadd.f32	s13, s0, s13
 8008fda:	eef4 6ae5 	vcmpe.f32	s13, s11
 8008fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe2:	dd02      	ble.n	8008fea <__ieee754_expf+0x112>
 8008fe4:	ee30 0a25 	vadd.f32	s0, s0, s11
 8008fe8:	4770      	bx	lr
 8008fea:	2200      	movs	r2, #0
 8008fec:	e7af      	b.n	8008f4e <__ieee754_expf+0x76>
 8008fee:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008ff2:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8008ff6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8008ffa:	bfb8      	it	lt
 8008ffc:	3264      	addlt	r2, #100	@ 0x64
 8008ffe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009006:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800900a:	ee17 3a90 	vmov	r3, s15
 800900e:	bfab      	itete	ge
 8009010:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009014:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009018:	ee00 3a10 	vmovge	s0, r3
 800901c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8009070 <__ieee754_expf+0x198>
 8009020:	bfbc      	itt	lt
 8009022:	ee00 3a10 	vmovlt	s0, r3
 8009026:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800902a:	4770      	bx	lr
 800902c:	00000000 	.word	0x00000000
 8009030:	42b17217 	.word	0x42b17217
 8009034:	42cff1b5 	.word	0x42cff1b5
 8009038:	3eb17218 	.word	0x3eb17218
 800903c:	3f851591 	.word	0x3f851591
 8009040:	08009cd0 	.word	0x08009cd0
 8009044:	08009cc8 	.word	0x08009cc8
 8009048:	3331bb4c 	.word	0x3331bb4c
 800904c:	b5ddea0e 	.word	0xb5ddea0e
 8009050:	388ab355 	.word	0x388ab355
 8009054:	bb360b61 	.word	0xbb360b61
 8009058:	3e2aaaab 	.word	0x3e2aaaab
 800905c:	08009cd8 	.word	0x08009cd8
 8009060:	3fb8aa3b 	.word	0x3fb8aa3b
 8009064:	3f317180 	.word	0x3f317180
 8009068:	3717f7d1 	.word	0x3717f7d1
 800906c:	7149f2ca 	.word	0x7149f2ca
 8009070:	0d800000 	.word	0x0d800000

08009074 <__ieee754_logf>:
 8009074:	ee10 3a10 	vmov	r3, s0
 8009078:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800907c:	d106      	bne.n	800908c <__ieee754_logf+0x18>
 800907e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8009218 <__ieee754_logf+0x1a4>
 8009082:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800921c <__ieee754_logf+0x1a8>
 8009086:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800908a:	4770      	bx	lr
 800908c:	2b00      	cmp	r3, #0
 800908e:	461a      	mov	r2, r3
 8009090:	da02      	bge.n	8009098 <__ieee754_logf+0x24>
 8009092:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009096:	e7f4      	b.n	8009082 <__ieee754_logf+0xe>
 8009098:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800909c:	db02      	blt.n	80090a4 <__ieee754_logf+0x30>
 800909e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80090a2:	4770      	bx	lr
 80090a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090a8:	bfb8      	it	lt
 80090aa:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8009220 <__ieee754_logf+0x1ac>
 80090ae:	485d      	ldr	r0, [pc, #372]	@ (8009224 <__ieee754_logf+0x1b0>)
 80090b0:	bfbe      	ittt	lt
 80090b2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80090b6:	f06f 0118 	mvnlt.w	r1, #24
 80090ba:	ee17 2a90 	vmovlt	r2, s15
 80090be:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80090c2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80090c6:	4410      	add	r0, r2
 80090c8:	bfa8      	it	ge
 80090ca:	2100      	movge	r1, #0
 80090cc:	3b7f      	subs	r3, #127	@ 0x7f
 80090ce:	440b      	add	r3, r1
 80090d0:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80090d4:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 80090d8:	4311      	orrs	r1, r2
 80090da:	ee00 1a10 	vmov	s0, r1
 80090de:	4952      	ldr	r1, [pc, #328]	@ (8009228 <__ieee754_logf+0x1b4>)
 80090e0:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80090e4:	f102 000f 	add.w	r0, r2, #15
 80090e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80090ec:	4001      	ands	r1, r0
 80090ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80090f2:	bb89      	cbnz	r1, 8009158 <__ieee754_logf+0xe4>
 80090f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80090f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fc:	d10f      	bne.n	800911e <__ieee754_logf+0xaa>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 8087 	beq.w	8009212 <__ieee754_logf+0x19e>
 8009104:	ee07 3a90 	vmov	s15, r3
 8009108:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800922c <__ieee754_logf+0x1b8>
 800910c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8009230 <__ieee754_logf+0x1bc>
 8009110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009114:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009118:	eea7 0a87 	vfma.f32	s0, s15, s14
 800911c:	4770      	bx	lr
 800911e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009234 <__ieee754_logf+0x1c0>
 8009122:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009126:	eee0 7a66 	vfms.f32	s15, s0, s13
 800912a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800912e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009132:	b913      	cbnz	r3, 800913a <__ieee754_logf+0xc6>
 8009134:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009138:	4770      	bx	lr
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800922c <__ieee754_logf+0x1b8>
 8009142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009146:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800914a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800914e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009230 <__ieee754_logf+0x1bc>
 8009152:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009156:	4770      	bx	lr
 8009158:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800915c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009160:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009238 <__ieee754_logf+0x1c4>
 8009164:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800923c <__ieee754_logf+0x1c8>
 8009168:	4935      	ldr	r1, [pc, #212]	@ (8009240 <__ieee754_logf+0x1cc>)
 800916a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800916e:	4411      	add	r1, r2
 8009170:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8009174:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8009178:	430a      	orrs	r2, r1
 800917a:	2a00      	cmp	r2, #0
 800917c:	ee07 3a90 	vmov	s15, r3
 8009180:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009184:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009188:	ee25 7a05 	vmul.f32	s14, s10, s10
 800918c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8009244 <__ieee754_logf+0x1d0>
 8009190:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009194:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009248 <__ieee754_logf+0x1d4>
 8009198:	eee7 5a87 	vfma.f32	s11, s15, s14
 800919c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800924c <__ieee754_logf+0x1d8>
 80091a0:	eee7 7a24 	vfma.f32	s15, s14, s9
 80091a4:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8009250 <__ieee754_logf+0x1dc>
 80091a8:	eee7 4a87 	vfma.f32	s9, s15, s14
 80091ac:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8009254 <__ieee754_logf+0x1e0>
 80091b0:	eee4 7a87 	vfma.f32	s15, s9, s14
 80091b4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80091b8:	eee5 7a87 	vfma.f32	s15, s11, s14
 80091bc:	dd1a      	ble.n	80091f4 <__ieee754_logf+0x180>
 80091be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80091c2:	ee20 7a07 	vmul.f32	s14, s0, s14
 80091c6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80091ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 80091d2:	b913      	cbnz	r3, 80091da <__ieee754_logf+0x166>
 80091d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80091d8:	e7ac      	b.n	8009134 <__ieee754_logf+0xc0>
 80091da:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800922c <__ieee754_logf+0x1b8>
 80091de:	eee6 7a86 	vfma.f32	s15, s13, s12
 80091e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80091e6:	ee37 0a40 	vsub.f32	s0, s14, s0
 80091ea:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8009230 <__ieee754_logf+0x1bc>
 80091ee:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80091f2:	4770      	bx	lr
 80091f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80091f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80091fc:	b913      	cbnz	r3, 8009204 <__ieee754_logf+0x190>
 80091fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009202:	4770      	bx	lr
 8009204:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800922c <__ieee754_logf+0x1b8>
 8009208:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800920c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009210:	e7eb      	b.n	80091ea <__ieee754_logf+0x176>
 8009212:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800921c <__ieee754_logf+0x1a8>
 8009216:	4770      	bx	lr
 8009218:	cc000000 	.word	0xcc000000
 800921c:	00000000 	.word	0x00000000
 8009220:	4c000000 	.word	0x4c000000
 8009224:	004afb20 	.word	0x004afb20
 8009228:	007ffff0 	.word	0x007ffff0
 800922c:	3717f7d1 	.word	0x3717f7d1
 8009230:	3f317180 	.word	0x3f317180
 8009234:	3eaaaaab 	.word	0x3eaaaaab
 8009238:	3e1cd04f 	.word	0x3e1cd04f
 800923c:	3e178897 	.word	0x3e178897
 8009240:	ffcf5c30 	.word	0xffcf5c30
 8009244:	3e638e29 	.word	0x3e638e29
 8009248:	3ecccccd 	.word	0x3ecccccd
 800924c:	3e3a3325 	.word	0x3e3a3325
 8009250:	3e924925 	.word	0x3e924925
 8009254:	3f2aaaab 	.word	0x3f2aaaab

08009258 <with_errnof>:
 8009258:	b510      	push	{r4, lr}
 800925a:	ed2d 8b02 	vpush	{d8}
 800925e:	eeb0 8a40 	vmov.f32	s16, s0
 8009262:	4604      	mov	r4, r0
 8009264:	f7fd fef8 	bl	8007058 <__errno>
 8009268:	eeb0 0a48 	vmov.f32	s0, s16
 800926c:	ecbd 8b02 	vpop	{d8}
 8009270:	6004      	str	r4, [r0, #0]
 8009272:	bd10      	pop	{r4, pc}

08009274 <xflowf>:
 8009274:	b130      	cbz	r0, 8009284 <xflowf+0x10>
 8009276:	eef1 7a40 	vneg.f32	s15, s0
 800927a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800927e:	2022      	movs	r0, #34	@ 0x22
 8009280:	f7ff bfea 	b.w	8009258 <with_errnof>
 8009284:	eef0 7a40 	vmov.f32	s15, s0
 8009288:	e7f7      	b.n	800927a <xflowf+0x6>
	...

0800928c <__math_uflowf>:
 800928c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009294 <__math_uflowf+0x8>
 8009290:	f7ff bff0 	b.w	8009274 <xflowf>
 8009294:	10000000 	.word	0x10000000

08009298 <__math_oflowf>:
 8009298:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80092a0 <__math_oflowf+0x8>
 800929c:	f7ff bfea 	b.w	8009274 <xflowf>
 80092a0:	70000000 	.word	0x70000000

080092a4 <_init>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr

080092b0 <_fini>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr
